{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo } from 'react';\nimport rison from 'rison';\nimport { FeatureFlag, SupersetClient, isFeatureEnabled, styled, t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport { NotificationMethodOption } from '../types';\nimport { StyledInputContainer } from '../AlertReportModal';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n\n    &.error {\n      input {\n        border-color: ${({ theme }) => theme.colors.error.base};\n      }\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\nconst TRANSLATIONS = {\n  EMAIL_SUBJECT_NAME: t('Email subject name (optional)'),\n  EMAIL_SUBJECT_ERROR_TEXT: t('Please enter valid text. Spaces alone are not permitted.')\n};\nexport const mapSlackValues = ({ method, recipientValue, slackOptions }) => {\n  const prop = method === NotificationMethodOption.SlackV2 ? 'value' : 'label';\n  return recipientValue.\n  split(',').\n  map((recipient) => slackOptions.find((option) => option[prop].trim().toLowerCase() === recipient.trim().toLowerCase())).\n  filter((val) => !!val);\n};\nexport const mapChannelsToOptions = (result) => {\n  const publicChannels = [];\n  const privateChannels = [];\n  result.forEach((channel) => {\n    if (channel.is_private) {\n      privateChannels.push(channel);\n    } else\n    {\n      publicChannels.push(channel);\n    }\n  });\n  return [\n  {\n    label: 'Public Channels',\n    options: publicChannels.map((channel) => ({\n      label: `${channel.name} ${channel.is_member ? '' : t('(Bot not in channel)')}`,\n      value: channel.id,\n      key: channel.id\n    })),\n    key: 'public'\n  },\n  {\n    label: t('Private Channels (Bot in channel)'),\n    options: privateChannels.map((channel) => ({\n      label: channel.name,\n      value: channel.id,\n      key: channel.id\n    })),\n    key: 'private'\n  }];\n\n};\nexport const NotificationMethod = ({ setting = null, index, onUpdate, onRemove, onInputChange, email_subject, defaultSubject, setErrorSubject }) => {\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState(recipients || '');\n  const [slackRecipients, setSlackRecipients] = useState([]);\n  const [error, setError] = useState(false);\n  const theme = useTheme();\n  const [slackOptions, setSlackOptions] = useState([\n  {\n    label: '',\n    options: []\n  }]\n  );\n  const [useSlackV1, setUseSlackV1] = useState(false);\n  const onMethodChange = (selected) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate && setting) {\n      const updatedSetting = {\n        ...setting,\n        method: selected.value,\n        recipients: ''\n      };\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const fetchSlackChannels = async ({ searchString = '', types = [], exactMatch = false } = {}) => {\n    const queryString = rison.encode({ searchString, types, exactMatch });\n    const endpoint = `/api/v1/report/slack_channels/?q=${queryString}`;\n    return SupersetClient.get({ endpoint });\n  };\n  useEffect(() => {var _slackOptions$;\n    if (method &&\n    [\n    NotificationMethodOption.Slack,\n    NotificationMethodOption.SlackV2].\n    includes(method) &&\n    !((_slackOptions$ = slackOptions[0]) != null && _slackOptions$.options.length)) {\n      fetchSlackChannels({ types: ['public_channel', 'private_channel'] }).\n      then(({ json }) => {\n        const { result } = json;\n        const options = mapChannelsToOptions(result);\n        setSlackOptions(options);\n        if (isFeatureEnabled(FeatureFlag.AlertReportSlackV2)) {\n          // map existing ids to names for display\n          // or names to ids if slack v1\n          const [publicOptions, privateOptions] = options;\n          setSlackRecipients(mapSlackValues({\n            method,\n            recipientValue,\n            slackOptions: [\n            ...publicOptions.options,\n            ...privateOptions.options]\n\n          }));\n          if (method === NotificationMethodOption.Slack) {\n            onMethodChange({\n              label: NotificationMethodOption.Slack,\n              value: NotificationMethodOption.SlackV2\n            });\n          }\n        }\n      }).\n      catch(() => {\n        // Fallback to slack v1 if slack v2 is not compatible\n        setUseSlackV1(true);\n      });\n    }\n  }, [method]);\n  const methodOptions = useMemo(() => (options || []).\n  filter((method) => isFeatureEnabled(FeatureFlag.AlertReportSlackV2) &&\n  !useSlackV1 &&\n  method === NotificationMethodOption.SlackV2 ||\n  (!isFeatureEnabled(FeatureFlag.AlertReportSlackV2) ||\n  useSlackV1) &&\n  method === NotificationMethodOption.Slack ||\n  method === NotificationMethodOption.Email).\n  map((method) => ({\n    label: method === NotificationMethodOption.SlackV2 ?\n    NotificationMethodOption.Slack :\n    method,\n    value: method\n  })), [options]);\n  if (!setting) {\n    return null;\n  }\n  const onRecipientsChange = (event) => {\n    const { target } = event;\n    setRecipientValue(target.value);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value\n      };\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const onSlackRecipientsChange = (recipients) => {\n    setSlackRecipients(recipients);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: recipients == null ? void 0 : recipients.map((obj) => obj.value).join(',')\n      };\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const onSubjectChange = (event) => {\n    const { value } = event.target;\n    if (onInputChange) {\n      onInputChange(event);\n    }\n    const hasError = value.length > 0 && value.trim().length === 0;\n    setError(hasError);\n    if (setErrorSubject) {\n      setErrorSubject(hasError);\n    }\n  };\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n  return _jsxs(StyledNotificationMethod, { children: [\n    _jsx(\"div\", { className: \"inline-container\", children:\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Notification Method') }),\n        _jsxs(\"div\", { className: \"input-container\", children: [\n          _jsx(Select, { ariaLabel: t('Delivery method'), \"data-test\": \"select-delivery-method\", labelInValue: true, onChange: onMethodChange, placeholder: t('Select Delivery Method'), options: methodOptions, showSearch: true, value: methodOptions.find((option) => option.value === method) }),\n          index !== 0 && !!onRemove ? _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"delete-button\", onClick: () => onRemove(index), children:\n            _jsx(Icons.Trash, { iconColor: theme.colors.grayscale.base }) }\n          ) : null] }\n        )] }\n      ) }\n    ),\n    method !== undefined ? _jsxs(_Fragment, { children: [\n      _jsx(\"div\", { className: \"inline-container\", children:\n        _jsx(StyledInputContainer, { children:\n          method === NotificationMethodOption.Email ? _jsxs(_Fragment, { children: [\n            _jsx(\"div\", { className: \"control-label\", children:\n              TRANSLATIONS.EMAIL_SUBJECT_NAME }\n            ),\n            _jsx(\"div\", { className: `input-container ${error ? 'error' : ''}`, children:\n              _jsx(\"input\", { type: \"text\", name: \"email_subject\", value: email_subject, placeholder: defaultSubject, onChange: onSubjectChange }) }\n            ),\n            error && _jsx(\"div\", { style: {\n                color: theme.colors.error.base,\n                fontSize: theme.gridUnit * 3\n              }, children:\n              TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT }\n            )] }\n          ) : null }\n        ) }\n      ),\n      _jsx(\"div\", { className: \"inline-container\", children:\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s recipients', method === NotificationMethodOption.SlackV2 ?\n            NotificationMethodOption.Slack :\n            method),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"div\", { children:\n            [\n            NotificationMethodOption.Email,\n            NotificationMethodOption.Slack].\n            includes(method) ? _jsxs(_Fragment, { children: [\n              _jsx(\"div\", { className: \"input-container\", children:\n                _jsx(\"textarea\", { name: \"recipients\", \"data-test\": \"recipients\", value: recipientValue, onChange: onRecipientsChange }) }\n              ),\n              _jsx(\"div\", { className: \"helper\", children:\n                t('Recipients are separated by \",\" or \";\"') }\n              )] }\n            ) :\n            // for SlackV2\n            _jsx(Select, { ariaLabel: t('Select channels'), mode: \"multiple\", name: \"recipients\", value: slackRecipients, options: slackOptions, onChange: onSlackRecipientsChange, allowClear: true, \"data-test\": \"recipients\", allowSelectAll: false, labelInValue: true }) }\n          )] }\n        ) }\n      )] }\n    ) : null] }\n  );\n};__signature__(NotificationMethod, \"useState{[recipientValue, setRecipientValue](recipients || '')}\\nuseState{[slackRecipients, setSlackRecipients]([])}\\nuseState{[error, setError](false)}\\nuseTheme{theme}\\nuseState{[slackOptions, setSlackOptions]([\\n        {\\n            label: '',\\n            options: [],\\n        },\\n    ])}\\nuseState{[useSlackV1, setUseSlackV1](false)}\\nuseEffect{}\\nuseMemo{methodOptions}\", () => [useTheme]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledNotificationMethod, \"StyledNotificationMethod\", \"/app/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");reactHotLoader.register(TRANSLATIONS, \"TRANSLATIONS\", \"/app/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");reactHotLoader.register(mapSlackValues, \"mapSlackValues\", \"/app/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");reactHotLoader.register(mapChannelsToOptions, \"mapChannelsToOptions\", \"/app/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");reactHotLoader.register(NotificationMethod, \"NotificationMethod\", \"/app/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useEffect","useMemo","rison","FeatureFlag","SupersetClient","isFeatureEnabled","styled","t","useTheme","Select","Icons","NotificationMethodOption","StyledInputContainer","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","StyledNotificationMethod","div","theme","colors","error","base","TRANSLATIONS","EMAIL_SUBJECT_NAME","EMAIL_SUBJECT_ERROR_TEXT","mapSlackValues","method","recipientValue","slackOptions","prop","SlackV2","split","map","recipient","find","option","trim","toLowerCase","filter","val","mapChannelsToOptions","result","publicChannels","privateChannels","forEach","channel","is_private","push","label","options","name","is_member","value","id","key","NotificationMethod","setting","index","onUpdate","onRemove","onInputChange","email_subject","defaultSubject","setErrorSubject","recipients","setRecipientValue","slackRecipients","setSlackRecipients","setError","setSlackOptions","useSlackV1","setUseSlackV1","onMethodChange","selected","updatedSetting","fetchSlackChannels","searchString","types","exactMatch","queryString","encode","endpoint","get","_slackOptions$","Slack","includes","length","then","json","AlertReportSlackV2","publicOptions","privateOptions","catch","methodOptions","Email","onRecipientsChange","event","target","onSlackRecipientsChange","obj","join","onSubjectChange","hasError","children","className","ariaLabel","labelInValue","onChange","placeholder","showSearch","role","tabIndex","onClick","Trash","iconColor","grayscale","undefined","type","style","color","fontSize","gridUnit","mode","allowClear","allowSelectAll","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/features/alerts/components/NotificationMethod.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  FunctionComponent,\n  useState,\n  ChangeEvent,\n  useEffect,\n  useMemo,\n} from 'react';\nimport rison from 'rison';\n\nimport {\n  FeatureFlag,\n  JsonResponse,\n  SupersetClient,\n  isFeatureEnabled,\n  styled,\n  t,\n  useTheme,\n} from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  SlackChannel,\n} from '../types';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n\n    &.error {\n      input {\n        border-color: ${({ theme }) => theme.colors.error.base};\n      }\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n  onInputChange?: (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => void;\n  email_subject: string;\n  defaultSubject: string;\n  setErrorSubject: (hasError: boolean) => void;\n}\n\nconst TRANSLATIONS = {\n  EMAIL_SUBJECT_NAME: t('Email subject name (optional)'),\n  EMAIL_SUBJECT_ERROR_TEXT: t(\n    'Please enter valid text. Spaces alone are not permitted.',\n  ),\n};\n\nexport const mapSlackValues = ({\n  method,\n  recipientValue,\n  slackOptions,\n}: {\n  method: string;\n  recipientValue: string;\n  slackOptions: { label: string; value: string }[];\n}) => {\n  const prop = method === NotificationMethodOption.SlackV2 ? 'value' : 'label';\n  return recipientValue\n    .split(',')\n    .map(recipient =>\n      slackOptions.find(\n        option =>\n          option[prop].trim().toLowerCase() === recipient.trim().toLowerCase(),\n      ),\n    )\n    .filter(val => !!val) as { label: string; value: string }[];\n};\n\nexport const mapChannelsToOptions = (result: SlackChannel[]) => {\n  const publicChannels: SlackChannel[] = [];\n  const privateChannels: SlackChannel[] = [];\n\n  result.forEach(channel => {\n    if (channel.is_private) {\n      privateChannels.push(channel);\n    } else {\n      publicChannels.push(channel);\n    }\n  });\n\n  return [\n    {\n      label: 'Public Channels',\n      options: publicChannels.map((channel: SlackChannel) => ({\n        label: `${channel.name} ${\n          channel.is_member ? '' : t('(Bot not in channel)')\n        }`,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'public',\n    },\n    {\n      label: t('Private Channels (Bot in channel)'),\n      options: privateChannels.map((channel: SlackChannel) => ({\n        label: channel.name,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'private',\n    },\n  ];\n};\n\ntype SlackOptionsType = {\n  label: string;\n  options: { label: string; value: string }[];\n}[];\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n  onInputChange,\n  email_subject,\n  defaultSubject,\n  setErrorSubject,\n}) => {\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n  const [slackRecipients, setSlackRecipients] = useState<\n    { label: string; value: string }[]\n  >([]);\n  const [error, setError] = useState(false);\n  const theme = useTheme();\n  const [slackOptions, setSlackOptions] = useState<SlackOptionsType>([\n    {\n      label: '',\n      options: [],\n    },\n  ]);\n\n  const [useSlackV1, setUseSlackV1] = useState<boolean>(false);\n\n  const onMethodChange = (selected: {\n    label: string;\n    value: NotificationMethodOption;\n  }) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate && setting) {\n      const updatedSetting = {\n        ...setting,\n        method: selected.value,\n        recipients: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const fetchSlackChannels = async ({\n    searchString = '',\n    types = [],\n    exactMatch = false,\n  }: {\n    searchString?: string | undefined;\n    types?: string[];\n    exactMatch?: boolean | undefined;\n  } = {}): Promise<JsonResponse> => {\n    const queryString = rison.encode({ searchString, types, exactMatch });\n    const endpoint = `/api/v1/report/slack_channels/?q=${queryString}`;\n    return SupersetClient.get({ endpoint });\n  };\n\n  useEffect(() => {\n    if (\n      method &&\n      [\n        NotificationMethodOption.Slack,\n        NotificationMethodOption.SlackV2,\n      ].includes(method) &&\n      !slackOptions[0]?.options.length\n    ) {\n      fetchSlackChannels({ types: ['public_channel', 'private_channel'] })\n        .then(({ json }) => {\n          const { result } = json;\n\n          const options: SlackOptionsType = mapChannelsToOptions(result);\n\n          setSlackOptions(options);\n\n          if (isFeatureEnabled(FeatureFlag.AlertReportSlackV2)) {\n            // map existing ids to names for display\n            // or names to ids if slack v1\n            const [publicOptions, privateOptions] = options;\n\n            setSlackRecipients(\n              mapSlackValues({\n                method,\n                recipientValue,\n                slackOptions: [\n                  ...publicOptions.options,\n                  ...privateOptions.options,\n                ],\n              }),\n            );\n            if (method === NotificationMethodOption.Slack) {\n              onMethodChange({\n                label: NotificationMethodOption.Slack,\n                value: NotificationMethodOption.SlackV2,\n              });\n            }\n          }\n        })\n        .catch(() => {\n          // Fallback to slack v1 if slack v2 is not compatible\n          setUseSlackV1(true);\n        });\n    }\n  }, [method]);\n\n  const methodOptions = useMemo(\n    () =>\n      (options || [])\n        .filter(\n          method =>\n            (isFeatureEnabled(FeatureFlag.AlertReportSlackV2) &&\n              !useSlackV1 &&\n              method === NotificationMethodOption.SlackV2) ||\n            ((!isFeatureEnabled(FeatureFlag.AlertReportSlackV2) ||\n              useSlackV1) &&\n              method === NotificationMethodOption.Slack) ||\n            method === NotificationMethodOption.Email,\n        )\n        .map(method => ({\n          label:\n            method === NotificationMethodOption.SlackV2\n              ? NotificationMethodOption.Slack\n              : method,\n          value: method,\n        })),\n    [options],\n  );\n\n  if (!setting) {\n    return null;\n  }\n\n  const onRecipientsChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSlackRecipientsChange = (\n    recipients: { label: string; value: string }[],\n  ) => {\n    setSlackRecipients(recipients);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: recipients?.map(obj => obj.value).join(','),\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSubjectChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { value } = event.target;\n\n    if (onInputChange) {\n      onInputChange(event);\n    }\n\n    const hasError = value.length > 0 && value.trim().length === 0;\n    setError(hasError);\n    if (setErrorSubject) {\n      setErrorSubject(hasError);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Notification Method')}</div>\n          <div className=\"input-container\">\n            <Select\n              ariaLabel={t('Delivery method')}\n              data-test=\"select-delivery-method\"\n              labelInValue\n              onChange={onMethodChange}\n              placeholder={t('Select Delivery Method')}\n              options={methodOptions}\n              showSearch\n              value={methodOptions.find(option => option.value === method)}\n            />\n            {index !== 0 && !!onRemove ? (\n              <span\n                role=\"button\"\n                tabIndex={0}\n                className=\"delete-button\"\n                onClick={() => onRemove(index)}\n              >\n                <Icons.Trash iconColor={theme.colors.grayscale.base} />\n              </span>\n            ) : null}\n          </div>\n        </StyledInputContainer>\n      </div>\n      {method !== undefined ? (\n        <>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              {method === NotificationMethodOption.Email ? (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_SUBJECT_NAME}\n                  </div>\n                  <div className={`input-container ${error ? 'error' : ''}`}>\n                    <input\n                      type=\"text\"\n                      name=\"email_subject\"\n                      value={email_subject}\n                      placeholder={defaultSubject}\n                      onChange={onSubjectChange}\n                    />\n                  </div>\n                  {error && (\n                    <div\n                      style={{\n                        color: theme.colors.error.base,\n                        fontSize: theme.gridUnit * 3,\n                      }}\n                    >\n                      {TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT}\n                    </div>\n                  )}\n                </>\n              ) : null}\n            </StyledInputContainer>\n          </div>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t(\n                  '%s recipients',\n                  method === NotificationMethodOption.SlackV2\n                    ? NotificationMethodOption.Slack\n                    : method,\n                )}\n                <span className=\"required\">*</span>\n              </div>\n              <div>\n                {[\n                  NotificationMethodOption.Email,\n                  NotificationMethodOption.Slack,\n                ].includes(method) ? (\n                  <>\n                    <div className=\"input-container\">\n                      <textarea\n                        name=\"recipients\"\n                        data-test=\"recipients\"\n                        value={recipientValue}\n                        onChange={onRecipientsChange}\n                      />\n                    </div>\n                    <div className=\"helper\">\n                      {t('Recipients are separated by \",\" or \";\"')}\n                    </div>\n                  </>\n                ) : (\n                  // for SlackV2\n                  <Select\n                    ariaLabel={t('Select channels')}\n                    mode=\"multiple\"\n                    name=\"recipients\"\n                    value={slackRecipients}\n                    options={slackOptions}\n                    onChange={onSlackRecipientsChange}\n                    allowClear\n                    data-test=\"recipients\"\n                    allowSelectAll={false}\n                    labelInValue\n                  />\n                )}\n              </div>\n            </StyledInputContainer>\n          </div>\n        </>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}