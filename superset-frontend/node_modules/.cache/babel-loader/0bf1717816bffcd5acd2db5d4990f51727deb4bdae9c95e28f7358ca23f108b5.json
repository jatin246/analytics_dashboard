{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { CategoricalColorNamespace, NumberFormats, getColumnLabel, getMetricLabel, getNumberFormatter, tooltipHtml } from '@superset-ui/core';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { getPercentFormatter } from '../utils/formatters';\nexport default function transformProps(chartProps) {\n  const refs = {};\n  const { formData, height, hooks, queriesData, width } = chartProps;\n  const { onLegendStateChanged } = hooks;\n  const { colorScheme, metric, source, target } = formData;\n  const { data } = queriesData[0];\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const metricLabel = getMetricLabel(metric);\n  const valueFormatter = getNumberFormatter(NumberFormats.FLOAT_2_POINT);\n  const percentFormatter = getPercentFormatter(NumberFormats.PERCENT_2_POINT);\n  const links = [];\n  const set = new Set();\n  data.forEach((datum) => {\n    const sourceName = String(datum[getColumnLabel(source)]);\n    const targetName = String(datum[getColumnLabel(target)]);\n    const value = datum[metricLabel];\n    set.add(sourceName);\n    set.add(targetName);\n    links.push({\n      source: sourceName,\n      target: targetName,\n      value\n    });\n  });\n  const seriesData = Array.from(set).map((name) => ({\n    name,\n    itemStyle: {\n      color: colorFn(name)\n    }\n  }));\n  // stores a map with the total values for each node considering the links\n  const nodeValues = new Map();\n  links.forEach((link) => {\n    const { source, target, value } = link;\n    const sourceValue = nodeValues.get(source) || 0;\n    const targetValue = nodeValues.get(target) || 0;\n    nodeValues.set(source, sourceValue + value);\n    nodeValues.set(target, targetValue + value);\n  });\n  const tooltipFormatter = (params) => {\n    const { name, data } = params;\n    const value = params.value;\n    const rows = [[metricLabel, valueFormatter.format(value)]];\n    const { source, target } = data;\n    if (source && target) {\n      rows.push([\n      `% (${source})`,\n      percentFormatter.format(value / nodeValues.get(source))]\n      );\n      rows.push([\n      `% (${target})`,\n      percentFormatter.format(value / nodeValues.get(target))]\n      );\n    }\n    return tooltipHtml(rows, name);\n  };\n  const echartOptions = {\n    series: {\n      animation: false,\n      data: seriesData,\n      lineStyle: {\n        color: 'source'\n      },\n      links,\n      type: 'sankey'\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      formatter: tooltipFormatter\n    }\n  };\n  return {\n    refs,\n    formData,\n    width,\n    height,\n    echartOptions,\n    onLegendStateChanged\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(transformProps, \"transformProps\", \"/app/superset-frontend/plugins/plugin-chart-echarts/src/Sankey/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CategoricalColorNamespace","NumberFormats","getColumnLabel","getMetricLabel","getNumberFormatter","tooltipHtml","getDefaultTooltip","getPercentFormatter","transformProps","chartProps","refs","formData","height","hooks","queriesData","width","onLegendStateChanged","colorScheme","metric","source","target","data","colorFn","getScale","metricLabel","valueFormatter","FLOAT_2_POINT","percentFormatter","PERCENT_2_POINT","links","set","Set","forEach","datum","sourceName","String","targetName","value","add","push","seriesData","Array","from","map","name","itemStyle","color","nodeValues","Map","link","sourceValue","get","targetValue","tooltipFormatter","params","rows","format","echartOptions","series","animation","lineStyle","type","tooltip","formatter","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/plugins/plugin-chart-echarts/src/Sankey/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { EChartsOption, SankeySeriesOption } from 'echarts';\nimport { CallbackDataParams } from 'echarts/types/src/util/types';\nimport {\n  CategoricalColorNamespace,\n  NumberFormats,\n  getColumnLabel,\n  getMetricLabel,\n  getNumberFormatter,\n  tooltipHtml,\n} from '@superset-ui/core';\nimport { SankeyChartProps, SankeyTransformedProps } from './types';\nimport { Refs } from '../types';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { getPercentFormatter } from '../utils/formatters';\n\ntype Link = { source: string; target: string; value: number };\n\nexport default function transformProps(\n  chartProps: SankeyChartProps,\n): SankeyTransformedProps {\n  const refs: Refs = {};\n  const { formData, height, hooks, queriesData, width } = chartProps;\n  const { onLegendStateChanged } = hooks;\n  const { colorScheme, metric, source, target } = formData;\n  const { data } = queriesData[0];\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const metricLabel = getMetricLabel(metric);\n  const valueFormatter = getNumberFormatter(NumberFormats.FLOAT_2_POINT);\n  const percentFormatter = getPercentFormatter(NumberFormats.PERCENT_2_POINT);\n\n  const links: Link[] = [];\n  const set = new Set<string>();\n  data.forEach(datum => {\n    const sourceName = String(datum[getColumnLabel(source)]);\n    const targetName = String(datum[getColumnLabel(target)]);\n    const value = datum[metricLabel] as number;\n    set.add(sourceName);\n    set.add(targetName);\n    links.push({\n      source: sourceName,\n      target: targetName,\n      value,\n    });\n  });\n\n  const seriesData: NonNullable<SankeySeriesOption['data']> = Array.from(\n    set,\n  ).map(name => ({\n    name,\n    itemStyle: {\n      color: colorFn(name),\n    },\n  }));\n\n  // stores a map with the total values for each node considering the links\n  const nodeValues = new Map<string, number>();\n  links.forEach(link => {\n    const { source, target, value } = link;\n    const sourceValue = nodeValues.get(source) || 0;\n    const targetValue = nodeValues.get(target) || 0;\n    nodeValues.set(source, sourceValue + value);\n    nodeValues.set(target, targetValue + value);\n  });\n\n  const tooltipFormatter = (params: CallbackDataParams) => {\n    const { name, data } = params;\n    const value = params.value as number;\n    const rows = [[metricLabel, valueFormatter.format(value)]];\n    const { source, target } = data as Link;\n    if (source && target) {\n      rows.push([\n        `% (${source})`,\n        percentFormatter.format(value / nodeValues.get(source)!),\n      ]);\n      rows.push([\n        `% (${target})`,\n        percentFormatter.format(value / nodeValues.get(target)!),\n      ]);\n    }\n    return tooltipHtml(rows, name);\n  };\n\n  const echartOptions: EChartsOption = {\n    series: {\n      animation: false,\n      data: seriesData,\n      lineStyle: {\n        color: 'source',\n      },\n      links,\n      type: 'sankey',\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      formatter: tooltipFormatter,\n    },\n  };\n\n  return {\n    refs,\n    formData,\n    width,\n    height,\n    echartOptions,\n    onLegendStateChanged,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}