{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo } from 'react';\nimport { ensureIsArray, styled, t } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { EmptyStateMedium } from 'src/components/EmptyState';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport { useFilteredTableData, useTableColumns } from 'src/explore/components/DataTableControl';\nimport { getDatasourceSamples } from 'src/components/Chart/chartAction';\nimport { TableControls } from './DataTableControls';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst Error = styled.pre`\n  margin-top: ${({ theme }) => `${theme.gridUnit * 4}px`};\n`;\nconst cache = new WeakSet();\nexport const SamplesPane = ({ isRequest, datasource, queryForce, actions, dataSize = 50, isVisible, canDownload }) => {\n  const [filterText, setFilterText] = useState('');\n  const [data, setData] = useState([]);\n  const [colnames, setColnames] = useState([]);\n  const [coltypes, setColtypes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [rowcount, setRowCount] = useState(0);\n  const [responseError, setResponseError] = useState('');\n  const datasourceId = useMemo(() => `${datasource.id}__${datasource.type}`, [datasource]);\n  useEffect(() => {\n    if (isRequest && queryForce) {\n      cache.delete(datasource);\n    }\n    if (isRequest && !cache.has(datasource)) {\n      setIsLoading(true);\n      getDatasourceSamples(datasource.type, datasource.id, queryForce, {}).\n      then((response) => {\n        setData(ensureIsArray(response.data));\n        setColnames(ensureIsArray(response.colnames));\n        setColtypes(ensureIsArray(response.coltypes));\n        setRowCount(response.rowcount);\n        setResponseError('');\n        cache.add(datasource);\n        if (queryForce && actions) {\n          actions.setForceQuery(false);\n        }\n      }).\n      catch((error) => {\n        setData([]);\n        setColnames([]);\n        setColtypes([]);\n        setResponseError(`${error.name}: ${error.message}`);\n      }).\n      finally(() => {\n        setIsLoading(false);\n      });\n    }\n  }, [datasource, isRequest, queryForce]);\n  // this is to preserve the order of the columns, even if there are integer values,\n  // while also only grabbing the first column's keys\n  const columns = useTableColumns(colnames, coltypes, data, datasourceId, isVisible, {}, // moreConfig\n  true);\n  const filteredData = useFilteredTableData(filterText, data);\n  if (isLoading) {\n    return _jsx(Loading, {});\n  }\n  if (responseError) {\n    return _jsxs(_Fragment, { children: [\n      _jsx(TableControls, { data: filteredData, columnNames: colnames, columnTypes: coltypes, rowcount: rowcount, datasourceId: datasourceId, onInputChange: (input) => setFilterText(input), isLoading: isLoading, canDownload: canDownload }),\n      _jsx(Error, { children: responseError })] }\n    );\n  }\n  if (data.length === 0) {\n    const title = t('No samples were returned for this dataset');\n    return _jsx(EmptyStateMedium, { image: \"document.svg\", title: title });\n  }\n  return _jsxs(_Fragment, { children: [\n    _jsx(TableControls, { data: filteredData, columnNames: colnames, columnTypes: coltypes, rowcount: rowcount, datasourceId: datasourceId, onInputChange: (input) => setFilterText(input), isLoading: isLoading, canDownload: canDownload }),\n    _jsx(TableView, { columns: columns, data: filteredData, pageSize: dataSize, noDataText: t('No results'), emptyWrapperType: EmptyWrapperType.Small, className: \"table-condensed\", isPaginationSticky: true, showRowCount: false, small: true })] }\n  );\n};__signature__(SamplesPane, \"useState{[filterText, setFilterText]('')}\\nuseState{[data, setData]([])}\\nuseState{[colnames, setColnames]([])}\\nuseState{[coltypes, setColtypes]([])}\\nuseState{[isLoading, setIsLoading](false)}\\nuseState{[rowcount, setRowCount](0)}\\nuseState{[responseError, setResponseError]('')}\\nuseMemo{datasourceId}\\nuseEffect{}\\nuseTableColumns{columns}\\nuseFilteredTableData{filteredData}\", () => [useTableColumns, useFilteredTableData]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Error, \"Error\", \"/app/superset-frontend/src/explore/components/DataTablesPane/components/SamplesPane.tsx\");reactHotLoader.register(cache, \"cache\", \"/app/superset-frontend/src/explore/components/DataTablesPane/components/SamplesPane.tsx\");reactHotLoader.register(SamplesPane, \"SamplesPane\", \"/app/superset-frontend/src/explore/components/DataTablesPane/components/SamplesPane.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useEffect","useMemo","ensureIsArray","styled","t","Loading","EmptyStateMedium","TableView","EmptyWrapperType","useFilteredTableData","useTableColumns","getDatasourceSamples","TableControls","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Error","pre","theme","gridUnit","cache","WeakSet","SamplesPane","isRequest","datasource","queryForce","actions","dataSize","isVisible","canDownload","filterText","setFilterText","data","setData","colnames","setColnames","coltypes","setColtypes","isLoading","setIsLoading","rowcount","setRowCount","responseError","setResponseError","datasourceId","id","type","delete","has","then","response","add","setForceQuery","catch","error","name","message","finally","columns","filteredData","children","columnNames","columnTypes","onInputChange","input","length","title","image","pageSize","noDataText","emptyWrapperType","Small","className","isPaginationSticky","showRowCount","small","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/explore/components/DataTablesPane/components/SamplesPane.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo } from 'react';\nimport { ensureIsArray, GenericDataType, styled, t } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { EmptyStateMedium } from 'src/components/EmptyState';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport {\n  useFilteredTableData,\n  useTableColumns,\n} from 'src/explore/components/DataTableControl';\nimport { getDatasourceSamples } from 'src/components/Chart/chartAction';\nimport { TableControls } from './DataTableControls';\nimport { SamplesPaneProps } from '../types';\n\nconst Error = styled.pre`\n  margin-top: ${({ theme }) => `${theme.gridUnit * 4}px`};\n`;\n\nconst cache = new WeakSet();\n\nexport const SamplesPane = ({\n  isRequest,\n  datasource,\n  queryForce,\n  actions,\n  dataSize = 50,\n  isVisible,\n  canDownload,\n}: SamplesPaneProps) => {\n  const [filterText, setFilterText] = useState('');\n  const [data, setData] = useState<Record<string, any>[][]>([]);\n  const [colnames, setColnames] = useState<string[]>([]);\n  const [coltypes, setColtypes] = useState<GenericDataType[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [rowcount, setRowCount] = useState<number>(0);\n  const [responseError, setResponseError] = useState<string>('');\n  const datasourceId = useMemo(\n    () => `${datasource.id}__${datasource.type}`,\n    [datasource],\n  );\n\n  useEffect(() => {\n    if (isRequest && queryForce) {\n      cache.delete(datasource);\n    }\n\n    if (isRequest && !cache.has(datasource)) {\n      setIsLoading(true);\n      getDatasourceSamples(datasource.type, datasource.id, queryForce, {})\n        .then(response => {\n          setData(ensureIsArray(response.data));\n          setColnames(ensureIsArray(response.colnames));\n          setColtypes(ensureIsArray(response.coltypes));\n          setRowCount(response.rowcount);\n          setResponseError('');\n          cache.add(datasource);\n          if (queryForce && actions) {\n            actions.setForceQuery(false);\n          }\n        })\n        .catch(error => {\n          setData([]);\n          setColnames([]);\n          setColtypes([]);\n          setResponseError(`${error.name}: ${error.message}`);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [datasource, isRequest, queryForce]);\n\n  // this is to preserve the order of the columns, even if there are integer values,\n  // while also only grabbing the first column's keys\n  const columns = useTableColumns(\n    colnames,\n    coltypes,\n    data,\n    datasourceId,\n    isVisible,\n    {}, // moreConfig\n    true, // allowHTML\n  );\n  const filteredData = useFilteredTableData(filterText, data);\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (responseError) {\n    return (\n      <>\n        <TableControls\n          data={filteredData}\n          columnNames={colnames}\n          columnTypes={coltypes}\n          rowcount={rowcount}\n          datasourceId={datasourceId}\n          onInputChange={input => setFilterText(input)}\n          isLoading={isLoading}\n          canDownload={canDownload}\n        />\n        <Error>{responseError}</Error>\n      </>\n    );\n  }\n\n  if (data.length === 0) {\n    const title = t('No samples were returned for this dataset');\n    return <EmptyStateMedium image=\"document.svg\" title={title} />;\n  }\n\n  return (\n    <>\n      <TableControls\n        data={filteredData}\n        columnNames={colnames}\n        columnTypes={coltypes}\n        rowcount={rowcount}\n        datasourceId={datasourceId}\n        onInputChange={input => setFilterText(input)}\n        isLoading={isLoading}\n        canDownload={canDownload}\n      />\n      <TableView\n        columns={columns}\n        data={filteredData}\n        pageSize={dataSize}\n        noDataText={t('No results')}\n        emptyWrapperType={EmptyWrapperType.Small}\n        className=\"table-condensed\"\n        isPaginationSticky\n        showRowCount={false}\n        small\n      />\n    </>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}