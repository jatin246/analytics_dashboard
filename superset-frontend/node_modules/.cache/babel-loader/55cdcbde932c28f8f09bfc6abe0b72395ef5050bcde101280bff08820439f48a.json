{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FilterXSS, getDefaultWhiteList } from 'xss';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst xssFilter = new FilterXSS({\n  whiteList: {\n    ...getDefaultWhiteList(),\n    span: ['style', 'class', 'title'],\n    div: ['style', 'class'],\n    a: ['style', 'class', 'href', 'title', 'target'],\n    img: ['style', 'class', 'src', 'alt', 'title', 'width', 'height'],\n    video: [\n    'autoplay',\n    'controls',\n    'loop',\n    'preload',\n    'src',\n    'height',\n    'width',\n    'muted']\n\n  },\n  stripIgnoreTag: true,\n  css: false\n});\nexport function sanitizeHtml(htmlString) {\n  return xssFilter.process(htmlString);\n}\nexport function hasHtmlTagPattern(str) {\n  const htmlTagPattern = /<(html|head|body|div|span|a|p|h[1-6]|title|meta|link|script|style)/i;\n  return htmlTagPattern.test(str);\n}\nexport function isProbablyHTML(text) {\n  const cleanedStr = text.trim().toLowerCase();\n  if (cleanedStr.startsWith('<!doctype html>') &&\n  hasHtmlTagPattern(cleanedStr)) {\n    return true;\n  }\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(cleanedStr, 'text/html');\n  return Array.from(doc.body.childNodes).some(({ nodeType }) => nodeType === 1);\n}\nexport function sanitizeHtmlIfNeeded(htmlString) {\n  return isProbablyHTML(htmlString) ? sanitizeHtml(htmlString) : htmlString;\n}\nexport function safeHtmlSpan(possiblyHtmlString) {\n  const isHtml = isProbablyHTML(possiblyHtmlString);\n  if (isHtml) {\n    return _jsx(\"span\", { className: \"safe-html-wrapper\", dangerouslySetInnerHTML: { __html: sanitizeHtml(possiblyHtmlString) } });\n  }\n  return possiblyHtmlString;\n}\nexport function removeHTMLTags(str) {\n  return str.replace(/<[^>]*>/g, '');\n}\nexport function isJsonString(str) {\n  try {\n    JSON.parse(str);\n    return true;\n  }\n  catch (e) {\n    return false;\n  }\n}\nexport function getParagraphContents(str) {\n  if (!isProbablyHTML(str)) {\n    return null;\n  }\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(str, 'text/html');\n  const pTags = doc.querySelectorAll('p');\n  if (pTags.length === 0) {\n    return null;\n  }\n  const paragraphContents = {};\n  pTags.forEach((pTag, index) => {\n    paragraphContents[`p${index + 1}`] = pTag.textContent || '';\n  });\n  return paragraphContents;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(xssFilter, \"xssFilter\", \"/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx\");reactHotLoader.register(sanitizeHtml, \"sanitizeHtml\", \"/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx\");reactHotLoader.register(hasHtmlTagPattern, \"hasHtmlTagPattern\", \"/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx\");reactHotLoader.register(isProbablyHTML, \"isProbablyHTML\", \"/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx\");reactHotLoader.register(sanitizeHtmlIfNeeded, \"sanitizeHtmlIfNeeded\", \"/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx\");reactHotLoader.register(safeHtmlSpan, \"safeHtmlSpan\", \"/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx\");reactHotLoader.register(removeHTMLTags, \"removeHTMLTags\", \"/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx\");reactHotLoader.register(isJsonString, \"isJsonString\", \"/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx\");reactHotLoader.register(getParagraphContents, \"getParagraphContents\", \"/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["FilterXSS","getDefaultWhiteList","jsx","_jsx","xssFilter","whiteList","span","div","a","img","video","stripIgnoreTag","css","sanitizeHtml","htmlString","process","hasHtmlTagPattern","str","htmlTagPattern","test","isProbablyHTML","text","cleanedStr","trim","toLowerCase","startsWith","parser","DOMParser","doc","parseFromString","Array","from","body","childNodes","some","nodeType","sanitizeHtmlIfNeeded","safeHtmlSpan","possiblyHtmlString","isHtml","className","dangerouslySetInnerHTML","__html","removeHTMLTags","replace","isJsonString","JSON","parse","e","getParagraphContents","pTags","querySelectorAll","length","paragraphContents","forEach","pTag","index","textContent","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/packages/superset-ui-core/src/utils/html.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FilterXSS, getDefaultWhiteList } from 'xss';\n\nconst xssFilter = new FilterXSS({\n  whiteList: {\n    ...getDefaultWhiteList(),\n    span: ['style', 'class', 'title'],\n    div: ['style', 'class'],\n    a: ['style', 'class', 'href', 'title', 'target'],\n    img: ['style', 'class', 'src', 'alt', 'title', 'width', 'height'],\n    video: [\n      'autoplay',\n      'controls',\n      'loop',\n      'preload',\n      'src',\n      'height',\n      'width',\n      'muted',\n    ],\n  },\n  stripIgnoreTag: true,\n  css: false,\n});\n\nexport function sanitizeHtml(htmlString: string) {\n  return xssFilter.process(htmlString);\n}\n\nexport function hasHtmlTagPattern(str: string): boolean {\n  const htmlTagPattern =\n    /<(html|head|body|div|span|a|p|h[1-6]|title|meta|link|script|style)/i;\n\n  return htmlTagPattern.test(str);\n}\n\nexport function isProbablyHTML(text: string) {\n  const cleanedStr = text.trim().toLowerCase();\n\n  if (\n    cleanedStr.startsWith('<!doctype html>') &&\n    hasHtmlTagPattern(cleanedStr)\n  ) {\n    return true;\n  }\n\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(cleanedStr, 'text/html');\n  return Array.from(doc.body.childNodes).some(({ nodeType }) => nodeType === 1);\n}\n\nexport function sanitizeHtmlIfNeeded(htmlString: string) {\n  return isProbablyHTML(htmlString) ? sanitizeHtml(htmlString) : htmlString;\n}\n\nexport function safeHtmlSpan(possiblyHtmlString: string) {\n  const isHtml = isProbablyHTML(possiblyHtmlString);\n  if (isHtml) {\n    return (\n      <span\n        className=\"safe-html-wrapper\"\n        dangerouslySetInnerHTML={{ __html: sanitizeHtml(possiblyHtmlString) }}\n      />\n    );\n  }\n  return possiblyHtmlString;\n}\n\nexport function removeHTMLTags(str: string): string {\n  return str.replace(/<[^>]*>/g, '');\n}\n\nexport function isJsonString(str: string): boolean {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function getParagraphContents(\n  str: string,\n): { [key: string]: string } | null {\n  if (!isProbablyHTML(str)) {\n    return null;\n  }\n\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(str, 'text/html');\n  const pTags = doc.querySelectorAll('p');\n\n  if (pTags.length === 0) {\n    return null;\n  }\n\n  const paragraphContents: { [key: string]: string } = {};\n\n  pTags.forEach((pTag, index) => {\n    paragraphContents[`p${index + 1}`] = pTag.textContent || '';\n  });\n\n  return paragraphContents;\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,SAAS,EAAEC,mBAAmB,QAAQ,KAAK,CAAC,SAAAC,GAAA,IAAAC,IAAA;AAErD,MAAMC,SAAS,GAAG,IAAIJ,SAAS,CAAC;EAC9BK,SAAS,EAAE;IACT,GAAGJ,mBAAmB,EAAE;IACxBK,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IACjCC,GAAG,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;IACvBC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;IAChDC,GAAG,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;IACjEC,KAAK,EAAE;IACL,UAAU;IACV,UAAU;IACV,MAAM;IACN,SAAS;IACT,KAAK;IACL,QAAQ;IACR,OAAO;IACP,OAAO;;GAEV;EACDC,cAAc,EAAE,IAAI;EACpBC,GAAG,EAAE;CACN,CAAC;AAEF,OAAM,SAAUC,YAAYA,CAACC,UAAkB;EAC7C,OAAOV,SAAS,CAACW,OAAO,CAACD,UAAU,CAAC;AACtC;AAEA,OAAM,SAAUE,iBAAiBA,CAACC,GAAW;EAC3C,MAAMC,cAAc,GAClB,qEAAqE;EAEvE,OAAOA,cAAc,CAACC,IAAI,CAACF,GAAG,CAAC;AACjC;AAEA,OAAM,SAAUG,cAAcA,CAACC,IAAY;EACzC,MAAMC,UAAU,GAAGD,IAAI,CAACE,IAAI,EAAE,CAACC,WAAW,EAAE;EAE5C,IACEF,UAAU,CAACG,UAAU,CAAC,iBAAiB,CAAC;EACxCT,iBAAiB,CAACM,UAAU,CAAC,EAC7B;IACA,OAAO,IAAI;;EAGb,MAAMI,MAAM,GAAG,IAAIC,SAAS,EAAE;EAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACP,UAAU,EAAE,WAAW,CAAC;EAC3D,OAAOQ,KAAK,CAACC,IAAI,CAACH,GAAG,CAACI,IAAI,CAACC,UAAU,CAAC,CAACC,IAAI,CAAC,CAAC,EAAEC,QAAQ,EAAE,KAAKA,QAAQ,KAAK,CAAC,CAAC;AAC/E;AAEA,OAAM,SAAUC,oBAAoBA,CAACtB,UAAkB;EACrD,OAAOM,cAAc,CAACN,UAAU,CAAC,GAAGD,YAAY,CAACC,UAAU,CAAC,GAAGA,UAAU;AAC3E;AAEA,OAAM,SAAUuB,YAAYA,CAACC,kBAA0B;EACrD,MAAMC,MAAM,GAAGnB,cAAc,CAACkB,kBAAkB,CAAC;EACjD,IAAIC,MAAM,EAAE;IACV,OACEpC,IAAA,WACEqC,SAAS,EAAC,mBAAmB,EAC7BC,uBAAuB,EAAE,EAAEC,MAAM,EAAE7B,YAAY,CAACyB,kBAAkB,CAAC,EAAG,GACtE;;EAGN,OAAOA,kBAAkB;AAC3B;AAEA,OAAM,SAAUK,cAAcA,CAAC1B,GAAW;EACxC,OAAOA,GAAG,CAAC2B,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;AACpC;AAEA,OAAM,SAAUC,YAAYA,CAAC5B,GAAW;EACtC,IAAI;IACF6B,IAAI,CAACC,KAAK,CAAC9B,GAAG,CAAC;IACf,OAAO,IAAI;;EACX,OAAO+B,CAAC,EAAE;IACV,OAAO,KAAK;;AAEhB;AAEA,OAAM,SAAUC,oBAAoBA,CAClChC,GAAW;EAEX,IAAI,CAACG,cAAc,CAACH,GAAG,CAAC,EAAE;IACxB,OAAO,IAAI;;EAGb,MAAMS,MAAM,GAAG,IAAIC,SAAS,EAAE;EAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACZ,GAAG,EAAE,WAAW,CAAC;EACpD,MAAMiC,KAAK,GAAGtB,GAAG,CAACuB,gBAAgB,CAAC,GAAG,CAAC;EAEvC,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,IAAI;;EAGb,MAAMC,iBAAiB,GAA8B,EAAE;EAEvDH,KAAK,CAACI,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAI;IAC5BH,iBAAiB,CAAC,IAAIG,KAAK,GAAG,CAAC,EAAE,CAAC,GAAGD,IAAI,CAACE,WAAW,IAAI,EAAE;EAC7D,CAAC,CAAC;EAEF,OAAOJ,iBAAiB;AAC1B,CAAC,mBAAAK,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CApGK1D,SAAS,sFAAAsD,cAAA,CAAAI,QAAA,CAsBCjD,YAAY,yFAAA6C,cAAA,CAAAI,QAAA,CAIZ9C,iBAAiB,8FAAA0C,cAAA,CAAAI,QAAA,CAOjB1C,cAAc,2FAAAsC,cAAA,CAAAI,QAAA,CAed1B,oBAAoB,iGAAAsB,cAAA,CAAAI,QAAA,CAIpBzB,YAAY,yFAAAqB,cAAA,CAAAI,QAAA,CAaZnB,cAAc,2FAAAe,cAAA,CAAAI,QAAA,CAIdjB,YAAY,yFAAAa,cAAA,CAAAI,QAAA,CASZb,oBAAoB,yHAAAc,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}