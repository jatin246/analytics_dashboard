{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ensureIsArray, GenericDataType, isAdhocMetricSimple, isSavedMetric, t, tn } from '@superset-ui/core';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport AdhocMetricPopoverTrigger from 'src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger';\nimport MetricDefinitionValue from 'src/explore/components/controls/MetricControl/MetricDefinitionValue';\nimport { isDatasourcePanelDndItem } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport { AGGREGATES } from 'src/explore/constants';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [DndItemType.Column, DndItemType.Metric];\nconst isDictionaryForAdhocMetric = (value) => value &&\n!(value instanceof AdhocMetric) &&\ntypeof value !== 'string' &&\nvalue.expressionType;\nconst coerceMetrics = (addedMetrics, savedMetrics, columns) => {\n  if (!addedMetrics) {\n    return [];\n  }\n  const metricsCompatibleWithDataset = ensureIsArray(addedMetrics).filter((metric) => {\n    if (isSavedMetric(metric)) {\n      return savedMetrics.some((savedMetric) => savedMetric.metric_name === metric);\n    }\n    if (isAdhocMetricSimple(metric)) {\n      return columns.some((column) => column.column_name === metric.column.column_name);\n    }\n    return true;\n  });\n  return metricsCompatibleWithDataset.map((metric) => {\n    if (!isDictionaryForAdhocMetric(metric)) {\n      return metric;\n    }\n    if (isAdhocMetricSimple(metric)) {\n      const column = columns.find((col) => col.column_name === metric.column.column_name);\n      if (column) {\n        return new AdhocMetric({ ...metric, column });\n      }\n    }\n    return new AdhocMetric(metric);\n  });\n};\nconst getOptionsForSavedMetrics = (savedMetrics, currentMetricValues, currentMetric) => {var _savedMetrics$filter;return (_savedMetrics$filter = savedMetrics == null ? void 0 : savedMetrics.filter((savedMetric) => {var _savedMetric$metric_n;return Array.isArray(currentMetricValues) ?\n    !currentMetricValues.includes((_savedMetric$metric_n = savedMetric.metric_name) != null ? _savedMetric$metric_n : '') ||\n    savedMetric.metric_name === currentMetric :\n    savedMetric;})) != null ? _savedMetrics$filter : [];};\nconst DndMetricSelect = (props) => {\n  const { onChange, multi, datasource, savedMetrics } = props;\n  const extra = useMemo(() => {\n    let extra = {};\n    if (datasource != null && datasource.extra) {\n      try {\n        extra = JSON.parse(datasource.extra);\n      }\n      catch {} // eslint-disable-line no-empty\n    }\n    return extra;\n  }, [datasource == null ? void 0 : datasource.extra]);\n  const savedMetricSet = useMemo(() => new Set(savedMetrics.map(({ metric_name }) => metric_name)), [savedMetrics]);\n  const handleChange = useCallback((opts) => {\n    // if clear out options\n    if (opts === null) {\n      onChange(null);\n      return;\n    }\n    const transformedOpts = ensureIsArray(opts);\n    const optionValues = transformedOpts.\n    map((option) => {\n      // pre-defined metric\n      if (option.metric_name) {\n        return option.metric_name;\n      }\n      return option;\n    }).\n    filter((option) => option);\n    onChange(multi ? optionValues : optionValues[0]);\n  }, [multi, onChange]);\n  const [value, setValue] = useState(coerceMetrics(props.value, props.savedMetrics, props.columns));\n  const [droppedItem, setDroppedItem] = useState({});\n  const [newMetricPopoverVisible, setNewMetricPopoverVisible] = useState(false);\n  useEffect(() => {\n    setValue(coerceMetrics(props.value, props.savedMetrics, props.columns));\n  }, [\n  JSON.stringify(props.value),\n  JSON.stringify(props.savedMetrics),\n  JSON.stringify(props.columns)]\n  );\n  const canDrop = useCallback((item) => {\n    if (extra.disallow_adhoc_metrics && (\n    item.type !== DndItemType.Metric ||\n    !savedMetricSet.has(item.value.metric_name))) {\n      return false;\n    }\n    const isMetricAlreadyInValues = item.type === 'metric' ? value.includes(item.value.metric_name) : false;\n    return !isMetricAlreadyInValues;\n  }, [value, extra, savedMetricSet]);\n  const onNewMetric = useCallback((newMetric) => {\n    const newValue = props.multi ? [...value, newMetric] : [newMetric];\n    setValue(newValue);\n    handleChange(newValue);\n  }, [handleChange, props.multi, value]);\n  const onMetricEdit = useCallback((changedMetric, oldMetric) => {\n    if (oldMetric instanceof AdhocMetric && oldMetric.equals(changedMetric)) {\n      return;\n    }\n    const newValue = value.map((value) => {\n      if (\n      // compare saved metrics\n      'metric_name' in oldMetric && value === oldMetric.metric_name ||\n      // compare adhoc metrics\n      typeof value.optionName !== 'undefined' ?\n      value.optionName ===\n      oldMetric.optionName :\n      false) {\n        return changedMetric;\n      }\n      return value;\n    });\n    setValue(newValue);\n    handleChange(newValue);\n  }, [handleChange, value]);\n  const onRemoveMetric = useCallback((index) => {\n    if (!Array.isArray(value)) {\n      return;\n    }\n    const valuesCopy = [...value];\n    valuesCopy.splice(index, 1);\n    setValue(valuesCopy);\n    handleChange(valuesCopy);\n  }, [handleChange, value]);\n  const moveLabel = useCallback((dragIndex, hoverIndex) => {\n    const newValues = [...value];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    setValue(newValues);\n  }, [value]);\n  const newSavedMetricOptions = useMemo(() => getOptionsForSavedMetrics(props.savedMetrics, props.value), [props.savedMetrics, props.value]);\n  const getSavedMetricOptionsForMetric = useCallback((index) => {var _props$value;return getOptionsForSavedMetrics(props.savedMetrics, props.value, (_props$value = props.value) == null ? void 0 : _props$value[index]);}, [props.savedMetrics, props.value]);\n  const handleDropLabel = useCallback(() => onChange(multi ? value : value[0]), [multi, onChange, value]);\n  const valueRenderer = useCallback((option, index) => _jsx(MetricDefinitionValue, { index: index, option: option, onMetricEdit: onMetricEdit, onRemoveMetric: onRemoveMetric, columns: props.columns, savedMetrics: props.savedMetrics, savedMetricsOptions: getSavedMetricOptionsForMetric(index), datasource: props.datasource, onMoveLabel: moveLabel, onDropLabel: handleDropLabel, type: `${DndItemType.AdhocMetricOption}_${props.name}_${props.label}`, multi: multi, datasourceWarningMessage: option instanceof AdhocMetric && option.datasourceWarning ?\n    t('This metric might be incompatible with current dataset') :\n    undefined }, index), [\n  getSavedMetricOptionsForMetric,\n  handleDropLabel,\n  moveLabel,\n  multi,\n  onMetricEdit,\n  onRemoveMetric,\n  props.columns,\n  props.datasource,\n  props.label,\n  props.name,\n  props.savedMetrics]\n  );\n  const valuesRenderer = useCallback(() => value.map((value, index) => valueRenderer(value, index)), [value, valueRenderer]);\n  const togglePopover = useCallback((visible) => {\n    setNewMetricPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const handleDrop = useCallback((item) => {\n    if (item.type === DndItemType.Metric) {\n      onNewMetric(item.value);\n    }\n    if (item.type === DndItemType.Column) {\n      setDroppedItem(item);\n      togglePopover(true);\n    }\n  }, [onNewMetric, togglePopover]);\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n  const adhocMetric = useMemo(() => {\n    if (isDatasourcePanelDndItem(droppedItem) &&\n    droppedItem.type === DndItemType.Column) {\n      const itemValue = droppedItem.value;\n      const config = {\n        column: itemValue\n      };\n      if (itemValue.type_generic === GenericDataType.Numeric) {\n        config.aggregate = AGGREGATES.SUM;\n      } else\n      if (itemValue.type_generic === GenericDataType.String ||\n      itemValue.type_generic === GenericDataType.Boolean ||\n      itemValue.type_generic === GenericDataType.Temporal) {\n        config.aggregate = AGGREGATES.COUNT_DISTINCT;\n      }\n      return new AdhocMetric(config);\n    }\n    return new AdhocMetric({});\n  }, [droppedItem]);\n  const ghostButtonText = tn('Drop a column/metric here or click', 'Drop columns/metrics here or click', multi ? 2 : 1);\n  return _jsxs(\"div\", { className: \"metrics-select\", children: [\n    _jsx(DndSelectLabel, { onDrop: handleDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DND_ACCEPTED_TYPES, ghostButtonText: ghostButtonText, displayGhostButton: multi || value.length === 0, onClickGhostButton: handleClickGhostButton, ...props }),\n    _jsx(AdhocMetricPopoverTrigger, { adhocMetric: adhocMetric, onMetricEdit: onNewMetric, columns: props.columns, savedMetricsOptions: newSavedMetricOptions, savedMetric: EMPTY_OBJECT, datasource: props.datasource, isControlledComponent: true, visible: newMetricPopoverVisible, togglePopover: togglePopover, closePopover: closePopover, isNew: true, children:\n      _jsx(\"div\", {}) }\n    )] }\n  );\n};__signature__(DndMetricSelect, \"useMemo{extra}\\nuseMemo{savedMetricSet}\\nuseCallback{handleChange}\\nuseState{[value, setValue](coerceMetrics(props.value, props.savedMetrics, props.columns))}\\nuseState{[droppedItem, setDroppedItem]({})}\\nuseState{[newMetricPopoverVisible, setNewMetricPopoverVisible](false)}\\nuseEffect{}\\nuseCallback{canDrop}\\nuseCallback{onNewMetric}\\nuseCallback{onMetricEdit}\\nuseCallback{onRemoveMetric}\\nuseCallback{moveLabel}\\nuseMemo{newSavedMetricOptions}\\nuseCallback{getSavedMetricOptionsForMetric}\\nuseCallback{handleDropLabel}\\nuseCallback{valueRenderer}\\nuseCallback{valuesRenderer}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseCallback{handleDrop}\\nuseCallback{handleClickGhostButton}\\nuseMemo{adhocMetric}\");\nexport { DndMetricSelect };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(DND_ACCEPTED_TYPES, \"DND_ACCEPTED_TYPES\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(isDictionaryForAdhocMetric, \"isDictionaryForAdhocMetric\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(coerceMetrics, \"coerceMetrics\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(getOptionsForSavedMetrics, \"getOptionsForSavedMetrics\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(DndMetricSelect, \"DndMetricSelect\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","ensureIsArray","GenericDataType","isAdhocMetricSimple","isSavedMetric","t","tn","AdhocMetric","AdhocMetricPopoverTrigger","MetricDefinitionValue","isDatasourcePanelDndItem","DndItemType","DndSelectLabel","AGGREGATES","jsx","_jsx","jsxs","_jsxs","EMPTY_OBJECT","DND_ACCEPTED_TYPES","Column","Metric","isDictionaryForAdhocMetric","value","expressionType","coerceMetrics","addedMetrics","savedMetrics","columns","metricsCompatibleWithDataset","filter","metric","some","savedMetric","metric_name","column","column_name","map","find","col","getOptionsForSavedMetrics","currentMetricValues","currentMetric","_savedMetrics$filter","_savedMetric$metric_n","Array","isArray","includes","DndMetricSelect","props","onChange","multi","datasource","extra","JSON","parse","savedMetricSet","Set","handleChange","opts","transformedOpts","optionValues","option","setValue","droppedItem","setDroppedItem","newMetricPopoverVisible","setNewMetricPopoverVisible","stringify","canDrop","item","disallow_adhoc_metrics","type","has","isMetricAlreadyInValues","onNewMetric","newMetric","newValue","onMetricEdit","changedMetric","oldMetric","equals","optionName","onRemoveMetric","index","valuesCopy","splice","moveLabel","dragIndex","hoverIndex","newValues","newSavedMetricOptions","getSavedMetricOptionsForMetric","_props$value","handleDropLabel","valueRenderer","savedMetricsOptions","onMoveLabel","onDropLabel","AdhocMetricOption","name","label","datasourceWarningMessage","datasourceWarning","undefined","valuesRenderer","togglePopover","visible","closePopover","handleDrop","handleClickGhostButton","adhocMetric","itemValue","config","type_generic","Numeric","aggregate","SUM","String","Boolean","Temporal","COUNT_DISTINCT","ghostButtonText","className","children","onDrop","accept","displayGhostButton","length","onClickGhostButton","isControlledComponent","isNew","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  ensureIsArray,\n  GenericDataType,\n  isAdhocMetricSimple,\n  isSavedMetric,\n  Metric,\n  QueryFormMetric,\n  t,\n  tn,\n} from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport AdhocMetricPopoverTrigger from 'src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger';\nimport MetricDefinitionValue from 'src/explore/components/controls/MetricControl/MetricDefinitionValue';\nimport {\n  DatasourcePanelDndItem,\n  isDatasourcePanelDndItem,\n} from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport { savedMetricType } from 'src/explore/components/controls/MetricControl/types';\nimport { AGGREGATES } from 'src/explore/constants';\n\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [DndItemType.Column, DndItemType.Metric];\n\nconst isDictionaryForAdhocMetric = (value: QueryFormMetric) =>\n  value &&\n  !(value instanceof AdhocMetric) &&\n  typeof value !== 'string' &&\n  value.expressionType;\n\nconst coerceMetrics = (\n  addedMetrics: QueryFormMetric | QueryFormMetric[] | undefined | null,\n  savedMetrics: Metric[],\n  columns: ColumnMeta[],\n) => {\n  if (!addedMetrics) {\n    return [];\n  }\n  const metricsCompatibleWithDataset = ensureIsArray(addedMetrics).filter(\n    metric => {\n      if (isSavedMetric(metric)) {\n        return savedMetrics.some(\n          savedMetric => savedMetric.metric_name === metric,\n        );\n      }\n      if (isAdhocMetricSimple(metric)) {\n        return columns.some(\n          column => column.column_name === metric.column.column_name,\n        );\n      }\n      return true;\n    },\n  );\n\n  return metricsCompatibleWithDataset.map(metric => {\n    if (!isDictionaryForAdhocMetric(metric)) {\n      return metric;\n    }\n    if (isAdhocMetricSimple(metric)) {\n      const column = columns.find(\n        col => col.column_name === metric.column.column_name,\n      );\n      if (column) {\n        return new AdhocMetric({ ...metric, column });\n      }\n    }\n    return new AdhocMetric(metric);\n  });\n};\n\nconst getOptionsForSavedMetrics = (\n  savedMetrics: savedMetricType[],\n  currentMetricValues: (string | AdhocMetric)[],\n  currentMetric?: string,\n) =>\n  savedMetrics?.filter(savedMetric =>\n    Array.isArray(currentMetricValues)\n      ? !currentMetricValues.includes(savedMetric.metric_name ?? '') ||\n        savedMetric.metric_name === currentMetric\n      : savedMetric,\n  ) ?? [];\n\ntype ValueType = Metric | AdhocMetric | QueryFormMetric;\n\nconst DndMetricSelect = (props: any) => {\n  const { onChange, multi, datasource, savedMetrics } = props;\n\n  const extra = useMemo<{ disallow_adhoc_metrics?: boolean }>(() => {\n    let extra = {};\n    if (datasource?.extra) {\n      try {\n        extra = JSON.parse(datasource.extra);\n      } catch {} // eslint-disable-line no-empty\n    }\n    return extra;\n  }, [datasource?.extra]);\n\n  const savedMetricSet = useMemo(\n    () =>\n      new Set(\n        (savedMetrics as savedMetricType[]).map(\n          ({ metric_name }) => metric_name,\n        ),\n      ),\n    [savedMetrics],\n  );\n\n  const handleChange = useCallback(\n    opts => {\n      // if clear out options\n      if (opts === null) {\n        onChange(null);\n        return;\n      }\n\n      const transformedOpts = ensureIsArray(opts);\n      const optionValues = transformedOpts\n        .map(option => {\n          // pre-defined metric\n          if (option.metric_name) {\n            return option.metric_name;\n          }\n          return option;\n        })\n        .filter(option => option);\n      onChange(multi ? optionValues : optionValues[0]);\n    },\n    [multi, onChange],\n  );\n\n  const [value, setValue] = useState<ValueType[]>(\n    coerceMetrics(props.value, props.savedMetrics, props.columns),\n  );\n  const [droppedItem, setDroppedItem] = useState<\n    DatasourcePanelDndItem | typeof EMPTY_OBJECT\n  >({});\n  const [newMetricPopoverVisible, setNewMetricPopoverVisible] = useState(false);\n\n  useEffect(() => {\n    setValue(coerceMetrics(props.value, props.savedMetrics, props.columns));\n  }, [\n    JSON.stringify(props.value),\n    JSON.stringify(props.savedMetrics),\n    JSON.stringify(props.columns),\n  ]);\n\n  const canDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      if (\n        extra.disallow_adhoc_metrics &&\n        (item.type !== DndItemType.Metric ||\n          !savedMetricSet.has(item.value.metric_name))\n      ) {\n        return false;\n      }\n\n      const isMetricAlreadyInValues =\n        item.type === 'metric' ? value.includes(item.value.metric_name) : false;\n      return !isMetricAlreadyInValues;\n    },\n    [value, extra, savedMetricSet],\n  );\n\n  const onNewMetric = useCallback(\n    (newMetric: Metric) => {\n      const newValue = props.multi ? [...value, newMetric] : [newMetric];\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, props.multi, value],\n  );\n\n  const onMetricEdit = useCallback(\n    (changedMetric: Metric | AdhocMetric, oldMetric: Metric | AdhocMetric) => {\n      if (oldMetric instanceof AdhocMetric && oldMetric.equals(changedMetric)) {\n        return;\n      }\n      const newValue = value.map(value => {\n        if (\n          // compare saved metrics\n          ('metric_name' in oldMetric && value === oldMetric.metric_name) ||\n          // compare adhoc metrics\n          typeof (value as AdhocMetric).optionName !== 'undefined'\n            ? (value as AdhocMetric).optionName ===\n              (oldMetric as AdhocMetric).optionName\n            : false\n        ) {\n          return changedMetric;\n        }\n        return value;\n      });\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, value],\n  );\n\n  const onRemoveMetric = useCallback(\n    (index: number) => {\n      if (!Array.isArray(value)) {\n        return;\n      }\n      const valuesCopy = [...value];\n      valuesCopy.splice(index, 1);\n      setValue(valuesCopy);\n      handleChange(valuesCopy);\n    },\n    [handleChange, value],\n  );\n\n  const moveLabel = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      const newValues = [...value];\n      [newValues[hoverIndex], newValues[dragIndex]] = [\n        newValues[dragIndex],\n        newValues[hoverIndex],\n      ];\n      setValue(newValues);\n    },\n    [value],\n  );\n\n  const newSavedMetricOptions = useMemo(\n    () => getOptionsForSavedMetrics(props.savedMetrics, props.value),\n    [props.savedMetrics, props.value],\n  );\n\n  const getSavedMetricOptionsForMetric = useCallback(\n    index =>\n      getOptionsForSavedMetrics(\n        props.savedMetrics,\n        props.value,\n        props.value?.[index],\n      ),\n    [props.savedMetrics, props.value],\n  );\n\n  const handleDropLabel = useCallback(\n    () => onChange(multi ? value : value[0]),\n    [multi, onChange, value],\n  );\n\n  const valueRenderer = useCallback(\n    (option: ValueType, index: number) => (\n      <MetricDefinitionValue\n        key={index}\n        index={index}\n        option={option}\n        onMetricEdit={onMetricEdit}\n        onRemoveMetric={onRemoveMetric}\n        columns={props.columns}\n        savedMetrics={props.savedMetrics}\n        savedMetricsOptions={getSavedMetricOptionsForMetric(index)}\n        datasource={props.datasource}\n        onMoveLabel={moveLabel}\n        onDropLabel={handleDropLabel}\n        type={`${DndItemType.AdhocMetricOption}_${props.name}_${props.label}`}\n        multi={multi}\n        datasourceWarningMessage={\n          option instanceof AdhocMetric && option.datasourceWarning\n            ? t('This metric might be incompatible with current dataset')\n            : undefined\n        }\n      />\n    ),\n    [\n      getSavedMetricOptionsForMetric,\n      handleDropLabel,\n      moveLabel,\n      multi,\n      onMetricEdit,\n      onRemoveMetric,\n      props.columns,\n      props.datasource,\n      props.label,\n      props.name,\n      props.savedMetrics,\n    ],\n  );\n\n  const valuesRenderer = useCallback(\n    () => value.map((value, index) => valueRenderer(value, index)),\n    [value, valueRenderer],\n  );\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setNewMetricPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n\n  const handleDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      if (item.type === DndItemType.Metric) {\n        onNewMetric(item.value as Metric);\n      }\n      if (item.type === DndItemType.Column) {\n        setDroppedItem(item);\n        togglePopover(true);\n      }\n    },\n    [onNewMetric, togglePopover],\n  );\n\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n\n  const adhocMetric = useMemo(() => {\n    if (\n      isDatasourcePanelDndItem(droppedItem) &&\n      droppedItem.type === DndItemType.Column\n    ) {\n      const itemValue = droppedItem.value as ColumnMeta;\n      const config: Partial<AdhocMetric> = {\n        column: itemValue,\n      };\n      if (itemValue.type_generic === GenericDataType.Numeric) {\n        config.aggregate = AGGREGATES.SUM;\n      } else if (\n        itemValue.type_generic === GenericDataType.String ||\n        itemValue.type_generic === GenericDataType.Boolean ||\n        itemValue.type_generic === GenericDataType.Temporal\n      ) {\n        config.aggregate = AGGREGATES.COUNT_DISTINCT;\n      }\n      return new AdhocMetric(config);\n    }\n    return new AdhocMetric({});\n  }, [droppedItem]);\n\n  const ghostButtonText = tn(\n    'Drop a column/metric here or click',\n    'Drop columns/metrics here or click',\n    multi ? 2 : 1,\n  );\n\n  return (\n    <div className=\"metrics-select\">\n      <DndSelectLabel\n        onDrop={handleDrop}\n        canDrop={canDrop}\n        valuesRenderer={valuesRenderer}\n        accept={DND_ACCEPTED_TYPES}\n        ghostButtonText={ghostButtonText}\n        displayGhostButton={multi || value.length === 0}\n        onClickGhostButton={handleClickGhostButton}\n        {...props}\n      />\n      <AdhocMetricPopoverTrigger\n        adhocMetric={adhocMetric}\n        onMetricEdit={onNewMetric}\n        columns={props.columns}\n        savedMetricsOptions={newSavedMetricOptions}\n        savedMetric={EMPTY_OBJECT as savedMetricType}\n        datasource={props.datasource}\n        isControlledComponent\n        visible={newMetricPopoverVisible}\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n        isNew\n      >\n        <div />\n      </AdhocMetricPopoverTrigger>\n    </div>\n  );\n};\n\nexport { DndMetricSelect };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}