{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FeatureFlag, isFeatureEnabled, styled, SupersetClient, t } from '@superset-ui/core';\nimport { useCallback, useMemo, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport { createErrorHandler, createFetchDistinct, createFetchRelated } from 'src/views/CRUD/utils';\nimport { useSelector } from 'react-redux';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu from 'src/features/home/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport { TagsList } from 'src/components/Tags';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/features/home/commonMenuData';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\nimport copyTextToClipboard from 'src/utils/copy';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { loadTags } from 'src/components/Tags/utils';\nimport Icons from 'src/components/Icons';\nimport SavedQueryPreviewModal from 'src/features/queries/SavedQueryPreviewModal';\nimport { findPermission } from 'src/utils/findPermission';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the saved queries. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more saved queries that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\nfunction SavedQueryList({ addDangerToast, addSuccessToast, user }) {\n  const { state: { loading, resourceCount: queryCount, resourceCollection: queries, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('saved_query', t('Saved queries'), addDangerToast);\n  const { roles } = useSelector((state) => state.user);\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n  const [queryCurrentlyDeleting, setQueryCurrentlyDeleting] = useState(null);\n  const [savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing] = useState(null);\n  const [importingSavedQuery, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const history = useHistory();\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Query imported'));\n  };\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n  const handleSavedQueryPreview = useCallback((id) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/saved_query/${id}`\n    }).then(({ json = {} }) => {\n      setSavedQueryCurrentlyPreviewing({ ...json.result });\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue previewing the selected query %s', errMsg))));\n  }, [addDangerToast]);\n  const menuData = {\n    activeChild: 'Saved queries',\n    ...commonMenuData\n  };\n  const subMenuButtons = [];\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary'\n    });\n  }\n  subMenuButtons.push({\n    name: _jsxs(Link, { to: \"/sqllab?new=true\", children: [\n      _jsx(\"i\", { className: \"fa fa-plus\" }), \" \", t('Query')] }\n    ),\n    buttonStyle: 'primary'\n  });\n  if (canCreate) {\n    subMenuButtons.push({\n      name: _jsx(Tooltip, { id: \"import-tooltip\", title: t('Import queries'), placement: \"bottomRight\", \"data-test\": \"import-tooltip-test\", children:\n        _jsx(Icons.Import, { \"data-test\": \"import-icon\" }) }\n      ),\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal,\n      'data-test': 'import-button'\n    });\n  }\n  menuData.buttons = subMenuButtons;\n  // Action methods\n  const openInSqlLab = (id, openInNewWindow) => {\n    if (openInNewWindow) {\n      window.open(`/sqllab?savedQueryId=${id}`);\n    } else\n    {\n      history.push(`/sqllab?savedQueryId=${id}`);\n    }\n  };\n  const copyQueryLink = useCallback((id) => {\n    copyTextToClipboard(() => Promise.resolve(`${window.location.origin}/sqllab?savedQueryId=${id}`)).\n    then(() => {\n      addSuccessToast(t('Link Copied!'));\n    }).\n    catch(() => {\n      addDangerToast(t('Sorry, your browser does not support copying.'));\n    });\n  }, [addDangerToast, addSuccessToast]);\n  const handleQueryDelete = ({ id, label }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}`\n    }).then(() => {\n      refreshData();\n      setQueryCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', label));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', label, errMsg))));\n  };\n  const handleBulkSavedQueryExport = (savedQueriesToExport) => {\n    const ids = savedQueriesToExport.map(({ id }) => id);\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const handleBulkQueryDelete = (queriesToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(queriesToDelete.map(({ id }) => id))}`\n    }).then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected queries: %s', errMsg))));\n  };\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'label',\n    Header: t('Name')\n  },\n  {\n    accessor: 'description',\n    Header: t('Description')\n  },\n  {\n    accessor: 'database.database_name',\n    Header: t('Database'),\n    size: 'xl'\n  },\n  {\n    accessor: 'database',\n    hidden: true,\n    disableSortBy: true\n  },\n  {\n    accessor: 'schema',\n    Header: t('Schema'),\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original: { sql_tables: tables = [] } } }) => {\n      const names = tables.map((table) => table.table);\n      const main = (names == null ? void 0 : names.shift()) || '';\n      if (names.length) {\n        return _jsxs(StyledTableLabel, { children: [\n          _jsx(\"span\", { children: main }),\n          _jsx(Popover, { placement: \"right\", title: t('TABLES'), trigger: \"click\", content: _jsx(_Fragment, { children:\n              names.map((name) => _jsx(StyledPopoverItem, { children: name }, name)) }\n            ), children:\n            _jsxs(\"span\", { className: \"count\", children: [\"(+\", names.length, \")\"] }) }\n          )] }\n        );\n      }\n      return main;\n    },\n    accessor: 'sql_tables',\n    Header: t('Tables'),\n    size: 'xl',\n    disableSortBy: true\n  },\n  {\n    Cell: ({ row: { original: { tags = [] } } }) =>\n    // Only show custom type tags\n    _jsx(TagsList, { tags: tags.filter((tag) => tag.type === 1) }),\n    Header: t('Tags'),\n    accessor: 'tags',\n    disableSortBy: true,\n    hidden: !isFeatureEnabled(FeatureFlag.TaggingSystem)\n  },\n  {\n    Cell: ({ row: { original: { changed_by: changedBy, changed_on_delta_humanized: changedOn } } }) => _jsx(ModifiedInfo, { user: changedBy, date: changedOn }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const handlePreview = () => {\n        handleSavedQueryPreview(original.id);\n      };\n      const handleEdit = ({ metaKey }) => openInSqlLab(original.id, Boolean(metaKey));\n      const handleCopy = () => copyQueryLink(original.id);\n      const handleExport = () => handleBulkSavedQueryExport([original]);\n      const handleDelete = () => setQueryCurrentlyDeleting(original);\n      const actions = [\n      {\n        label: 'preview-action',\n        tooltip: t('Query preview'),\n        placement: 'bottom',\n        icon: 'Binoculars',\n        onClick: handlePreview\n      },\n      canEdit && {\n        label: 'edit-action',\n        tooltip: t('Edit query'),\n        placement: 'bottom',\n        icon: 'Edit',\n        onClick: handleEdit\n      },\n      {\n        label: 'copy-action',\n        tooltip: t('Copy query URL'),\n        placement: 'bottom',\n        icon: 'Copy',\n        onClick: handleCopy\n      },\n      canExport && {\n        label: 'export-action',\n        tooltip: t('Export query'),\n        placement: 'bottom',\n        icon: 'Share',\n        onClick: handleExport\n      },\n      canDelete && {\n        label: 'delete-action',\n        tooltip: t('Delete query'),\n        placement: 'bottom',\n        icon: 'Trash',\n        onClick: handleDelete\n      }].\n      filter((item) => !!item);\n      return _jsx(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview]);\n  const filters = useMemo(() => [\n  {\n    Header: t('Search'),\n    id: 'label',\n    key: 'search',\n    input: 'search',\n    operator: FilterOperator.AllText,\n    toolTipDescription: 'Searches all text fields: Name, Description, Database & Schema'\n  },\n  {\n    Header: t('Database'),\n    key: 'database',\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('saved_query', 'database', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dataset datasource values: %s', errMsg)))),\n    paginate: true\n  },\n  {\n    Header: t('Schema'),\n    id: 'schema',\n    key: 'schema',\n    input: 'select',\n    operator: FilterOperator.Equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('saved_query', 'schema', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching schema values: %s', errMsg)))),\n    paginate: true\n  },\n  ...(isFeatureEnabled(FeatureFlag.TaggingSystem) && canReadTag ?\n  [\n  {\n    Header: t('Tag'),\n    id: 'tags',\n    key: 'tags',\n    input: 'select',\n    operator: FilterOperator.SavedQueryTagById,\n    fetchSelects: loadTags\n  }] :\n\n  []),\n  {\n    Header: t('Modified by'),\n    key: 'changed_by',\n    id: 'changed_by',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('saved_query', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n    paginate: true\n  }],\n  [addDangerToast]);\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { ...menuData }),\n    queryCurrentlyDeleting && _jsx(DeleteModal, { description: t('This action will permanently delete the saved query.'), onConfirm: () => {\n        if (queryCurrentlyDeleting) {\n          handleQueryDelete(queryCurrentlyDeleting);\n        }\n      }, onHide: () => setQueryCurrentlyDeleting(null), open: true, title: t('Delete Query?') }),\n    savedQueryCurrentlyPreviewing && _jsx(SavedQueryPreviewModal, { fetchData: handleSavedQueryPreview, onHide: () => setSavedQueryCurrentlyPreviewing(null), savedQuery: savedQueryCurrentlyPreviewing, queries: queries, openInSqlLab: openInSqlLab, show: true }),\n    _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected queries?'), onConfirm: handleBulkQueryDelete, children:\n      (confirmDelete) => {\n        const bulkActions = [];\n        if (canDelete) {\n          bulkActions.push({\n            key: 'delete',\n            name: t('Delete'),\n            onSelect: confirmDelete,\n            type: 'danger'\n          });\n        }\n        if (canExport) {\n          bulkActions.push({\n            key: 'export',\n            name: t('Export'),\n            type: 'primary',\n            onSelect: handleBulkSavedQueryExport\n          });\n        }\n        return _jsx(ListView, { className: \"saved_query-list-view\", columns: columns, count: queryCount, data: queries, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, bulkActions: bulkActions, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, highlightRowId: savedQueryCurrentlyPreviewing == null ? void 0 : savedQueryCurrentlyPreviewing.id, enableBulkTag: true, bulkTagResourceName: \"query\", refreshData: refreshData });\n      } }\n    ),\n\n    _jsx(ImportModelsModal, { resourceName: \"saved_query\", resourceLabel: t('queries'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleSavedQueryImport, show: importingSavedQuery, onHide: closeSavedQueryImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields, sshTunnelPasswordFields: sshTunnelPasswordFields, setSSHTunnelPasswordFields: setSSHTunnelPasswordFields, sshTunnelPrivateKeyFields: sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields: setSSHTunnelPrivateKeyFields, sshTunnelPrivateKeyPasswordFields: sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields: setSSHTunnelPrivateKeyPasswordFields }),\n    preparingExport && _jsx(Loading, {})] }\n  );\n}__signature__(SavedQueryList, \"useListViewResource{{ state: { loading, resourceCount: queryCount, resourceCollection: queries, bulkSelectEnabled, }, hasPerm, fetchData, toggleBulkSelect, refreshData, }}\\nuseSelector{{ roles }}\\nuseState{[queryCurrentlyDeleting, setQueryCurrentlyDeleting](null)}\\nuseState{[savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing](null)}\\nuseState{[importingSavedQuery, showImportModal](false)}\\nuseState{[passwordFields, setPasswordFields]([])}\\nuseState{[preparingExport, setPreparingExport](false)}\\nuseState{[sshTunnelPasswordFields, setSSHTunnelPasswordFields]([])}\\nuseState{[sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields]([])}\\nuseState{[sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields,]([])}\\nuseHistory{history}\\nuseCallback{handleSavedQueryPreview}\\nuseCallback{copyQueryLink}\\nuseMemo{columns}\\nuseMemo{filters}\", () => [useListViewResource, useSelector, useHistory]);const _default =\nwithToasts(SavedQueryList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PAGE_SIZE, \"PAGE_SIZE\", \"/app/superset-frontend/src/pages/SavedQueryList/index.tsx\");reactHotLoader.register(PASSWORDS_NEEDED_MESSAGE, \"PASSWORDS_NEEDED_MESSAGE\", \"/app/superset-frontend/src/pages/SavedQueryList/index.tsx\");reactHotLoader.register(CONFIRM_OVERWRITE_MESSAGE, \"CONFIRM_OVERWRITE_MESSAGE\", \"/app/superset-frontend/src/pages/SavedQueryList/index.tsx\");reactHotLoader.register(StyledTableLabel, \"StyledTableLabel\", \"/app/superset-frontend/src/pages/SavedQueryList/index.tsx\");reactHotLoader.register(StyledPopoverItem, \"StyledPopoverItem\", \"/app/superset-frontend/src/pages/SavedQueryList/index.tsx\");reactHotLoader.register(SavedQueryList, \"SavedQueryList\", \"/app/superset-frontend/src/pages/SavedQueryList/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/pages/SavedQueryList/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["FeatureFlag","isFeatureEnabled","styled","SupersetClient","t","useCallback","useMemo","useState","Link","useHistory","rison","createErrorHandler","createFetchDistinct","createFetchRelated","useSelector","Popover","withToasts","useListViewResource","ConfirmStatusChange","handleResourceExport","SubMenu","ListView","FilterOperator","Loading","DeleteModal","ActionsBar","TagsList","Tooltip","commonMenuData","QueryObjectColumns","copyTextToClipboard","ImportModelsModal","ModifiedInfo","loadTags","Icons","SavedQueryPreviewModal","findPermission","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PAGE_SIZE","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","StyledTableLabel","div","theme","colors","primary","base","StyledPopoverItem","grayscale","dark2","SavedQueryList","addDangerToast","addSuccessToast","user","state","loading","resourceCount","queryCount","resourceCollection","queries","bulkSelectEnabled","hasPerm","fetchData","toggleBulkSelect","refreshData","roles","canReadTag","queryCurrentlyDeleting","setQueryCurrentlyDeleting","savedQueryCurrentlyPreviewing","setSavedQueryCurrentlyPreviewing","importingSavedQuery","showImportModal","passwordFields","setPasswordFields","preparingExport","setPreparingExport","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","history","openSavedQueryImportModal","closeSavedQueryImportModal","handleSavedQueryImport","canCreate","canEdit","canDelete","canExport","handleSavedQueryPreview","id","get","endpoint","then","json","result","errMsg","menuData","activeChild","subMenuButtons","push","name","onClick","buttonStyle","to","children","className","title","placement","Import","buttons","openInSqlLab","openInNewWindow","window","open","copyQueryLink","Promise","resolve","location","origin","catch","handleQueryDelete","label","delete","handleBulkSavedQueryExport","savedQueriesToExport","ids","map","handleBulkQueryDelete","queriesToDelete","encode","message","initialSort","desc","columns","accessor","Header","size","hidden","disableSortBy","Cell","row","original","sql_tables","tables","names","table","main","shift","length","trigger","content","tags","filter","tag","type","TaggingSystem","changed_by","changedBy","changed_on_delta_humanized","changedOn","date","handlePreview","handleEdit","metaKey","Boolean","handleCopy","handleExport","handleDelete","actions","tooltip","icon","item","ChangedBy","filters","key","input","operator","AllText","toolTipDescription","RelationOneMany","unfilteredLabel","fetchSelects","paginate","Equals","SavedQueryTagById","description","onConfirm","onHide","savedQuery","show","confirmDelete","bulkActions","onSelect","count","data","pageSize","disableBulkSelect","highlightRowId","enableBulkTag","bulkTagResourceName","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/pages/SavedQueryList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n  FeatureFlag,\n  isFeatureEnabled,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport { useCallback, useMemo, useState, MouseEvent } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createErrorHandler,\n  createFetchDistinct,\n  createFetchRelated,\n} from 'src/views/CRUD/utils';\nimport { useSelector } from 'react-redux';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu, { ButtonProps, SubMenuProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  FilterOperator,\n  Filters,\n  ListViewProps,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar, { ActionProps } from 'src/components/ListView/ActionsBar';\nimport { TagsList } from 'src/components/Tags';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/features/home/commonMenuData';\nimport { QueryObjectColumns, SavedQueryObject } from 'src/views/CRUD/types';\nimport copyTextToClipboard from 'src/utils/copy';\nimport Tag from 'src/types/TagType';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { loadTags } from 'src/components/Tags/utils';\nimport Icons from 'src/components/Icons';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport SavedQueryPreviewModal from 'src/features/queries/SavedQueryPreviewModal';\nimport { findPermission } from 'src/utils/findPermission';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the saved queries. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more saved queries that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface SavedQueryListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\n\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\n\nfunction SavedQueryList({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}: SavedQueryListProps) {\n  const {\n    state: {\n      loading,\n      resourceCount: queryCount,\n      resourceCollection: queries,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<SavedQueryObject>(\n    'saved_query',\n    t('Saved queries'),\n    addDangerToast,\n  );\n  const { roles } = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n  const [queryCurrentlyDeleting, setQueryCurrentlyDeleting] =\n    useState<SavedQueryObject | null>(null);\n  const [savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing] =\n    useState<SavedQueryObject | null>(null);\n  const [importingSavedQuery, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n  const history = useHistory();\n\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Query imported'));\n  };\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n\n  const handleSavedQueryPreview = useCallback(\n    (id: number) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/saved_query/${id}`,\n      }).then(\n        ({ json = {} }) => {\n          setSavedQueryCurrentlyPreviewing({ ...json.result });\n        },\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t('There was an issue previewing the selected query %s', errMsg),\n          ),\n        ),\n      );\n    },\n    [addDangerToast],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Saved queries',\n    ...commonMenuData,\n  };\n\n  const subMenuButtons: Array<ButtonProps> = [];\n\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  subMenuButtons.push({\n    name: (\n      <Link to=\"/sqllab?new=true\">\n        <i className=\"fa fa-plus\" /> {t('Query')}\n      </Link>\n    ),\n    buttonStyle: 'primary',\n  });\n\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import queries')}\n          placement=\"bottomRight\"\n          data-test=\"import-tooltip-test\"\n        >\n          <Icons.Import data-test=\"import-icon\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal,\n      'data-test': 'import-button',\n    });\n  }\n\n  menuData.buttons = subMenuButtons;\n\n  // Action methods\n  const openInSqlLab = (id: number, openInNewWindow: boolean) => {\n    if (openInNewWindow) {\n      window.open(`/sqllab?savedQueryId=${id}`);\n    } else {\n      history.push(`/sqllab?savedQueryId=${id}`);\n    }\n  };\n\n  const copyQueryLink = useCallback(\n    (id: number) => {\n      copyTextToClipboard(() =>\n        Promise.resolve(`${window.location.origin}/sqllab?savedQueryId=${id}`),\n      )\n        .then(() => {\n          addSuccessToast(t('Link Copied!'));\n        })\n        .catch(() => {\n          addDangerToast(t('Sorry, your browser does not support copying.'));\n        });\n    },\n    [addDangerToast, addSuccessToast],\n  );\n\n  const handleQueryDelete = ({ id, label }: SavedQueryObject) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setQueryCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', label));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', label, errMsg)),\n      ),\n    );\n  };\n\n  const handleBulkSavedQueryExport = (\n    savedQueriesToExport: SavedQueryObject[],\n  ) => {\n    const ids = savedQueriesToExport.map(({ id }) => id);\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const handleBulkQueryDelete = (queriesToDelete: SavedQueryObject[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(\n        queriesToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected queries: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'label',\n        Header: t('Name'),\n      },\n      {\n        accessor: 'description',\n        Header: t('Description'),\n      },\n      {\n        accessor: 'database.database_name',\n        Header: t('Database'),\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        accessor: 'schema',\n        Header: t('Schema'),\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { sql_tables: tables = [] },\n          },\n        }: any) => {\n          const names = tables.map((table: any) => table.table);\n          const main = names?.shift() || '';\n\n          if (names.length) {\n            return (\n              <StyledTableLabel>\n                <span>{main}</span>\n                <Popover\n                  placement=\"right\"\n                  title={t('TABLES')}\n                  trigger=\"click\"\n                  content={\n                    <>\n                      {names.map((name: string) => (\n                        <StyledPopoverItem key={name}>{name}</StyledPopoverItem>\n                      ))}\n                    </>\n                  }\n                >\n                  <span className=\"count\">(+{names.length})</span>\n                </Popover>\n              </StyledTableLabel>\n            );\n          }\n\n          return main;\n        },\n        accessor: 'sql_tables',\n        Header: t('Tables'),\n        size: 'xl',\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: any) => (\n          // Only show custom type tags\n          <TagsList tags={tags.filter((tag: Tag) => tag.type === 1)} />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TaggingSystem),\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_by: changedBy,\n              changed_on_delta_humanized: changedOn,\n            },\n          },\n        }: any) => <ModifiedInfo user={changedBy} date={changedOn} />,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handlePreview = () => {\n            handleSavedQueryPreview(original.id);\n          };\n          const handleEdit = ({ metaKey }: MouseEvent) =>\n            openInSqlLab(original.id, Boolean(metaKey));\n          const handleCopy = () => copyQueryLink(original.id);\n          const handleExport = () => handleBulkSavedQueryExport([original]);\n          const handleDelete = () => setQueryCurrentlyDeleting(original);\n\n          const actions = [\n            {\n              label: 'preview-action',\n              tooltip: t('Query preview'),\n              placement: 'bottom',\n              icon: 'Binoculars',\n              onClick: handlePreview,\n            },\n            canEdit && {\n              label: 'edit-action',\n              tooltip: t('Edit query'),\n              placement: 'bottom',\n              icon: 'Edit',\n              onClick: handleEdit,\n            },\n            {\n              label: 'copy-action',\n              tooltip: t('Copy query URL'),\n              placement: 'bottom',\n              icon: 'Copy',\n              onClick: handleCopy,\n            },\n            canExport && {\n              label: 'export-action',\n              tooltip: t('Export query'),\n              placement: 'bottom',\n              icon: 'Share',\n              onClick: handleExport,\n            },\n            canDelete && {\n              label: 'delete-action',\n              tooltip: t('Delete query'),\n              placement: 'bottom',\n              icon: 'Trash',\n              onClick: handleDelete,\n            },\n          ].filter(item => !!item);\n\n          return <ActionsBar actions={actions as ActionProps[]} />;\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.ChangedBy,\n        hidden: true,\n      },\n    ],\n    [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Search'),\n        id: 'label',\n        key: 'search',\n        input: 'search',\n        operator: FilterOperator.AllText,\n        toolTipDescription:\n          'Searches all text fields: Name, Description, Database & Schema',\n      },\n      {\n        Header: t('Database'),\n        key: 'database',\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.RelationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'saved_query',\n          'database',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dataset datasource values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        id: 'schema',\n        key: 'schema',\n        input: 'select',\n        operator: FilterOperator.Equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'saved_query',\n          'schema',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t('An error occurred while fetching schema values: %s', errMsg),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      ...((isFeatureEnabled(FeatureFlag.TaggingSystem) && canReadTag\n        ? [\n            {\n              Header: t('Tag'),\n              id: 'tags',\n              key: 'tags',\n              input: 'select',\n              operator: FilterOperator.SavedQueryTagById,\n              fetchSelects: loadTags,\n            },\n          ]\n        : []) as Filters),\n      {\n        Header: t('Modified by'),\n        key: 'changed_by',\n        id: 'changed_by',\n        input: 'select',\n        operator: FilterOperator.RelationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'saved_query',\n          'changed_by',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset datasource values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n    ],\n    [addDangerToast],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {queryCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'This action will permanently delete the saved query.',\n          )}\n          onConfirm={() => {\n            if (queryCurrentlyDeleting) {\n              handleQueryDelete(queryCurrentlyDeleting);\n            }\n          }}\n          onHide={() => setQueryCurrentlyDeleting(null)}\n          open\n          title={t('Delete Query?')}\n        />\n      )}\n      {savedQueryCurrentlyPreviewing && (\n        <SavedQueryPreviewModal\n          fetchData={handleSavedQueryPreview}\n          onHide={() => setSavedQueryCurrentlyPreviewing(null)}\n          savedQuery={savedQueryCurrentlyPreviewing}\n          queries={queries}\n          openInSqlLab={openInSqlLab}\n          show\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected queries?')}\n        onConfirm={handleBulkQueryDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkSavedQueryExport,\n            });\n          }\n          return (\n            <ListView<SavedQueryObject>\n              className=\"saved_query-list-view\"\n              columns={columns}\n              count={queryCount}\n              data={queries}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              pageSize={PAGE_SIZE}\n              bulkActions={bulkActions}\n              addSuccessToast={addSuccessToast}\n              addDangerToast={addDangerToast}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              highlightRowId={savedQueryCurrentlyPreviewing?.id}\n              enableBulkTag\n              bulkTagResourceName=\"query\"\n              refreshData={refreshData}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"saved_query\"\n        resourceLabel={t('queries')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleSavedQueryImport}\n        show={importingSavedQuery}\n        onHide={closeSavedQueryImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(SavedQueryList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}