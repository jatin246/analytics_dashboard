{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { css, isFeatureEnabled, FeatureFlag, styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport { InputNumber } from 'src/components/Input';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport Collapse from 'src/components/Collapse';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { AntdCheckbox, AsyncSelect, Select } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { NotificationMethodOption, Sections } from 'src/features/alerts/types';\nimport { useSelector } from 'react-redux';\nimport NumberInput from './components/NumberInput';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\nimport ValidatedPanelHeader from './components/ValidatedPanelHeader';\nimport StyledPanel from './components/StyledPanel';\nimport { buildErrorTooltipMessage } from './buildErrorTooltipMessage';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n'pivot_table_v2',\n'table',\n'paired_ttest'];\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 0 * * *'; // every day\nconst DEFAULT_RETENTION = 90;\nconst DEFAULT_NOTIFICATION_METHODS = [\nNotificationMethodOption.Email];\n\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n{\n  label: t('< (Smaller than)'),\n  value: '<'\n},\n{\n  label: t('> (Larger than)'),\n  value: '>'\n},\n{\n  label: t('<= (Smaller or equal)'),\n  value: '<='\n},\n{\n  label: t('>= (Larger or equal)'),\n  value: '>='\n},\n{\n  label: t('== (Is equal)'),\n  value: '=='\n},\n{\n  label: t('!= (Is not equal)'),\n  value: '!='\n},\n{\n  label: t('Not null'),\n  value: 'not null'\n}];\n\nconst RETENTION_OPTIONS = [\n{\n  label: t('None'),\n  value: 0\n},\n{\n  label: t('30 days'),\n  value: 30\n},\n{\n  label: t('60 days'),\n  value: 60\n},\n{\n  label: t('90 days'),\n  value: 90\n}];\n\nconst CONTENT_TYPE_OPTIONS = [\n{\n  label: t('Dashboard'),\n  value: 'dashboard'\n},\n{\n  label: t('Chart'),\n  value: 'chart'\n}];\n\nconst FORMAT_OPTIONS = {\n  pdf: {\n    label: t('Send as PDF'),\n    value: 'PDF'\n  },\n  png: {\n    label: t('Send as PNG'),\n    value: 'PNG'\n  },\n  csv: {\n    label: t('Send as CSV'),\n    value: 'CSV'\n  },\n  txt: {\n    label: t('Send as text'),\n    value: 'TEXT'\n  }\n};\n// Apply to final text input components of each collapse panel\nconst noMarginBottom = css`\n  margin-bottom: 0;\n`;\n/*\nHeight of modal body defined here, total width defined at component invocation as antd prop.\n */\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    height: 720px;\n  }\n\n  .control-label {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .ant-collapse > .ant-collapse-item {\n    border-bottom: none;\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n  }\n`;\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\nexport const StyledInputContainer = styled.div`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-top: 0px;\n    margin-bottom: ${theme.gridUnit * 4}px;\n\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type='number'] {\n      -moz-appearance: textfield;\n    }\n\n    .helper {\n      display: block;\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      padding: ${theme.gridUnit}px 0;\n      text-align: left;\n    }\n\n    .required {\n      margin-left: ${theme.gridUnit / 2}px;\n      color: ${theme.colors.error.base};\n    }\n\n    .input-container {\n      display: flex;\n      align-items: center;\n\n      > div {\n        width: 100%;\n      }\n\n      label {\n        display: flex;\n        margin-right: ${theme.gridUnit * 2}px;\n      }\n\n      i {\n        margin: 0 ${theme.gridUnit}px;\n      }\n    }\n\n    input,\n    textarea {\n      flex: 1 1 auto;\n    }\n\n    input[disabled] {\n      color: ${theme.colors.grayscale.base};\n    }\n\n    textarea {\n      height: 300px;\n      resize: none;\n    }\n\n    input::placeholder,\n    textarea::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    textarea,\n    input[type='text'],\n    input[type='number'] {\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n      border-style: none;\n      border: 1px solid ${theme.colors.grayscale.light2};\n      border-radius: ${theme.gridUnit}px;\n\n      &[name='description'] {\n        flex: 1 1 auto;\n      }\n    }\n\n    .input-label {\n      margin-left: 10px;\n    }\n  `}\n`;\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-top: ${({ theme }) => theme.gridUnit * 0}px;\n`;\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.primary.dark1};\n    cursor: pointer;\n\n    i {\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n\n    &.disabled {\n      color: ${theme.colors.grayscale.light1};\n      cursor: default;\n    }\n  `}\n`;\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\nconst inputSpacer = (theme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\nexport const TRANSLATIONS = {\n  // Panel titles\n  GENERAL_TITLE: t('General information'),\n  ALERT_CONDITION_TITLE: t('Alert condition'),\n  ALERT_CONTENTS_TITLE: t('Alert contents'),\n  REPORT_CONTENTS_TITLE: t('Report contents'),\n  SCHEDULE_TITLE: t('Schedule'),\n  NOTIFICATION_TITLE: t('Notification method'),\n  // Error text\n  NAME_ERROR_TEXT: t('name'),\n  OWNERS_ERROR_TEXT: t('owners'),\n  CONTENT_ERROR_TEXT: t('content type'),\n  DATABASE_ERROR_TEXT: t('database'),\n  SQL_ERROR_TEXT: t('sql'),\n  ALERT_CONDITION_ERROR_TEXT: t('alert condition'),\n  CRONTAB_ERROR_TEXT: t('crontab'),\n  WORKING_TIMEOUT_ERROR_TEXT: t('working timeout'),\n  RECIPIENTS_ERROR_TEXT: t('recipients'),\n  EMAIL_SUBJECT_ERROR_TEXT: t('email subject'),\n  ERROR_TOOLTIP_MESSAGE: t('Not all required fields are complete. Please provide the following:')\n};\nconst NotificationMethodAdd = ({ status = 'active', onClick }) => {\n  if (status === 'hidden') {\n    return null;\n  }\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n  return _jsxs(StyledNotificationAddButton, { className: status, onClick: checkStatus, children: [\n    _jsx(\"i\", { className: \"fa fa-plus\" }), ' ',\n    status === 'active' ?\n    t('Add another notification method') :\n    t('Add delivery method')] }\n  );\n};\nconst AlertReportModal = ({ addDangerToast, onAdd, onHide, show, alert = null, isReport = false, addSuccessToast }) => {var _currentAlert$databas2, _currentAlert$databas3, _currentAlert$validat5, _currentAlert$validat6, _currentAlert$chart4, _currentAlert$chart5, _currentAlert$dashboa4, _currentAlert$dashboa5;\n  const currentUser = useSelector((state) => state.user);\n  // Check config for alternate notification methods setting\n  const conf = useCommonConf();\n  const allowedNotificationMethods = (conf == null ? void 0 : conf.ALERT_REPORTS_NOTIFICATION_METHODS) || DEFAULT_NOTIFICATION_METHODS;\n  const [disableSave, setDisableSave] = useState(true);\n  const [currentAlert, setCurrentAlert] = useState();\n  const [isHidden, setIsHidden] = useState(true);\n  const [contentType, setContentType] = useState('dashboard');\n  const [reportFormat, setReportFormat] = useState(DEFAULT_NOTIFICATION_FORMAT);\n  const [forceScreenshot, setForceScreenshot] = useState(false);\n  const [isScreenshot, setIsScreenshot] = useState(false);\n  useEffect(() => {\n    setIsScreenshot(reportFormat === 'PNG');\n  }, [reportFormat]);\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState(false);\n  const [sourceOptions, setSourceOptions] = useState([]);\n  const [dashboardOptions, setDashboardOptions] = useState([]);\n  const [chartOptions, setChartOptions] = useState([]);\n  // Validation\n  const [validationStatus, setValidationStatus] = useState({\n    [Sections.General]: {\n      hasErrors: false,\n      name: TRANSLATIONS.GENERAL_TITLE,\n      errors: []\n    },\n    [Sections.Content]: {\n      hasErrors: false,\n      name: isReport ?\n      TRANSLATIONS.REPORT_CONTENTS_TITLE :\n      TRANSLATIONS.ALERT_CONTENTS_TITLE,\n      errors: []\n    },\n    [Sections.Alert]: {\n      hasErrors: false,\n      name: TRANSLATIONS.ALERT_CONDITION_TITLE,\n      errors: []\n    },\n    [Sections.Schedule]: {\n      hasErrors: false,\n      name: TRANSLATIONS.SCHEDULE_TITLE,\n      errors: []\n    },\n    [Sections.Notification]: {\n      hasErrors: false,\n      name: TRANSLATIONS.NOTIFICATION_TITLE,\n      errors: []\n    }\n  });\n  const [errorTooltipMessage, setErrorTooltipMessage] = useState('');\n  const updateValidationStatus = (section, errors) => {\n    setValidationStatus((currentValidationData) => ({\n      ...currentValidationData,\n      [section]: {\n        hasErrors: errors.length > 0,\n        name: currentValidationData[section].name,\n        errors\n      }\n    }));\n  };\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState('');\n  const reportOrAlert = isReport ? 'report' : 'alert';\n  const isEditMode = alert !== null;\n  const formatOptionEnabled = isFeatureEnabled(FeatureFlag.AlertsAttachReports) || isReport;\n  const [notificationAddState, setNotificationAddState] = useState('active');\n  const [notificationSettings, setNotificationSettings] = useState([]);\n  const [emailSubject, setEmailSubject] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const onNotificationAdd = () => {\n    setNotificationSettings([\n    ...notificationSettings,\n    {\n      recipients: '',\n      // options shown in the newly added notification method\n      options: allowedNotificationMethods.filter(\n        // are filtered such that\n        (option) =>\n        // options are not included\n        !notificationSettings.reduce(\n          // when it exists in previous notificationSettings\n          (accum, setting) => accum || option === setting.method, false))\n    }]\n    );\n    setNotificationAddState(notificationSettings.length === allowedNotificationMethodsCount ?\n    'hidden' :\n    'disabled');\n  };\n  const { ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT, ALERT_REPORTS_DEFAULT_CRON_VALUE, ALERT_REPORTS_DEFAULT_RETENTION } = useSelector((state) => {var _state$common, _conf$ALERT_REPORTS_D, _conf$ALERT_REPORTS_D2, _conf$ALERT_REPORTS_D3;\n    const conf = (_state$common = state.common) == null ? void 0 : _state$common.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT: (_conf$ALERT_REPORTS_D = conf == null ? void 0 : conf.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT) != null ? _conf$ALERT_REPORTS_D : DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE: (_conf$ALERT_REPORTS_D2 = conf == null ? void 0 : conf.ALERT_REPORTS_DEFAULT_CRON_VALUE) != null ? _conf$ALERT_REPORTS_D2 : DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION: (_conf$ALERT_REPORTS_D3 = conf == null ? void 0 : conf.ALERT_REPORTS_DEFAULT_RETENTION) != null ? _conf$ALERT_REPORTS_D3 : DEFAULT_RETENTION\n    };\n  });\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    email_subject: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined\n  };\n  const updateNotificationSetting = (index, setting) => {\n    const settings = [...notificationSettings];\n    settings[index] = setting;\n    // if you've changed notification method -> remove trailing methods\n    if (notificationSettings[index].method !== setting.method) {\n      notificationSettings[index] = setting;\n      setNotificationSettings(notificationSettings.filter((_, idx) => idx <= index));\n      if (notificationSettings.length - 1 > index) {\n        setNotificationAddState('active');\n      }\n      if (setting.method !== undefined && notificationAddState !== 'hidden') {\n        setNotificationAddState('active');\n      }\n    } else\n    {\n      setNotificationSettings(settings);\n    }\n  };\n  const removeNotificationSetting = (index) => {\n    const settings = notificationSettings.slice();\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n  // Alert fetch logic\n  const { state: { loading, resource, error: fetchError }, fetchResource, createResource, updateResource, clearError } = useSingleViewResource('report', t('report'), addDangerToast);\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n  const onSave = () => {var _currentAlert$chart, _currentAlert$dashboa, _currentAlert$databas;\n    // Notification Settings\n    const recipients = [];\n    notificationSettings.forEach((setting) => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients\n          },\n          type: setting.method\n        });\n      }\n    });\n    const shouldEnableForceScreenshot = contentType === 'chart' && !isReport;\n    const data = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull ?\n      {} :\n      currentAlert == null ? void 0 : currentAlert.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert == null ? void 0 : (_currentAlert$chart = currentAlert.chart) == null ? void 0 : _currentAlert$chart.value : null,\n      dashboard: contentType === 'dashboard' ? currentAlert == null ? void 0 : (_currentAlert$dashboa = currentAlert.dashboard) == null ? void 0 : _currentAlert$dashboa.value : null,\n      custom_width: isScreenshot ? currentAlert == null ? void 0 : currentAlert.custom_width : undefined,\n      database: currentAlert == null ? void 0 : (_currentAlert$databas = currentAlert.database) == null ? void 0 : _currentAlert$databas.value,\n      owners: ((currentAlert == null ? void 0 : currentAlert.owners) || []).map((owner) => owner.value || owner.id),\n      recipients,\n      report_format: reportFormat || DEFAULT_NOTIFICATION_FORMAT\n    };\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n    data.context_markdown = 'string';\n    if (isEditMode) {\n      // Edit\n      if (currentAlert != null && currentAlert.id) {\n        const update_id = currentAlert.id;\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n        updateResource(update_id, data).then((response) => {\n          if (!response) {\n            return;\n          }\n          addSuccessToast(t('%s updated', data.type));\n          if (onAdd) {\n            onAdd();\n          }\n          hide();\n        });\n      }\n    } else\n    if (currentAlert) {\n      // Create\n      createResource(data).then((response) => {\n        if (!response) {\n          return;\n        }\n        addSuccessToast(t('%s updated', data.type));\n        if (onAdd) {\n          onAdd(response);\n        }\n        hide();\n      });\n    }\n  };\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/created_by?q=${query}`\n    }).then((response) => ({\n      data: response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text\n      })),\n      totalCount: response.json.count\n    }));\n  }, []);\n  const getSourceData = useCallback((db) => {\n    const database = db || (currentAlert == null ? void 0 : currentAlert.database);\n    if (!database || database.label) {\n      return null;\n    }\n    let result;\n    // Cycle through source options to find the selected option\n    sourceOptions.forEach((source) => {\n      if (source.value === database.value || source.value === database.id) {\n        result = source;\n      }\n    });\n    return result;\n  }, [currentAlert == null ? void 0 : currentAlert.database, sourceOptions]);\n  // Updating alert/report state\n  const updateAlertState = (name, value) => {\n    setCurrentAlert((currentAlertData) => ({\n      ...currentAlertData,\n      [name]: value\n    }));\n  };\n  const loadSourceOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/database?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text\n      }));\n      setSourceOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const databaseLabel = (currentAlert == null ? void 0 : currentAlert.database) && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n  const loadDashboardOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode_uri({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/dashboard?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text\n      }));\n      setDashboardOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const getDashboardData = (db) => {\n    const dashboard = db || (currentAlert == null ? void 0 : currentAlert.dashboard);\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n    let result;\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach((dash) => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n    return result;\n  };\n  const getChartData = useCallback((chartData) => {\n    const chart = chartData || (currentAlert == null ? void 0 : currentAlert.chart);\n    if (!chart || chart.label) {\n      return null;\n    }\n    let result;\n    // Cycle through chart options to find the selected option\n    chartOptions.forEach((slice) => {\n      if (slice.value === chart.value || slice.value === chart.id) {\n        result = slice;\n      }\n    });\n    return result;\n  }, [chartOptions, currentAlert == null ? void 0 : currentAlert.chart]);\n  const noChartLabel = (currentAlert == null ? void 0 : currentAlert.chart) && !(currentAlert != null && currentAlert.chart.label);\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n  const loadChartOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode_uri({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/chart?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text\n      }));\n      setChartOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const getChartVisualizationType = (chart) => SupersetClient.get({\n    endpoint: `/api/v1/chart/${chart.value}`\n  }).then((response) => setChartVizType(response.json.result.viz_type));\n  // Handle input/textarea updates\n  const onInputChange = (event) => {\n    const { target: { type, value, name } } = event;\n    const parsedValue = type === 'number' ? parseInt(value, 10) || null : value;\n    updateAlertState(name, parsedValue);\n    if (name === 'name') {\n      updateEmailSubject();\n    }\n  };\n  const onCustomWidthChange = (value) => {\n    updateAlertState('custom_width', value);\n  };\n  const onTimeoutVerifyChange = (event) => {\n    const { target } = event;\n    const value = +target.value;\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, undefined);\n    } else\n    {\n      updateAlertState(target.name, value ? Math.max(value, TIMEOUT_MIN) : value);\n    }\n  };\n  const onSQLChange = (value) => {\n    updateAlertState('sql', value || '');\n  };\n  const onOwnersChange = (value) => {\n    updateAlertState('owners', value || []);\n  };\n  const onSourceChange = (value) => {\n    updateAlertState('database', value || []);\n  };\n  const onDashboardChange = (dashboard) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n  const onChartChange = (chart) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n  const onActiveSwitch = (checked) => {\n    updateAlertState('active', checked);\n  };\n  const onConditionChange = (op) => {var _currentAlert$validat;\n    setConditionNotNull(op === 'not null');\n    const config = {\n      op,\n      threshold: currentAlert ? (_currentAlert$validat =\n      currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat.threshold :\n      undefined\n    };\n    updateAlertState('validator_config_json', config);\n  };\n  const onThresholdChange = (event) => {var _currentAlert$validat2;\n    const { target } = event;\n    const config = {\n      op: currentAlert ? (_currentAlert$validat2 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat2.op : undefined,\n      threshold: target.value\n    };\n    updateAlertState('validator_config_json', config);\n  };\n  const onLogRetentionChange = (retention) => {\n    updateAlertState('log_retention', retention);\n  };\n  const onTimezoneChange = (timezone) => {\n    updateAlertState('timezone', timezone);\n  };\n  const onContentTypeChange = (value) => {\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    setContentType(value);\n  };\n  const onFormatChange = (value) => {\n    setReportFormat(value);\n  };\n  const onForceScreenshotChange = (event) => {\n    setForceScreenshot(event.target.checked);\n  };\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n    let hasInfo = false;\n    notificationSettings.forEach((setting) => {var _setting$recipients;\n      if (!!setting.method && (_setting$recipients = setting.recipients) != null && _setting$recipients.length) {\n        hasInfo = true;\n      }\n    });\n    return hasInfo;\n  };\n  const validateGeneralSection = () => {var _currentAlert$name, _currentAlert$owners;\n    const errors = [];\n    if (!(currentAlert != null && (_currentAlert$name = currentAlert.name) != null && _currentAlert$name.length)) {\n      errors.push(TRANSLATIONS.NAME_ERROR_TEXT);\n    }\n    if (!(currentAlert != null && (_currentAlert$owners = currentAlert.owners) != null && _currentAlert$owners.length)) {\n      errors.push(TRANSLATIONS.OWNERS_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.General, errors);\n  };\n  const validateContentSection = () => {\n    const errors = [];\n    if (!(contentType === 'dashboard' && !!(currentAlert != null && currentAlert.dashboard) ||\n    contentType === 'chart' && !!(currentAlert != null && currentAlert.chart))) {\n      errors.push(TRANSLATIONS.CONTENT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Content, errors);\n  };\n  const validateAlertSection = () => {var _currentAlert$sql, _currentAlert$validat3, _currentAlert$validat4;\n    const errors = [];\n    if (!(currentAlert != null && currentAlert.database)) {\n      errors.push(TRANSLATIONS.DATABASE_ERROR_TEXT);\n    }\n    if (!(currentAlert != null && (_currentAlert$sql = currentAlert.sql) != null && _currentAlert$sql.length)) {\n      errors.push(TRANSLATIONS.SQL_ERROR_TEXT);\n    }\n    if (!((conditionNotNull || !!(currentAlert != null && (_currentAlert$validat3 = currentAlert.validator_config_json) != null && _currentAlert$validat3.op)) && (\n    conditionNotNull ||\n    (currentAlert == null ? void 0 : (_currentAlert$validat4 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat4.threshold) !== undefined))) {\n      errors.push(TRANSLATIONS.ALERT_CONDITION_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Alert, errors);\n  };\n  const validateScheduleSection = () => {var _currentAlert$crontab;\n    const errors = [];\n    if (!(currentAlert != null && (_currentAlert$crontab = currentAlert.crontab) != null && _currentAlert$crontab.length)) {\n      errors.push(TRANSLATIONS.CRONTAB_ERROR_TEXT);\n    }\n    if (!(currentAlert != null && currentAlert.working_timeout)) {\n      errors.push(TRANSLATIONS.WORKING_TIMEOUT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Schedule, errors);\n  };\n  const validateNotificationSection = () => {\n    const hasErrors = !checkNotificationSettings();\n    const errors = hasErrors ? [TRANSLATIONS.RECIPIENTS_ERROR_TEXT] : [];\n    if (emailError) {\n      errors.push(TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Notification, errors);\n  };\n  const validateAll = () => {\n    validateGeneralSection();\n    validateContentSection();\n    if (!isReport)\n    validateAlertSection();\n    validateScheduleSection();\n    validateNotificationSection();\n  };\n  const enforceValidation = () => {\n    const sections = [\n    Sections.General,\n    Sections.Content,\n    isReport ? undefined : Sections.Alert,\n    Sections.Schedule,\n    Sections.Notification];\n\n    const hasErrors = sections.some((section) => section && validationStatus[section].hasErrors);\n    const tooltip = hasErrors ? buildErrorTooltipMessage(validationStatus) : '';\n    setErrorTooltipMessage(tooltip);\n    setDisableSave(hasErrors);\n  };\n  // Initialize\n  useEffect(() => {\n    if (isEditMode && (\n    !(currentAlert != null && currentAlert.id) || (alert == null ? void 0 : alert.id) !== currentAlert.id || isHidden && show)) {\n      if ((alert == null ? void 0 : alert.id) !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else\n    if (!isEditMode && (\n    !currentAlert || currentAlert.id || isHidden && show)) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser ?\n        [\n        {\n          value: currentUser.userId,\n          label: `${currentUser.firstName} ${currentUser.lastName}`\n        }] :\n\n        []\n      });\n      setNotificationSettings([\n      {\n        recipients: '',\n        options: allowedNotificationMethods,\n        method: NotificationMethodOption.Email\n      }]\n      );\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map((setting) => {\n        const config = typeof setting.recipient_config_json === 'string' ?\n        JSON.parse(setting.recipient_config_json) :\n        {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods\n        };\n      });\n      setNotificationSettings(settings);\n      setNotificationAddState(settings.length === allowedNotificationMethods.length ?\n      'hidden' :\n      'active');\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(resource.report_format || DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig = typeof resource.validator_config_json === 'string' ?\n      JSON.parse(resource.validator_config_json) :\n      resource.validator_config_json;\n      setConditionNotNull(resource.validator_type === 'not null');\n      if (resource.chart) {\n        setChartVizType(resource.chart.viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart ?\n        getChartData(resource.chart) || {\n          value: resource.chart.id,\n          label: resource.chart.slice_name\n        } :\n        undefined,\n        dashboard: resource.dashboard ?\n        getDashboardData(resource.dashboard) || {\n          value: resource.dashboard.id,\n          label: resource.dashboard.dashboard_title\n        } :\n        undefined,\n        database: resource.database ?\n        getSourceData(resource.database) || {\n          value: resource.database.id,\n          label: resource.database.database_name\n        } :\n        undefined,\n        owners: ((alert == null ? void 0 : alert.owners) || []).map((owner) => ({\n          value: owner.value || owner.id,\n          label: owner.label ||\n          `${owner.first_name} ${owner.last_name}`\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json: resource.validator_type === 'not null' ?\n        {\n          op: 'not null'\n        } :\n        validatorConfig\n      });\n    }\n  }, [resource]);\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validateAll();\n    updateEmailSubject();\n  }, [\n  currentAlertSafe.name,\n  currentAlertSafe.owners,\n  currentAlertSafe.database,\n  currentAlertSafe.sql,\n  currentAlertSafe.validator_config_json,\n  currentAlertSafe.crontab,\n  currentAlertSafe.working_timeout,\n  currentAlertSafe.dashboard,\n  currentAlertSafe.chart,\n  contentType,\n  notificationSettings,\n  conditionNotNull,\n  emailError]\n  );\n  useEffect(() => {\n    enforceValidation();\n  }, [validationStatus]);\n  const allowedNotificationMethodsCount = useMemo(() => allowedNotificationMethods.reduce((accum, setting) => {\n    if (accum.some((nm) => nm.includes('slack')) &&\n    setting.toLowerCase().includes('slack')) {\n      return accum;\n    }\n    return [...accum, setting.toLowerCase()];\n  }, []).length, [allowedNotificationMethods]);\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  const getTitleText = () => {\n    let titleText;\n    switch (true) {\n      case isEditMode && isReport:\n        titleText = t('Edit Report');\n        break;\n      case isEditMode:\n        titleText = t('Edit Alert');\n        break;\n      case isReport:\n        titleText = t('Add Report');\n        break;\n      default:\n        titleText = t('Add Alert');\n        break;\n    }\n    return titleText;\n  };\n  const updateEmailSubject = () => {\n    if (contentType === 'chart') {var _currentAlert$chart2;\n      if (currentAlert != null && currentAlert.name || currentAlert != null && (_currentAlert$chart2 = currentAlert.chart) != null && _currentAlert$chart2.label) {var _currentAlert$chart3;\n        setEmailSubject(`${currentAlert == null ? void 0 : currentAlert.name}: ${(currentAlert == null ? void 0 : (_currentAlert$chart3 = currentAlert.chart) == null ? void 0 : _currentAlert$chart3.label) || ''}`);\n      } else\n      {\n        setEmailSubject('');\n      }\n    } else\n    if (contentType === 'dashboard') {var _currentAlert$dashboa2;\n      if (currentAlert != null && currentAlert.name || currentAlert != null && (_currentAlert$dashboa2 = currentAlert.dashboard) != null && _currentAlert$dashboa2.label) {var _currentAlert$dashboa3;\n        setEmailSubject(`${currentAlert == null ? void 0 : currentAlert.name}: ${(currentAlert == null ? void 0 : (_currentAlert$dashboa3 = currentAlert.dashboard) == null ? void 0 : _currentAlert$dashboa3.label) || ''}`);\n      } else\n      {\n        setEmailSubject('');\n      }\n    } else\n    {\n      setEmailSubject('');\n    }\n  };\n  const handleErrorUpdate = (hasError) => {\n    setEmailError(hasError);\n  };\n  return _jsx(StyledModal, { className: \"no-content-padding\", responsive: true, disablePrimaryButton: disableSave, primaryTooltipMessage: errorTooltipMessage, onHandledPrimaryAction: onSave, onHide: hide, primaryButtonName: isEditMode ? t('Save') : t('Add'), show: show, width: \"500px\", centered: true, title: _jsx(\"h4\", { \"data-test\": \"alert-report-modal-title\", children: getTitleText() }), children:\n    _jsxs(Collapse, { expandIconPosition: \"right\", defaultActiveKey: \"general\", accordion: true, css: css`\n          border: 'none';\n        `, children: [\n      _jsx(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: TRANSLATIONS.GENERAL_TITLE, subtitle: t('Set up basic details, such as name and description.'), validateCheckStatus: !validationStatus[Sections.General].hasErrors, testId: \"general-information-panel\" }), children:\n        _jsxs(\"div\", { className: \"header-section\", children: [\n          _jsxs(StyledInputContainer, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              isReport ? t('Report name') : t('Alert name'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(\"input\", { type: \"text\", name: \"name\", value: currentAlert ? currentAlert.name : '', placeholder: isReport ? t('Enter report name') : t('Enter alert name'), onChange: onInputChange }) }\n            )] }\n          ),\n          _jsxs(StyledInputContainer, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Owners'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { \"data-test\": \"owners-select\", className: \"input-container\", children:\n              _jsx(AsyncSelect, { ariaLabel: t('Owners'), allowClear: true, name: \"owners\", mode: \"multiple\", placeholder: t('Select owners'), value: (currentAlert == null ? void 0 : currentAlert.owners) || [], options: loadOwnerOptions, onChange: onOwnersChange }) }\n            )] }\n          ),\n          _jsxs(StyledInputContainer, { children: [\n            _jsx(\"div\", { className: \"control-label\", children: t('Description') }),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(\"input\", { type: \"text\", name: \"description\", value: currentAlert ? currentAlert.description || '' : '', placeholder: t('Include description to be sent with %s', reportOrAlert), onChange: onInputChange }) }\n            )] }\n          ),\n          _jsxs(StyledSwitchContainer, { children: [\n            _jsx(Switch, { checked: currentAlert ? currentAlert.active : false, defaultChecked: true, onChange: onActiveSwitch }),\n            _jsx(\"div\", { className: \"switch-label\", children:\n              isReport ? t('Report is active') : t('Alert is active') }\n            )] }\n          )] }\n        ) }, \"general\"\n      ),\n      !isReport && _jsxs(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: TRANSLATIONS.ALERT_CONDITION_TITLE, subtitle: t('Define the database, SQL query, and triggering conditions for alert.'), validateCheckStatus: !validationStatus[Sections.Alert].hasErrors, testId: \"alert-condition-panel\" }), children: [\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Database'),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(AsyncSelect, { ariaLabel: t('Database'), name: \"source\", placeholder: t('Select database'), value: currentAlert != null && (_currentAlert$databas2 = currentAlert.database) != null && _currentAlert$databas2.label &&\n              currentAlert != null && (_currentAlert$databas3 = currentAlert.database) != null && _currentAlert$databas3.value ?\n              {\n                value: currentAlert.database.value,\n                label: currentAlert.database.label\n              } :\n              undefined, options: loadSourceOptions, onChange: onSourceChange }) }\n          )] }\n        ),\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('SQL Query'),\n            _jsx(StyledTooltip, { tooltip: t('The result of this query must be a value capable of numeric interpretation e.g. 1, 1.0, or \"1\" (compatible with Python\\'s float() function).') }),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(TextAreaControl, { name: \"sql\", language: \"sql\", offerEditInModal: false, minLines: 15, maxLines: 15, onChange: onSQLChange, readOnly: false, initialValue: resource == null ? void 0 : resource.sql }, currentAlert == null ? void 0 : currentAlert.id)] }\n        ),\n        _jsxs(\"div\", { className: \"inline-container wrap\", children: [\n          _jsxs(StyledInputContainer, { css: noMarginBottom, children: [\n            _jsxs(\"div\", { className: \"control-label\", css: inputSpacer, children: [\n              t('Trigger Alert If...'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(Select, { ariaLabel: t('Condition'), onChange: onConditionChange, placeholder: t('Condition'), value: (currentAlert == null ? void 0 : (_currentAlert$validat5 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat5.op) || undefined, options: CONDITIONS, css: inputSpacer }) }\n            )] }\n          ),\n          _jsxs(StyledInputContainer, { css: noMarginBottom, children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Value'), ' ',\n              !conditionNotNull && _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(\"input\", { type: \"number\", name: \"threshold\", disabled: conditionNotNull, value: (currentAlert == null ? void 0 : (_currentAlert$validat6 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat6.threshold) !==\n                undefined && !conditionNotNull ?\n                currentAlert.validator_config_json.threshold :\n                '', placeholder: t('Value'), onChange: onThresholdChange }) }\n            )] }\n          )] }\n        )] }, \"condition\"\n      ),\n      _jsxs(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: isReport ?\n          TRANSLATIONS.REPORT_CONTENTS_TITLE :\n          TRANSLATIONS.ALERT_CONTENTS_TITLE, subtitle: t('Customize data source, filters, and layout.'), validateCheckStatus: !validationStatus[Sections.Content].hasErrors, testId: \"contents-panel\" }), children: [\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Content type'),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(Select, { ariaLabel: t('Select content type'), onChange: onContentTypeChange, value: contentType, options: CONTENT_TYPE_OPTIONS, placeholder: t('Select content type') })] }\n        ),\n        _jsx(StyledInputContainer, { children:\n          contentType === 'chart' ? _jsxs(_Fragment, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Select chart'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(AsyncSelect, { ariaLabel: t('Chart'), name: \"chart\", value: currentAlert != null && (_currentAlert$chart4 = currentAlert.chart) != null && _currentAlert$chart4.label && currentAlert != null && (_currentAlert$chart5 = currentAlert.chart) != null && _currentAlert$chart5.value ?\n              {\n                value: currentAlert.chart.value,\n                label: currentAlert.chart.label\n              } :\n              undefined, options: loadChartOptions, onChange: onChartChange, placeholder: t('Select chart to use') })] }\n          ) : _jsxs(_Fragment, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Select dashboard'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(AsyncSelect, { ariaLabel: t('Dashboard'), name: \"dashboard\", value: currentAlert != null && (_currentAlert$dashboa4 = currentAlert.dashboard) != null && _currentAlert$dashboa4.label &&\n              currentAlert != null && (_currentAlert$dashboa5 = currentAlert.dashboard) != null && _currentAlert$dashboa5.value ?\n              {\n                value: currentAlert.dashboard.value,\n                label: currentAlert.dashboard.label\n              } :\n              undefined, options: loadDashboardOptions, onChange: onDashboardChange, placeholder: t('Select dashboard to use') })] }\n          ) }\n        ),\n        _jsx(StyledInputContainer, { css: ['PDF', 'TEXT', 'CSV'].includes(reportFormat) && noMarginBottom, children:\n          formatOptionEnabled && _jsxs(_Fragment, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Content format'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(Select, { ariaLabel: t('Select format'), onChange: onFormatChange, value: reportFormat, options: contentType === 'dashboard' ?\n              ['pdf', 'png'].map((key) => FORMAT_OPTIONS[key]) :\n              /* If chart is of text based viz type: show text\n              format option */\n              TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType) ?\n              Object.values(FORMAT_OPTIONS) :\n              ['pdf', 'png', 'csv'].map((key) => FORMAT_OPTIONS[key]), placeholder: t('Select format') })] }\n          ) }\n        ),\n        isScreenshot && _jsxs(StyledInputContainer, { css: !isReport && contentType === 'chart' && noMarginBottom, children: [\n          _jsx(\"div\", { className: \"control-label\", children: t('Screenshot width') }),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(InputNumber, { type: \"number\", name: \"custom_width\", value: (currentAlert == null ? void 0 : currentAlert.custom_width) || undefined, min: 600, max: 2400, placeholder: t('Input custom width in pixels'), onChange: onCustomWidthChange }) }\n          )] }\n        ),\n        (isReport || contentType === 'dashboard') && _jsx(\"div\", { className: \"inline-container\", children:\n          _jsx(StyledCheckbox, { \"data-test\": \"bypass-cache\", className: \"checkbox\", checked: forceScreenshot, onChange: onForceScreenshotChange, children:\n            t('Ignore cache when generating report') }\n          ) }\n        )] }, \"contents\"\n      ),\n      _jsxs(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: TRANSLATIONS.SCHEDULE_TITLE, subtitle: t('Define delivery schedule, timezone, and frequency settings.'), validateCheckStatus: !validationStatus[Sections.Schedule].hasErrors, testId: \"schedule-panel\" }), children: [\n        _jsx(AlertReportCronScheduler, { value: (currentAlert == null ? void 0 : currentAlert.crontab) || '', onChange: (newVal) => updateAlertState('crontab', newVal) }),\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Timezone'), \" \", _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(TimezoneSelector, { onTimezoneChange: onTimezoneChange, timezone: currentAlert == null ? void 0 : currentAlert.timezone, minWidth: \"100%\" })] }\n        ),\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Log retention'),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(Select, { ariaLabel: t('Log retention'), placeholder: t('Log retention'), onChange: onLogRetentionChange, value: currentAlert == null ? void 0 : currentAlert.log_retention, options: RETENTION_OPTIONS, sortComparator: propertyComparator('value') }) }\n          )] }\n        ),\n        _jsx(StyledInputContainer, { css: noMarginBottom, children:\n          isReport ? _jsxs(_Fragment, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Working timeout'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(NumberInput, { min: 1, name: \"working_timeout\", value: (currentAlert == null ? void 0 : currentAlert.working_timeout) || '', placeholder: t('Time in seconds'), onChange: onTimeoutVerifyChange, timeUnit: t('seconds') }) }\n            )] }\n          ) : _jsxs(_Fragment, { children: [\n            _jsx(\"div\", { className: \"control-label\", children: t('Grace period') }),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(NumberInput, { min: 1, name: \"grace_period\", value: (currentAlert == null ? void 0 : currentAlert.grace_period) || '', placeholder: t('Time in seconds'), onChange: onTimeoutVerifyChange, timeUnit: t('seconds') }) }\n            )] }\n          ) }\n        )] }, \"schedule\"\n      ),\n      _jsxs(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: TRANSLATIONS.NOTIFICATION_TITLE, subtitle: t('Choose notification method and recipients.'), validateCheckStatus: !validationStatus[Sections.Notification].hasErrors, testId: \"notification-method-panel\" }), children: [\n        notificationSettings.map((notificationSetting, i) => _jsx(StyledNotificationMethodWrapper, { children:\n          _jsx(NotificationMethod, { setting: notificationSetting, index: i, onUpdate: updateNotificationSetting, onRemove: removeNotificationSetting, onInputChange: onInputChange, email_subject: (currentAlert == null ? void 0 : currentAlert.email_subject) || '', defaultSubject: emailSubject || '', setErrorSubject: handleErrorUpdate }, `NotificationMethod-${i}`) }\n        )),\n\n        // Prohibit 'add notification method' button if only one present\n        allowedNotificationMethodsCount > notificationSettings.length && _jsx(NotificationMethodAdd, { \"data-test\": \"notification-add\", status: notificationAddState, onClick: onNotificationAdd })] }, \"notification\"\n      )] }\n    ) }\n  );\n};__signature__(AlertReportModal, \"useSelector{currentUser}\\nuseCommonConf{conf}\\nuseState{[disableSave, setDisableSave](true)}\\nuseState{[currentAlert, setCurrentAlert]}\\nuseState{[isHidden, setIsHidden](true)}\\nuseState{[contentType, setContentType]('dashboard')}\\nuseState{[reportFormat, setReportFormat](DEFAULT_NOTIFICATION_FORMAT)}\\nuseState{[forceScreenshot, setForceScreenshot](false)}\\nuseState{[isScreenshot, setIsScreenshot](false)}\\nuseEffect{}\\nuseState{[conditionNotNull, setConditionNotNull](false)}\\nuseState{[sourceOptions, setSourceOptions]([])}\\nuseState{[dashboardOptions, setDashboardOptions]([])}\\nuseState{[chartOptions, setChartOptions]([])}\\nuseState{[validationStatus, setValidationStatus]({\\n        [Sections.General]: {\\n            hasErrors: false,\\n            name: TRANSLATIONS.GENERAL_TITLE,\\n            errors: [],\\n        },\\n        [Sections.Content]: {\\n            hasErrors: false,\\n            name: isReport\\n                ? TRANSLATIONS.REPORT_CONTENTS_TITLE\\n                : TRANSLATIONS.ALERT_CONTENTS_TITLE,\\n            errors: [],\\n        },\\n        [Sections.Alert]: {\\n            hasErrors: false,\\n            name: TRANSLATIONS.ALERT_CONDITION_TITLE,\\n            errors: [],\\n        },\\n        [Sections.Schedule]: {\\n            hasErrors: false,\\n            name: TRANSLATIONS.SCHEDULE_TITLE,\\n            errors: [],\\n        },\\n        [Sections.Notification]: {\\n            hasErrors: false,\\n            name: TRANSLATIONS.NOTIFICATION_TITLE,\\n            errors: [],\\n        },\\n    })}\\nuseState{[errorTooltipMessage, setErrorTooltipMessage]('')}\\nuseState{[chartVizType, setChartVizType]('')}\\nuseState{[notificationAddState, setNotificationAddState]('active')}\\nuseState{[notificationSettings, setNotificationSettings]([])}\\nuseState{[emailSubject, setEmailSubject]('')}\\nuseState{[emailError, setEmailError](false)}\\nuseSelector{{ ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT, ALERT_REPORTS_DEFAULT_CRON_VALUE, ALERT_REPORTS_DEFAULT_RETENTION, }}\\nuseSingleViewResource{{ state: { loading, resource, error: fetchError }, fetchResource, createResource, updateResource, clearError, }}\\nuseMemo{loadOwnerOptions}\\nuseCallback{getSourceData}\\nuseMemo{loadSourceOptions}\\nuseEffect{}\\nuseMemo{loadDashboardOptions}\\nuseCallback{getChartData}\\nuseEffect{}\\nuseMemo{loadChartOptions}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{allowedNotificationMethodsCount}\", () => [useSelector, useCommonConf, useSelector, useSingleViewResource]);const _default =\nwithToasts(AlertReportModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TIMEOUT_MIN, \"TIMEOUT_MIN\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(TEXT_BASED_VISUALIZATION_TYPES, \"TEXT_BASED_VISUALIZATION_TYPES\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_WORKING_TIMEOUT, \"DEFAULT_WORKING_TIMEOUT\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_CRON_VALUE, \"DEFAULT_CRON_VALUE\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_RETENTION, \"DEFAULT_RETENTION\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_NOTIFICATION_METHODS, \"DEFAULT_NOTIFICATION_METHODS\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_NOTIFICATION_FORMAT, \"DEFAULT_NOTIFICATION_FORMAT\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(CONDITIONS, \"CONDITIONS\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(RETENTION_OPTIONS, \"RETENTION_OPTIONS\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(CONTENT_TYPE_OPTIONS, \"CONTENT_TYPE_OPTIONS\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(FORMAT_OPTIONS, \"FORMAT_OPTIONS\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(noMarginBottom, \"noMarginBottom\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledModal, \"StyledModal\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledSwitchContainer, \"StyledSwitchContainer\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledInputContainer, \"StyledInputContainer\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledCheckbox, \"StyledCheckbox\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledTooltip, \"StyledTooltip\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledNotificationAddButton, \"StyledNotificationAddButton\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledNotificationMethodWrapper, \"StyledNotificationMethodWrapper\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(inputSpacer, \"inputSpacer\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(TRANSLATIONS, \"TRANSLATIONS\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(NotificationMethodAdd, \"NotificationMethodAdd\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(AlertReportModal, \"AlertReportModal\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/features/alerts/AlertReportModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useEffect","useMemo","useCallback","css","isFeatureEnabled","FeatureFlag","styled","SupersetClient","t","rison","useSingleViewResource","InputNumber","Switch","Modal","Collapse","TimezoneSelector","propertyComparator","withToasts","AntdCheckbox","AsyncSelect","Select","TextAreaControl","useCommonConf","InfoTooltipWithTrigger","NotificationMethodOption","Sections","useSelector","NumberInput","AlertReportCronScheduler","NotificationMethod","ValidatedPanelHeader","StyledPanel","buildErrorTooltipMessage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TIMEOUT_MIN","TEXT_BASED_VISUALIZATION_TYPES","DEFAULT_WORKING_TIMEOUT","DEFAULT_CRON_VALUE","DEFAULT_RETENTION","DEFAULT_NOTIFICATION_METHODS","Email","DEFAULT_NOTIFICATION_FORMAT","CONDITIONS","label","value","RETENTION_OPTIONS","CONTENT_TYPE_OPTIONS","FORMAT_OPTIONS","pdf","png","csv","txt","noMarginBottom","StyledModal","theme","gridUnit","StyledSwitchContainer","div","StyledInputContainer","colors","grayscale","base","typography","sizes","s","error","light1","light2","StyledCheckbox","StyledTooltip","StyledNotificationAddButton","primary","dark1","StyledNotificationMethodWrapper","inputSpacer","TRANSLATIONS","GENERAL_TITLE","ALERT_CONDITION_TITLE","ALERT_CONTENTS_TITLE","REPORT_CONTENTS_TITLE","SCHEDULE_TITLE","NOTIFICATION_TITLE","NAME_ERROR_TEXT","OWNERS_ERROR_TEXT","CONTENT_ERROR_TEXT","DATABASE_ERROR_TEXT","SQL_ERROR_TEXT","ALERT_CONDITION_ERROR_TEXT","CRONTAB_ERROR_TEXT","WORKING_TIMEOUT_ERROR_TEXT","RECIPIENTS_ERROR_TEXT","EMAIL_SUBJECT_ERROR_TEXT","ERROR_TOOLTIP_MESSAGE","NotificationMethodAdd","status","onClick","checkStatus","className","children","AlertReportModal","addDangerToast","onAdd","onHide","show","alert","isReport","addSuccessToast","_currentAlert$databas2","_currentAlert$databas3","_currentAlert$validat5","_currentAlert$validat6","_currentAlert$chart4","_currentAlert$chart5","_currentAlert$dashboa4","_currentAlert$dashboa5","currentUser","state","user","conf","allowedNotificationMethods","ALERT_REPORTS_NOTIFICATION_METHODS","disableSave","setDisableSave","currentAlert","setCurrentAlert","isHidden","setIsHidden","contentType","setContentType","reportFormat","setReportFormat","forceScreenshot","setForceScreenshot","isScreenshot","setIsScreenshot","conditionNotNull","setConditionNotNull","sourceOptions","setSourceOptions","dashboardOptions","setDashboardOptions","chartOptions","setChartOptions","validationStatus","setValidationStatus","General","hasErrors","name","errors","Content","Alert","Schedule","Notification","errorTooltipMessage","setErrorTooltipMessage","updateValidationStatus","section","currentValidationData","length","chartVizType","setChartVizType","reportOrAlert","isEditMode","formatOptionEnabled","AlertsAttachReports","notificationAddState","setNotificationAddState","notificationSettings","setNotificationSettings","emailSubject","setEmailSubject","emailError","setEmailError","onNotificationAdd","recipients","options","filter","option","reduce","accum","setting","method","allowedNotificationMethodsCount","ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT","ALERT_REPORTS_DEFAULT_CRON_VALUE","ALERT_REPORTS_DEFAULT_RETENTION","_state$common","_conf$ALERT_REPORTS_D","_conf$ALERT_REPORTS_D2","_conf$ALERT_REPORTS_D3","common","defaultAlert","active","creation_method","crontab","log_retention","working_timeout","owners","sql","email_subject","validator_config_json","validator_type","force_screenshot","grace_period","undefined","updateNotificationSetting","index","settings","_","idx","removeNotificationSetting","slice","splice","loading","resource","fetchError","fetchResource","createResource","updateResource","clearError","hide","onSave","_currentAlert$chart","_currentAlert$dashboa","_currentAlert$databas","forEach","push","recipient_config_json","target","type","shouldEnableForceScreenshot","data","chart","dashboard","custom_width","database","map","owner","id","report_format","context_markdown","update_id","created_by","last_eval_dttm","last_state","last_value","last_value_row_json","then","response","loadOwnerOptions","input","page","pageSize","query","encode","page_size","get","endpoint","json","result","item","text","totalCount","count","getSourceData","db","source","updateAlertState","currentAlertData","loadSourceOptions","list","databaseLabel","loadDashboardOptions","encode_uri","getDashboardData","dash","getChartData","chartData","noChartLabel","loadChartOptions","getChartVisualizationType","viz_type","onInputChange","event","parsedValue","parseInt","updateEmailSubject","onCustomWidthChange","onTimeoutVerifyChange","Math","max","onSQLChange","onOwnersChange","onSourceChange","onDashboardChange","onChartChange","onActiveSwitch","checked","onConditionChange","op","_currentAlert$validat","config","threshold","onThresholdChange","_currentAlert$validat2","onLogRetentionChange","retention","onTimezoneChange","timezone","onContentTypeChange","onFormatChange","onForceScreenshotChange","checkNotificationSettings","hasInfo","_setting$recipients","validateGeneralSection","_currentAlert$name","_currentAlert$owners","validateContentSection","validateAlertSection","_currentAlert$sql","_currentAlert$validat3","_currentAlert$validat4","validateScheduleSection","_currentAlert$crontab","validateNotificationSection","validateAll","enforceValidation","sections","some","tooltip","userId","firstName","lastName","JSON","parse","validatorConfig","slice_name","dashboard_title","database_name","first_name","last_name","currentAlertSafe","nm","includes","toLowerCase","getTitleText","titleText","_currentAlert$chart2","_currentAlert$chart3","_currentAlert$dashboa2","_currentAlert$dashboa3","handleErrorUpdate","hasError","responsive","disablePrimaryButton","primaryTooltipMessage","onHandledPrimaryAction","primaryButtonName","width","centered","title","expandIconPosition","defaultActiveKey","accordion","header","subtitle","validateCheckStatus","testId","placeholder","onChange","ariaLabel","allowClear","mode","description","defaultChecked","language","offerEditInModal","minLines","maxLines","readOnly","initialValue","disabled","key","Object","values","min","newVal","minWidth","sortComparator","timeUnit","notificationSetting","i","onUpdate","onRemove","defaultSubject","setErrorSubject","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/features/alerts/AlertReportModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ChangeEvent,\n  FunctionComponent,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  ReactNode,\n} from 'react';\n\nimport {\n  css,\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport { InputNumber } from 'src/components/Input';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport Collapse from 'src/components/Collapse';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Owner from 'src/types/Owner';\nimport { AntdCheckbox, AsyncSelect, Select } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  AlertObject,\n  ChartObject,\n  DashboardObject,\n  DatabaseObject,\n  MetaObject,\n  Operator,\n  Recipient,\n  AlertsReportsConfig,\n  ValidationObject,\n  Sections,\n} from 'src/features/alerts/types';\nimport { useSelector } from 'react-redux';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport NumberInput from './components/NumberInput';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\nimport ValidatedPanelHeader from './components/ValidatedPanelHeader';\nimport StyledPanel from './components/StyledPanel';\nimport { buildErrorTooltipMessage } from './buildErrorTooltipMessage';\n\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  'pivot_table_v2',\n  'table',\n  'paired_ttest',\n];\n\ntype SelectValue = {\n  value: string;\n  label: string;\n};\n\nexport interface AlertReportModalProps {\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  alert?: AlertObject | null;\n  isReport?: boolean;\n  onAdd?: (alert?: AlertObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 0 * * *'; // every day\nconst DEFAULT_RETENTION = 90;\n\nconst DEFAULT_NOTIFICATION_METHODS: NotificationMethodOption[] = [\n  NotificationMethodOption.Email,\n];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n  {\n    label: t('< (Smaller than)'),\n    value: '<',\n  },\n  {\n    label: t('> (Larger than)'),\n    value: '>',\n  },\n  {\n    label: t('<= (Smaller or equal)'),\n    value: '<=',\n  },\n  {\n    label: t('>= (Larger or equal)'),\n    value: '>=',\n  },\n  {\n    label: t('== (Is equal)'),\n    value: '==',\n  },\n  {\n    label: t('!= (Is not equal)'),\n    value: '!=',\n  },\n  {\n    label: t('Not null'),\n    value: 'not null',\n  },\n];\n\nconst RETENTION_OPTIONS = [\n  {\n    label: t('None'),\n    value: 0,\n  },\n  {\n    label: t('30 days'),\n    value: 30,\n  },\n  {\n    label: t('60 days'),\n    value: 60,\n  },\n  {\n    label: t('90 days'),\n    value: 90,\n  },\n];\n\nconst CONTENT_TYPE_OPTIONS = [\n  {\n    label: t('Dashboard'),\n    value: 'dashboard',\n  },\n  {\n    label: t('Chart'),\n    value: 'chart',\n  },\n];\nconst FORMAT_OPTIONS = {\n  pdf: {\n    label: t('Send as PDF'),\n    value: 'PDF',\n  },\n  png: {\n    label: t('Send as PNG'),\n    value: 'PNG',\n  },\n  csv: {\n    label: t('Send as CSV'),\n    value: 'CSV',\n  },\n  txt: {\n    label: t('Send as text'),\n    value: 'TEXT',\n  },\n};\n\n// Apply to final text input components of each collapse panel\nconst noMarginBottom = css`\n  margin-bottom: 0;\n`;\n\n/*\nHeight of modal body defined here, total width defined at component invocation as antd prop.\n */\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    height: 720px;\n  }\n\n  .control-label {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .ant-collapse > .ant-collapse-item {\n    border-bottom: none;\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n  }\n`;\n\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\n\nexport const StyledInputContainer = styled.div`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-top: 0px;\n    margin-bottom: ${theme.gridUnit * 4}px;\n\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type='number'] {\n      -moz-appearance: textfield;\n    }\n\n    .helper {\n      display: block;\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      padding: ${theme.gridUnit}px 0;\n      text-align: left;\n    }\n\n    .required {\n      margin-left: ${theme.gridUnit / 2}px;\n      color: ${theme.colors.error.base};\n    }\n\n    .input-container {\n      display: flex;\n      align-items: center;\n\n      > div {\n        width: 100%;\n      }\n\n      label {\n        display: flex;\n        margin-right: ${theme.gridUnit * 2}px;\n      }\n\n      i {\n        margin: 0 ${theme.gridUnit}px;\n      }\n    }\n\n    input,\n    textarea {\n      flex: 1 1 auto;\n    }\n\n    input[disabled] {\n      color: ${theme.colors.grayscale.base};\n    }\n\n    textarea {\n      height: 300px;\n      resize: none;\n    }\n\n    input::placeholder,\n    textarea::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    textarea,\n    input[type='text'],\n    input[type='number'] {\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n      border-style: none;\n      border: 1px solid ${theme.colors.grayscale.light2};\n      border-radius: ${theme.gridUnit}px;\n\n      &[name='description'] {\n        flex: 1 1 auto;\n      }\n    }\n\n    .input-label {\n      margin-left: 10px;\n    }\n  `}\n`;\n\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-top: ${({ theme }) => theme.gridUnit * 0}px;\n`;\n\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\n\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.primary.dark1};\n    cursor: pointer;\n\n    i {\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n\n    &.disabled {\n      color: ${theme.colors.grayscale.light1};\n      cursor: default;\n    }\n  `}\n`;\n\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\n\nconst inputSpacer = (theme: SupersetTheme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\n\ntype NotificationAddStatus = 'active' | 'disabled' | 'hidden';\n\ninterface NotificationMethodAddProps {\n  status: NotificationAddStatus;\n  onClick: () => void;\n}\n\nexport const TRANSLATIONS = {\n  // Panel titles\n  GENERAL_TITLE: t('General information'),\n  ALERT_CONDITION_TITLE: t('Alert condition'),\n  ALERT_CONTENTS_TITLE: t('Alert contents'),\n  REPORT_CONTENTS_TITLE: t('Report contents'),\n  SCHEDULE_TITLE: t('Schedule'),\n  NOTIFICATION_TITLE: t('Notification method'),\n  // Error text\n  NAME_ERROR_TEXT: t('name'),\n  OWNERS_ERROR_TEXT: t('owners'),\n  CONTENT_ERROR_TEXT: t('content type'),\n  DATABASE_ERROR_TEXT: t('database'),\n  SQL_ERROR_TEXT: t('sql'),\n  ALERT_CONDITION_ERROR_TEXT: t('alert condition'),\n  CRONTAB_ERROR_TEXT: t('crontab'),\n  WORKING_TIMEOUT_ERROR_TEXT: t('working timeout'),\n  RECIPIENTS_ERROR_TEXT: t('recipients'),\n  EMAIL_SUBJECT_ERROR_TEXT: t('email subject'),\n  ERROR_TOOLTIP_MESSAGE: t(\n    'Not all required fields are complete. Please provide the following:',\n  ),\n};\n\nconst NotificationMethodAdd: FunctionComponent<NotificationMethodAddProps> = ({\n  status = 'active',\n  onClick,\n}) => {\n  if (status === 'hidden') {\n    return null;\n  }\n\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n\n  return (\n    <StyledNotificationAddButton className={status} onClick={checkStatus}>\n      <i className=\"fa fa-plus\" />{' '}\n      {status === 'active'\n        ? t('Add another notification method')\n        : t('Add delivery method')}\n    </StyledNotificationAddButton>\n  );\n};\n\nconst AlertReportModal: FunctionComponent<AlertReportModalProps> = ({\n  addDangerToast,\n  onAdd,\n  onHide,\n  show,\n  alert = null,\n  isReport = false,\n  addSuccessToast,\n}) => {\n  const currentUser = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  // Check config for alternate notification methods setting\n  const conf = useCommonConf();\n  const allowedNotificationMethods: NotificationMethodOption[] =\n    conf?.ALERT_REPORTS_NOTIFICATION_METHODS || DEFAULT_NOTIFICATION_METHODS;\n\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n\n  const [currentAlert, setCurrentAlert] =\n    useState<Partial<AlertObject> | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [contentType, setContentType] = useState<string>('dashboard');\n  const [reportFormat, setReportFormat] = useState<string>(\n    DEFAULT_NOTIFICATION_FORMAT,\n  );\n  const [forceScreenshot, setForceScreenshot] = useState<boolean>(false);\n\n  const [isScreenshot, setIsScreenshot] = useState<boolean>(false);\n  useEffect(() => {\n    setIsScreenshot(reportFormat === 'PNG');\n  }, [reportFormat]);\n\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState<boolean>(false);\n  const [sourceOptions, setSourceOptions] = useState<MetaObject[]>([]);\n  const [dashboardOptions, setDashboardOptions] = useState<MetaObject[]>([]);\n  const [chartOptions, setChartOptions] = useState<MetaObject[]>([]);\n  // Validation\n  const [validationStatus, setValidationStatus] = useState<ValidationObject>({\n    [Sections.General]: {\n      hasErrors: false,\n      name: TRANSLATIONS.GENERAL_TITLE,\n      errors: [],\n    },\n    [Sections.Content]: {\n      hasErrors: false,\n      name: isReport\n        ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n        : TRANSLATIONS.ALERT_CONTENTS_TITLE,\n      errors: [],\n    },\n    [Sections.Alert]: {\n      hasErrors: false,\n      name: TRANSLATIONS.ALERT_CONDITION_TITLE,\n      errors: [],\n    },\n    [Sections.Schedule]: {\n      hasErrors: false,\n      name: TRANSLATIONS.SCHEDULE_TITLE,\n      errors: [],\n    },\n    [Sections.Notification]: {\n      hasErrors: false,\n      name: TRANSLATIONS.NOTIFICATION_TITLE,\n      errors: [],\n    },\n  });\n  const [errorTooltipMessage, setErrorTooltipMessage] = useState<ReactNode>('');\n\n  const updateValidationStatus = (section: Sections, errors: string[]) => {\n    setValidationStatus(currentValidationData => ({\n      ...currentValidationData,\n      [section]: {\n        hasErrors: errors.length > 0,\n        name: currentValidationData[section].name,\n        errors,\n      },\n    }));\n  };\n\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState<string>('');\n\n  const reportOrAlert = isReport ? 'report' : 'alert';\n  const isEditMode = alert !== null;\n  const formatOptionEnabled =\n    isFeatureEnabled(FeatureFlag.AlertsAttachReports) || isReport;\n\n  const [notificationAddState, setNotificationAddState] =\n    useState<NotificationAddStatus>('active');\n\n  const [notificationSettings, setNotificationSettings] = useState<\n    NotificationSetting[]\n  >([]);\n  const [emailSubject, setEmailSubject] = useState<string>('');\n  const [emailError, setEmailError] = useState(false);\n\n  const onNotificationAdd = () => {\n    setNotificationSettings([\n      ...notificationSettings,\n      {\n        recipients: '',\n        // options shown in the newly added notification method\n        options: allowedNotificationMethods.filter(\n          // are filtered such that\n          option =>\n            // options are not included\n            !notificationSettings.reduce(\n              // when it exists in previous notificationSettings\n              (accum, setting) => accum || option === setting.method,\n              false,\n            ),\n        ),\n      },\n    ]);\n\n    setNotificationAddState(\n      notificationSettings.length === allowedNotificationMethodsCount\n        ? 'hidden'\n        : 'disabled',\n    );\n  };\n\n  const {\n    ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    ALERT_REPORTS_DEFAULT_RETENTION,\n  } = useSelector<any, AlertsReportsConfig>(state => {\n    const conf = state.common?.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT:\n        conf?.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT ?? DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE:\n        conf?.ALERT_REPORTS_DEFAULT_CRON_VALUE ?? DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION:\n        conf?.ALERT_REPORTS_DEFAULT_RETENTION ?? DEFAULT_RETENTION,\n    };\n  });\n\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    email_subject: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined,\n  };\n\n  const updateNotificationSetting = (\n    index: number,\n    setting: NotificationSetting,\n  ) => {\n    const settings: NotificationSetting[] = [...notificationSettings];\n    settings[index] = setting;\n\n    // if you've changed notification method -> remove trailing methods\n    if (notificationSettings[index].method !== setting.method) {\n      notificationSettings[index] = setting;\n\n      setNotificationSettings(\n        notificationSettings.filter((_, idx) => idx <= index),\n      );\n\n      if (notificationSettings.length - 1 > index) {\n        setNotificationAddState('active');\n      }\n\n      if (setting.method !== undefined && notificationAddState !== 'hidden') {\n        setNotificationAddState('active');\n      }\n    } else {\n      setNotificationSettings(settings);\n    }\n  };\n\n  const removeNotificationSetting = (index: number) => {\n    const settings = notificationSettings.slice();\n\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n\n  // Alert fetch logic\n  const {\n    state: { loading, resource, error: fetchError },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<AlertObject>('report', t('report'), addDangerToast);\n\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n\n  const onSave = () => {\n    // Notification Settings\n    const recipients: Recipient[] = [];\n\n    notificationSettings.forEach(setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n          },\n          type: setting.method,\n        });\n      }\n    });\n\n    const shouldEnableForceScreenshot = contentType === 'chart' && !isReport;\n    const data: any = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull\n        ? {}\n        : currentAlert?.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert?.chart?.value : null,\n      dashboard:\n        contentType === 'dashboard' ? currentAlert?.dashboard?.value : null,\n      custom_width: isScreenshot ? currentAlert?.custom_width : undefined,\n      database: currentAlert?.database?.value,\n      owners: (currentAlert?.owners || []).map(\n        owner => (owner as MetaObject).value || owner.id,\n      ),\n      recipients,\n      report_format: reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n    };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n\n    data.context_markdown = 'string';\n\n    if (isEditMode) {\n      // Edit\n      if (currentAlert?.id) {\n        const update_id = currentAlert.id;\n\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n\n          addSuccessToast(t('%s updated', data.type));\n\n          if (onAdd) {\n            onAdd();\n          }\n\n          hide();\n        });\n      }\n    } else if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n\n        addSuccessToast(t('%s updated', data.type));\n\n        if (onAdd) {\n          onAdd(response);\n        }\n\n        hide();\n      });\n    }\n  };\n\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/created_by?q=${query}`,\n        }).then(response => ({\n          data: response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          ),\n          totalCount: response.json.count,\n        }));\n      },\n    [],\n  );\n\n  const getSourceData = useCallback(\n    (db?: MetaObject) => {\n      const database = db || currentAlert?.database;\n\n      if (!database || database.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through source options to find the selected option\n      sourceOptions.forEach(source => {\n        if (source.value === database.value || source.value === database.id) {\n          result = source;\n        }\n      });\n\n      return result;\n    },\n    [currentAlert?.database, sourceOptions],\n  );\n\n  // Updating alert/report state\n  const updateAlertState = (name: string, value: any) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value,\n    }));\n  };\n\n  const loadSourceOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/database?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setSourceOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const databaseLabel = currentAlert?.database && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n\n  const loadDashboardOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/dashboard?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setDashboardOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getDashboardData = (db?: MetaObject) => {\n    const dashboard = db || currentAlert?.dashboard;\n\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach(dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n\n    return result;\n  };\n\n  const getChartData = useCallback(\n    (chartData?: MetaObject) => {\n      const chart = chartData || currentAlert?.chart;\n\n      if (!chart || chart.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through chart options to find the selected option\n      chartOptions.forEach(slice => {\n        if (slice.value === chart.value || slice.value === chart.id) {\n          result = slice;\n        }\n      });\n\n      return result;\n    },\n    [chartOptions, currentAlert?.chart],\n  );\n\n  const noChartLabel = currentAlert?.chart && !currentAlert?.chart.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n\n  const loadChartOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/chart?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n\n          setChartOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getChartVisualizationType = (chart: SelectValue) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${chart.value}`,\n    }).then(response => setChartVizType(response.json.result.viz_type));\n\n  // Handle input/textarea updates\n  const onInputChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const {\n      target: { type, value, name },\n    } = event;\n    const parsedValue = type === 'number' ? parseInt(value, 10) || null : value;\n\n    updateAlertState(name, parsedValue);\n\n    if (name === 'name') {\n      updateEmailSubject();\n    }\n  };\n\n  const onCustomWidthChange = (value: number | null | undefined) => {\n    updateAlertState('custom_width', value);\n  };\n\n  const onTimeoutVerifyChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const value = +target.value;\n\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, undefined);\n    } else {\n      updateAlertState(\n        target.name,\n        value ? Math.max(value, TIMEOUT_MIN) : value,\n      );\n    }\n  };\n\n  const onSQLChange = (value: string) => {\n    updateAlertState('sql', value || '');\n  };\n\n  const onOwnersChange = (value: Array<SelectValue>) => {\n    updateAlertState('owners', value || []);\n  };\n\n  const onSourceChange = (value: Array<SelectValue>) => {\n    updateAlertState('database', value || []);\n  };\n\n  const onDashboardChange = (dashboard: SelectValue) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n\n  const onChartChange = (chart: SelectValue) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n\n  const onActiveSwitch = (checked: boolean) => {\n    updateAlertState('active', checked);\n  };\n\n  const onConditionChange = (op: Operator) => {\n    setConditionNotNull(op === 'not null');\n\n    const config = {\n      op,\n      threshold: currentAlert\n        ? currentAlert.validator_config_json?.threshold\n        : undefined,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onThresholdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    const config = {\n      op: currentAlert ? currentAlert.validator_config_json?.op : undefined,\n      threshold: target.value,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onLogRetentionChange = (retention: number) => {\n    updateAlertState('log_retention', retention);\n  };\n\n  const onTimezoneChange = (timezone: string) => {\n    updateAlertState('timezone', timezone);\n  };\n\n  const onContentTypeChange = (value: string) => {\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    setContentType(value);\n  };\n\n  const onFormatChange = (value: string) => {\n    setReportFormat(value);\n  };\n\n  const onForceScreenshotChange = (event: any) => {\n    setForceScreenshot(event.target.checked);\n  };\n\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n\n    let hasInfo = false;\n\n    notificationSettings.forEach(setting => {\n      if (!!setting.method && setting.recipients?.length) {\n        hasInfo = true;\n      }\n    });\n\n    return hasInfo;\n  };\n\n  const validateGeneralSection = () => {\n    const errors = [];\n    if (!currentAlert?.name?.length) {\n      errors.push(TRANSLATIONS.NAME_ERROR_TEXT);\n    }\n    if (!currentAlert?.owners?.length) {\n      errors.push(TRANSLATIONS.OWNERS_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.General, errors);\n  };\n  const validateContentSection = () => {\n    const errors = [];\n    if (\n      !(\n        (contentType === 'dashboard' && !!currentAlert?.dashboard) ||\n        (contentType === 'chart' && !!currentAlert?.chart)\n      )\n    ) {\n      errors.push(TRANSLATIONS.CONTENT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Content, errors);\n  };\n  const validateAlertSection = () => {\n    const errors = [];\n    if (!currentAlert?.database) {\n      errors.push(TRANSLATIONS.DATABASE_ERROR_TEXT);\n    }\n    if (!currentAlert?.sql?.length) {\n      errors.push(TRANSLATIONS.SQL_ERROR_TEXT);\n    }\n    if (\n      !(\n        (conditionNotNull || !!currentAlert?.validator_config_json?.op) &&\n        (conditionNotNull ||\n          currentAlert?.validator_config_json?.threshold !== undefined)\n      )\n    ) {\n      errors.push(TRANSLATIONS.ALERT_CONDITION_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Alert, errors);\n  };\n\n  const validateScheduleSection = () => {\n    const errors = [];\n    if (!currentAlert?.crontab?.length) {\n      errors.push(TRANSLATIONS.CRONTAB_ERROR_TEXT);\n    }\n    if (!currentAlert?.working_timeout) {\n      errors.push(TRANSLATIONS.WORKING_TIMEOUT_ERROR_TEXT);\n    }\n\n    updateValidationStatus(Sections.Schedule, errors);\n  };\n\n  const validateNotificationSection = () => {\n    const hasErrors = !checkNotificationSettings();\n    const errors = hasErrors ? [TRANSLATIONS.RECIPIENTS_ERROR_TEXT] : [];\n\n    if (emailError) {\n      errors.push(TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT);\n    }\n\n    updateValidationStatus(Sections.Notification, errors);\n  };\n\n  const validateAll = () => {\n    validateGeneralSection();\n    validateContentSection();\n    if (!isReport) validateAlertSection();\n    validateScheduleSection();\n    validateNotificationSection();\n  };\n\n  const enforceValidation = () => {\n    const sections = [\n      Sections.General,\n      Sections.Content,\n      isReport ? undefined : Sections.Alert,\n      Sections.Schedule,\n      Sections.Notification,\n    ];\n\n    const hasErrors = sections.some(\n      section => section && validationStatus[section].hasErrors,\n    );\n    const tooltip = hasErrors ? buildErrorTooltipMessage(validationStatus) : '';\n    setErrorTooltipMessage(tooltip);\n    setDisableSave(hasErrors);\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentAlert?.id || alert?.id !== currentAlert.id || (isHidden && show))\n    ) {\n      if (alert?.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentAlert || currentAlert.id || (isHidden && show))\n    ) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser\n          ? [\n              {\n                value: currentUser.userId,\n                label: `${currentUser.firstName} ${currentUser.lastName}`,\n              },\n            ]\n          : [],\n      });\n      setNotificationSettings([\n        {\n          recipients: '',\n          options: allowedNotificationMethods,\n          method: NotificationMethodOption.Email,\n        },\n      ]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map(setting => {\n        const config =\n          typeof setting.recipient_config_json === 'string'\n            ? JSON.parse(setting.recipient_config_json)\n            : {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods,\n        };\n      });\n\n      setNotificationSettings(settings);\n      setNotificationAddState(\n        settings.length === allowedNotificationMethods.length\n          ? 'hidden'\n          : 'active',\n      );\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(resource.report_format || DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig =\n        typeof resource.validator_config_json === 'string'\n          ? JSON.parse(resource.validator_config_json)\n          : resource.validator_config_json;\n\n      setConditionNotNull(resource.validator_type === 'not null');\n\n      if (resource.chart) {\n        setChartVizType((resource.chart as ChartObject).viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart\n          ? getChartData(resource.chart) || {\n              value: (resource.chart as ChartObject).id,\n              label: (resource.chart as ChartObject).slice_name,\n            }\n          : undefined,\n        dashboard: resource.dashboard\n          ? getDashboardData(resource.dashboard) || {\n              value: (resource.dashboard as DashboardObject).id,\n              label: (resource.dashboard as DashboardObject).dashboard_title,\n            }\n          : undefined,\n        database: resource.database\n          ? getSourceData(resource.database) || {\n              value: (resource.database as DatabaseObject).id,\n              label: (resource.database as DatabaseObject).database_name,\n            }\n          : undefined,\n        owners: (alert?.owners || []).map(owner => ({\n          value: (owner as MetaObject).value || owner.id,\n          label:\n            (owner as MetaObject).label ||\n            `${(owner as Owner).first_name} ${(owner as Owner).last_name}`,\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json:\n          resource.validator_type === 'not null'\n            ? {\n                op: 'not null',\n              }\n            : validatorConfig,\n      });\n    }\n  }, [resource]);\n\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validateAll();\n    updateEmailSubject();\n  }, [\n    currentAlertSafe.name,\n    currentAlertSafe.owners,\n    currentAlertSafe.database,\n    currentAlertSafe.sql,\n    currentAlertSafe.validator_config_json,\n    currentAlertSafe.crontab,\n    currentAlertSafe.working_timeout,\n    currentAlertSafe.dashboard,\n    currentAlertSafe.chart,\n    contentType,\n    notificationSettings,\n    conditionNotNull,\n    emailError,\n  ]);\n  useEffect(() => {\n    enforceValidation();\n  }, [validationStatus]);\n\n  const allowedNotificationMethodsCount = useMemo(\n    () =>\n      allowedNotificationMethods.reduce((accum: string[], setting: string) => {\n        if (\n          accum.some(nm => nm.includes('slack')) &&\n          setting.toLowerCase().includes('slack')\n        ) {\n          return accum;\n        }\n        return [...accum, setting.toLowerCase()];\n      }, []).length,\n    [allowedNotificationMethods],\n  );\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  const getTitleText = () => {\n    let titleText;\n\n    switch (true) {\n      case isEditMode && isReport:\n        titleText = t('Edit Report');\n        break;\n      case isEditMode:\n        titleText = t('Edit Alert');\n        break;\n      case isReport:\n        titleText = t('Add Report');\n        break;\n      default:\n        titleText = t('Add Alert');\n        break;\n    }\n\n    return titleText;\n  };\n\n  const updateEmailSubject = () => {\n    if (contentType === 'chart') {\n      if (currentAlert?.name || currentAlert?.chart?.label) {\n        setEmailSubject(\n          `${currentAlert?.name}: ${currentAlert?.chart?.label || ''}`,\n        );\n      } else {\n        setEmailSubject('');\n      }\n    } else if (contentType === 'dashboard') {\n      if (currentAlert?.name || currentAlert?.dashboard?.label) {\n        setEmailSubject(\n          `${currentAlert?.name}: ${currentAlert?.dashboard?.label || ''}`,\n        );\n      } else {\n        setEmailSubject('');\n      }\n    } else {\n      setEmailSubject('');\n    }\n  };\n\n  const handleErrorUpdate = (hasError: boolean) => {\n    setEmailError(hasError);\n  };\n\n  return (\n    <StyledModal\n      className=\"no-content-padding\"\n      responsive\n      disablePrimaryButton={disableSave}\n      primaryTooltipMessage={errorTooltipMessage}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      show={show}\n      width=\"500px\"\n      centered\n      title={<h4 data-test=\"alert-report-modal-title\">{getTitleText()}</h4>}\n    >\n      <Collapse\n        expandIconPosition=\"right\"\n        defaultActiveKey=\"general\"\n        accordion\n        css={css`\n          border: 'none';\n        `}\n      >\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.GENERAL_TITLE}\n              subtitle={t(\n                'Set up basic details, such as name and description.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.General].hasErrors\n              }\n              testId=\"general-information-panel\"\n            />\n          }\n          key=\"general\"\n        >\n          <div className=\"header-section\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {isReport ? t('Report name') : t('Alert name')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={currentAlert ? currentAlert.name : ''}\n                  placeholder={\n                    isReport ? t('Enter report name') : t('Enter alert name')\n                  }\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Owners')}\n                <span className=\"required\">*</span>\n              </div>\n              <div data-test=\"owners-select\" className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Owners')}\n                  allowClear\n                  name=\"owners\"\n                  mode=\"multiple\"\n                  placeholder={t('Select owners')}\n                  value={\n                    (currentAlert?.owners as {\n                      label: string;\n                      value: number;\n                    }[]) || []\n                  }\n                  options={loadOwnerOptions}\n                  onChange={onOwnersChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">{t('Description')}</div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  value={currentAlert ? currentAlert.description || '' : ''}\n                  placeholder={t(\n                    'Include description to be sent with %s',\n                    reportOrAlert,\n                  )}\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledSwitchContainer>\n              <Switch\n                checked={currentAlert ? currentAlert.active : false}\n                defaultChecked\n                onChange={onActiveSwitch}\n              />\n              <div className=\"switch-label\">\n                {isReport ? t('Report is active') : t('Alert is active')}\n              </div>\n            </StyledSwitchContainer>\n          </div>\n        </StyledPanel>\n        {!isReport && (\n          <StyledPanel\n            header={\n              <ValidatedPanelHeader\n                title={TRANSLATIONS.ALERT_CONDITION_TITLE}\n                subtitle={t(\n                  'Define the database, SQL query, and triggering conditions for alert.',\n                )}\n                validateCheckStatus={\n                  !validationStatus[Sections.Alert].hasErrors\n                }\n                testId=\"alert-condition-panel\"\n              />\n            }\n            key=\"condition\"\n          >\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Database')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Database')}\n                  name=\"source\"\n                  placeholder={t('Select database')}\n                  value={\n                    currentAlert?.database?.label &&\n                    currentAlert?.database?.value\n                      ? {\n                          value: currentAlert.database.value,\n                          label: currentAlert.database.label,\n                        }\n                      : undefined\n                  }\n                  options={loadSourceOptions}\n                  onChange={onSourceChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('SQL Query')}\n                <StyledTooltip\n                  tooltip={t(\n                    'The result of this query must be a value capable of numeric interpretation e.g. 1, 1.0, or \"1\" (compatible with Python\\'s float() function).',\n                  )}\n                />\n                <span className=\"required\">*</span>\n              </div>\n              <TextAreaControl\n                name=\"sql\"\n                language=\"sql\"\n                offerEditInModal={false}\n                minLines={15}\n                maxLines={15}\n                onChange={onSQLChange}\n                readOnly={false}\n                initialValue={resource?.sql}\n                key={currentAlert?.id}\n              />\n            </StyledInputContainer>\n            <div className=\"inline-container wrap\">\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\" css={inputSpacer}>\n                  {t('Trigger Alert If...')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <Select\n                    ariaLabel={t('Condition')}\n                    onChange={onConditionChange}\n                    placeholder={t('Condition')}\n                    value={currentAlert?.validator_config_json?.op || undefined}\n                    options={CONDITIONS}\n                    css={inputSpacer}\n                  />\n                </div>\n              </StyledInputContainer>\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\">\n                  {t('Value')}{' '}\n                  {!conditionNotNull && <span className=\"required\">*</span>}\n                </div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"number\"\n                    name=\"threshold\"\n                    disabled={conditionNotNull}\n                    value={\n                      currentAlert?.validator_config_json?.threshold !==\n                        undefined && !conditionNotNull\n                        ? currentAlert.validator_config_json.threshold\n                        : ''\n                    }\n                    placeholder={t('Value')}\n                    onChange={onThresholdChange}\n                  />\n                </div>\n              </StyledInputContainer>\n            </div>\n          </StyledPanel>\n        )}\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={\n                isReport\n                  ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n                  : TRANSLATIONS.ALERT_CONTENTS_TITLE\n              }\n              subtitle={t('Customize data source, filters, and layout.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Content].hasErrors\n              }\n              testId=\"contents-panel\"\n            />\n          }\n          key=\"contents\"\n        >\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Content type')}\n              <span className=\"required\">*</span>\n            </div>\n            <Select\n              ariaLabel={t('Select content type')}\n              onChange={onContentTypeChange}\n              value={contentType}\n              options={CONTENT_TYPE_OPTIONS}\n              placeholder={t('Select content type')}\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            {contentType === 'chart' ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Select chart')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Chart')}\n                  name=\"chart\"\n                  value={\n                    currentAlert?.chart?.label && currentAlert?.chart?.value\n                      ? {\n                          value: currentAlert.chart.value,\n                          label: currentAlert.chart.label,\n                        }\n                      : undefined\n                  }\n                  options={loadChartOptions}\n                  onChange={onChartChange}\n                  placeholder={t('Select chart to use')}\n                />\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">\n                  {t('Select dashboard')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Dashboard')}\n                  name=\"dashboard\"\n                  value={\n                    currentAlert?.dashboard?.label &&\n                    currentAlert?.dashboard?.value\n                      ? {\n                          value: currentAlert.dashboard.value,\n                          label: currentAlert.dashboard.label,\n                        }\n                      : undefined\n                  }\n                  options={loadDashboardOptions}\n                  onChange={onDashboardChange}\n                  placeholder={t('Select dashboard to use')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          <StyledInputContainer\n            css={\n              ['PDF', 'TEXT', 'CSV'].includes(reportFormat) && noMarginBottom\n            }\n          >\n            {formatOptionEnabled && (\n              <>\n                <div className=\"control-label\">\n                  {t('Content format')}\n                  <span className=\"required\">*</span>\n                </div>\n                <Select\n                  ariaLabel={t('Select format')}\n                  onChange={onFormatChange}\n                  value={reportFormat}\n                  options={\n                    contentType === 'dashboard'\n                      ? ['pdf', 'png'].map(key => FORMAT_OPTIONS[key])\n                      : /* If chart is of text based viz type: show text\n                  format option */\n                        TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType)\n                        ? Object.values(FORMAT_OPTIONS)\n                        : ['pdf', 'png', 'csv'].map(key => FORMAT_OPTIONS[key])\n                  }\n                  placeholder={t('Select format')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          {isScreenshot && (\n            <StyledInputContainer\n              css={!isReport && contentType === 'chart' && noMarginBottom}\n            >\n              <div className=\"control-label\">{t('Screenshot width')}</div>\n              <div className=\"input-container\">\n                <InputNumber\n                  type=\"number\"\n                  name=\"custom_width\"\n                  value={currentAlert?.custom_width || undefined}\n                  min={600}\n                  max={2400}\n                  placeholder={t('Input custom width in pixels')}\n                  onChange={onCustomWidthChange}\n                />\n              </div>\n            </StyledInputContainer>\n          )}\n          {(isReport || contentType === 'dashboard') && (\n            <div className=\"inline-container\">\n              <StyledCheckbox\n                data-test=\"bypass-cache\"\n                className=\"checkbox\"\n                checked={forceScreenshot}\n                onChange={onForceScreenshotChange}\n              >\n                {t('Ignore cache when generating report')}\n              </StyledCheckbox>\n            </div>\n          )}\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.SCHEDULE_TITLE}\n              subtitle={t(\n                'Define delivery schedule, timezone, and frequency settings.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.Schedule].hasErrors\n              }\n              testId=\"schedule-panel\"\n            />\n          }\n          key=\"schedule\"\n        >\n          <AlertReportCronScheduler\n            value={currentAlert?.crontab || ''}\n            onChange={newVal => updateAlertState('crontab', newVal)}\n          />\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Timezone')} <span className=\"required\">*</span>\n            </div>\n            <TimezoneSelector\n              onTimezoneChange={onTimezoneChange}\n              timezone={currentAlert?.timezone}\n              minWidth=\"100%\"\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Log retention')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <Select\n                ariaLabel={t('Log retention')}\n                placeholder={t('Log retention')}\n                onChange={onLogRetentionChange}\n                value={currentAlert?.log_retention}\n                options={RETENTION_OPTIONS}\n                sortComparator={propertyComparator('value')}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer css={noMarginBottom}>\n            {isReport ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Working timeout')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"working_timeout\"\n                    value={currentAlert?.working_timeout || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">{t('Grace period')}</div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"grace_period\"\n                    value={currentAlert?.grace_period || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            )}\n          </StyledInputContainer>\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.NOTIFICATION_TITLE}\n              subtitle={t('Choose notification method and recipients.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Notification].hasErrors\n              }\n              testId=\"notification-method-panel\"\n            />\n          }\n          key=\"notification\"\n        >\n          {notificationSettings.map((notificationSetting, i) => (\n            <StyledNotificationMethodWrapper>\n              <NotificationMethod\n                setting={notificationSetting}\n                index={i}\n                key={`NotificationMethod-${i}`}\n                onUpdate={updateNotificationSetting}\n                onRemove={removeNotificationSetting}\n                onInputChange={onInputChange}\n                email_subject={currentAlert?.email_subject || ''}\n                defaultSubject={emailSubject || ''}\n                setErrorSubject={handleErrorUpdate}\n              />\n            </StyledNotificationMethodWrapper>\n          ))}\n          {\n            // Prohibit 'add notification method' button if only one present\n            allowedNotificationMethodsCount > notificationSettings.length && (\n              <NotificationMethodAdd\n                data-test=\"notification-add\"\n                status={notificationAddState}\n                onClick={onNotificationAdd}\n              />\n            )\n          }\n        </StyledPanel>\n      </Collapse>\n    </StyledModal>\n  );\n};\n\nexport default withToasts(AlertReportModal);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}