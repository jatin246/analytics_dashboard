{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { ActionCreators as UndoActionCreators } from 'redux-undo';\nimport rison from 'rison';\nimport {\n  ensureIsArray,\n  isFeatureEnabled,\n  FeatureFlag,\n  getLabelsColorMap,\n  SupersetClient,\n  t,\n  getClientErrorObject,\n  getCategoricalSchemeRegistry } from\n'@superset-ui/core';\nimport {\n  addChart,\n  removeChart,\n  refreshChart } from\n'src/components/Chart/chartAction';\nimport { chart as initChart } from 'src/components/Chart/chartReducer';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport {\n  SAVE_TYPE_OVERWRITE,\n  SAVE_TYPE_OVERWRITE_CONFIRMED } from\n'src/dashboard/util/constants';\nimport {\n  getCrossFiltersConfiguration,\n  isCrossFiltersEnabled } from\n'src/dashboard/util/crossFilters';\nimport {\n  addSuccessToast,\n  addWarningToast,\n  addDangerToast } from\n'src/components/MessageToasts/actions';\nimport serializeActiveFilterValues from 'src/dashboard/util/serializeActiveFilterValues';\nimport serializeFilterScopes from 'src/dashboard/util/serializeFilterScopes';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport { logEvent } from 'src/logger/actions';\nimport { LOG_ACTIONS_CONFIRM_OVERWRITE_DASHBOARD_METADATA } from 'src/logger/LogUtils';\nimport { UPDATE_COMPONENTS_PARENTS_LIST } from './dashboardLayout';\nimport {\n  saveChartConfiguration,\n  dashboardInfoChanged,\n  SAVE_CHART_CONFIG_COMPLETE } from\n'./dashboardInfo';\nimport { fetchDatasourceMetadata } from './datasources';\nimport { updateDirectPathToFilter } from './dashboardFilters';\nimport { SET_FILTER_CONFIG_COMPLETE } from './nativeFilters';\nimport getOverwriteItems from '../util/getOverwriteItems';\nimport {\n  applyColors,\n  isLabelsColorMapSynced,\n  getLabelsColorMapEntries,\n  getColorSchemeDomain,\n  getColorNamespace } from\n'../../utils/colorScheme';\n\nexport const SET_UNSAVED_CHANGES = 'SET_UNSAVED_CHANGES';\nexport function setUnsavedChanges(hasUnsavedChanges) {\n  return { type: SET_UNSAVED_CHANGES, payload: { hasUnsavedChanges } };\n}\n\nexport const ADD_SLICE = 'ADD_SLICE';\nexport function addSlice(slice) {\n  return { type: ADD_SLICE, slice };\n}\n\nexport const REMOVE_SLICE = 'REMOVE_SLICE';\nexport function removeSlice(sliceId) {\n  return { type: REMOVE_SLICE, sliceId };\n}\n\nexport const TOGGLE_FAVE_STAR = 'TOGGLE_FAVE_STAR';\nexport function toggleFaveStar(isStarred) {\n  return { type: TOGGLE_FAVE_STAR, isStarred };\n}\n\nexport function fetchFaveStar(id) {\n  return function fetchFaveStarThunk(dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/favorite_status/?q=${rison.encode([id])}`\n    }).\n    then(({ json }) => {var _json$result, _json$result$;\n      dispatch(toggleFaveStar(!!(json != null && (_json$result = json.result) != null && (_json$result$ = _json$result[0]) != null && _json$result$.value)));\n    }).\n    catch(() =>\n    dispatch(\n      addDangerToast(\n        t(\n          'There was an issue fetching the favorite status of this dashboard.'\n        )\n      )\n    )\n    );\n  };\n}\n\nexport function saveFaveStar(id, isStarred) {\n  return function saveFaveStarThunk(dispatch) {\n    const endpoint = `/api/v1/dashboard/${id}/favorites/`;\n    const apiCall = isStarred ?\n    SupersetClient.delete({\n      endpoint\n    }) :\n    SupersetClient.post({ endpoint });\n\n    return apiCall.\n    then(() => {\n      dispatch(toggleFaveStar(!isStarred));\n    }).\n    catch(() =>\n    dispatch(\n      addDangerToast(t('There was an issue favoriting this dashboard.'))\n    )\n    );\n  };\n}\n\nexport const TOGGLE_PUBLISHED = 'TOGGLE_PUBLISHED';\nexport function togglePublished(isPublished) {\n  return { type: TOGGLE_PUBLISHED, isPublished };\n}\n\nexport function savePublished(id, isPublished) {\n  return function savePublishedThunk(dispatch) {\n    return SupersetClient.put({\n      endpoint: `/api/v1/dashboard/${id}`,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        published: isPublished\n      })\n    }).\n    then(() => {\n      dispatch(\n        addSuccessToast(\n          isPublished ?\n          t('This dashboard is now published') :\n          t('This dashboard is now hidden')\n        )\n      );\n      dispatch(togglePublished(isPublished));\n    }).\n    catch(() => {\n      dispatch(\n        addDangerToast(\n          t('You do not have permissions to edit this dashboard.')\n        )\n      );\n    });\n  };\n}\n\nexport const TOGGLE_EXPAND_SLICE = 'TOGGLE_EXPAND_SLICE';\nexport function toggleExpandSlice(sliceId) {\n  return { type: TOGGLE_EXPAND_SLICE, sliceId };\n}\n\nexport const UPDATE_CSS = 'UPDATE_CSS';\nexport function updateCss(css) {\n  return { type: UPDATE_CSS, css };\n}\n\nexport const SET_EDIT_MODE = 'SET_EDIT_MODE';\nexport function setEditMode(editMode) {\n  return { type: SET_EDIT_MODE, editMode };\n}\n\nexport const ON_CHANGE = 'ON_CHANGE';\nexport function onChange() {\n  return { type: ON_CHANGE };\n}\n\nexport const ON_SAVE = 'ON_SAVE';\nexport function onSave(lastModifiedTime) {\n  return { type: ON_SAVE, lastModifiedTime };\n}\n\nexport const SET_REFRESH_FREQUENCY = 'SET_REFRESH_FREQUENCY';\nexport function setRefreshFrequency(refreshFrequency, isPersistent = false) {\n  return { type: SET_REFRESH_FREQUENCY, refreshFrequency, isPersistent };\n}\n\nexport function saveDashboardRequestSuccess(lastModifiedTime) {\n  return (dispatch) => {\n    dispatch(onSave(lastModifiedTime));\n    // clear layout undo history\n    dispatch(UndoActionCreators.clearHistory());\n  };\n}\n\nexport const SET_OVERRIDE_CONFIRM = 'SET_OVERRIDE_CONFIRM';\nexport function setOverrideConfirm(overwriteConfirmMetadata) {\n  return {\n    type: SET_OVERRIDE_CONFIRM,\n    overwriteConfirmMetadata\n  };\n}\n\nexport const SAVE_DASHBOARD_STARTED = 'SAVE_DASHBOARD_STARTED';\nexport function saveDashboardStarted() {\n  return { type: SAVE_DASHBOARD_STARTED };\n}\n\nexport const SAVE_DASHBOARD_FINISHED = 'SAVE_DASHBOARD_FINISHED';\nexport function saveDashboardFinished() {\n  return { type: SAVE_DASHBOARD_FINISHED };\n}\n\nexport function saveDashboardRequest(data, id, saveType) {\n  return (dispatch, getState) => {var _data$metadata, _data$metadata2, _data$metadata3, _data$metadata4, _data$metadata5, _data$metadata6, _data$metadata7, _data$metadata8, _data$metadata9;\n    dispatch({ type: UPDATE_COMPONENTS_PARENTS_LIST });\n    dispatch(saveDashboardStarted());\n\n    const { dashboardFilters, dashboardLayout } = getState();\n    const layout = dashboardLayout.present;\n    Object.values(dashboardFilters).forEach((filter) => {var _layout$componentId;\n      const { chartId } = filter;\n      const componentId = filter.directPathToFilter.slice().pop();\n      const directPathToFilter = (((_layout$componentId = layout[componentId]) == null ? void 0 : _layout$componentId.parents) || []).slice();\n      directPathToFilter.push(componentId);\n      dispatch(updateDirectPathToFilter(chartId, directPathToFilter));\n    });\n    // serialize selected values for each filter field, grouped by filter id\n    const serializedFilters = serializeActiveFilterValues(getActiveFilters());\n    // serialize filter scope for each filter field, grouped by filter id\n    const serializedFilterScopes = serializeFilterScopes(dashboardFilters);\n    const {\n      certified_by,\n      certification_details,\n      css,\n      dashboard_title,\n      owners,\n      roles,\n      slug\n    } = data;\n\n    const hasId = (item) => item.id !== undefined;\n    const metadataCrossFiltersEnabled = (_data$metadata = data.metadata) == null ? void 0 : _data$metadata.cross_filters_enabled;\n    // making sure the data is what the backend expects\n    const cleanedData = {\n      ...data,\n      certified_by: certified_by || '',\n      certification_details:\n      certified_by && certification_details ? certification_details : '',\n      css: css || '',\n      dashboard_title: dashboard_title || t('[ untitled dashboard ]'),\n      owners: ensureIsArray(owners).map((o) => hasId(o) ? o.id : o),\n      roles: !isFeatureEnabled(FeatureFlag.DashboardRbac) ?\n      undefined :\n      ensureIsArray(roles).map((r) => hasId(r) ? r.id : r),\n      slug: slug || null,\n      metadata: {\n        ...data.metadata,\n        color_namespace: getColorNamespace((_data$metadata2 = data.metadata) == null ? void 0 : _data$metadata2.color_namespace),\n        color_scheme: ((_data$metadata3 = data.metadata) == null ? void 0 : _data$metadata3.color_scheme) || '',\n        color_scheme_domain: ((_data$metadata4 = data.metadata) == null ? void 0 : _data$metadata4.color_scheme_domain) || [],\n        expanded_slices: ((_data$metadata5 = data.metadata) == null ? void 0 : _data$metadata5.expanded_slices) || {},\n        label_colors: ((_data$metadata6 = data.metadata) == null ? void 0 : _data$metadata6.label_colors) || {},\n        shared_label_colors: ((_data$metadata7 = data.metadata) == null ? void 0 : _data$metadata7.shared_label_colors) || {},\n        refresh_frequency: ((_data$metadata8 = data.metadata) == null ? void 0 : _data$metadata8.refresh_frequency) || 0,\n        timed_refresh_immune_slices:\n        ((_data$metadata9 = data.metadata) == null ? void 0 : _data$metadata9.timed_refresh_immune_slices) || [],\n        // cross-filters should be enabled by default\n        cross_filters_enabled: isCrossFiltersEnabled(\n          metadataCrossFiltersEnabled\n        )\n      }\n    };\n\n    const handleChartConfiguration = () => {\n      const {\n        dashboardLayout,\n        charts,\n        dashboardInfo: { metadata }\n      } = getState();\n      return getCrossFiltersConfiguration(\n        dashboardLayout.present,\n        metadata,\n        charts\n      );\n    };\n\n    const onCopySuccess = (response) => {\n      const lastModifiedTime = response.json.result.last_modified_time;\n      if (lastModifiedTime) {\n        dispatch(saveDashboardRequestSuccess(lastModifiedTime));\n      }\n      if (isFeatureEnabled(FeatureFlag.DashboardCrossFilters)) {\n        const { chartConfiguration, globalChartConfiguration } =\n        handleChartConfiguration();\n        dispatch(\n          saveChartConfiguration({\n            chartConfiguration,\n            globalChartConfiguration\n          })\n        );\n      }\n      dispatch(saveDashboardFinished());\n      dispatch(addSuccessToast(t('This dashboard was saved successfully.')));\n      return response;\n    };\n\n    const onUpdateSuccess = (response) => {\n      const updatedDashboard = response.json.result;\n      const lastModifiedTime = response.json.last_modified_time;\n      // syncing with the backend transformations of the metadata\n      if (updatedDashboard.json_metadata) {\n        const metadata = JSON.parse(updatedDashboard.json_metadata);\n        dispatch(\n          dashboardInfoChanged({\n            metadata\n          })\n        );\n        if (metadata.chart_configuration) {\n          dispatch({\n            type: SAVE_CHART_CONFIG_COMPLETE,\n            chartConfiguration: metadata.chart_configuration\n          });\n        }\n        if (metadata.native_filter_configuration) {\n          dispatch({\n            type: SET_FILTER_CONFIG_COMPLETE,\n            filterConfig: metadata.native_filter_configuration\n          });\n        }\n      }\n      if (lastModifiedTime) {\n        dispatch(saveDashboardRequestSuccess(lastModifiedTime));\n      }\n      dispatch(saveDashboardFinished());\n      // redirect to the new slug or id\n      window.history.pushState(\n        { event: 'dashboard_properties_changed' },\n        '',\n        `/superset/dashboard/${slug || id}/`\n      );\n\n      dispatch(addSuccessToast(t('This dashboard was saved successfully.')));\n      dispatch(setOverrideConfirm(undefined));\n      return response;\n    };\n\n    const onError = async (response) => {\n      const { error, message } = await getClientErrorObject(response);\n      let errorText = t('Sorry, an unknown error occurred');\n\n      if (error) {\n        errorText = t(\n          'Sorry, there was an error saving this dashboard: %s',\n          error\n        );\n      }\n      if (typeof message === 'string' && message === 'Forbidden') {\n        errorText = t('You do not have permission to edit this dashboard');\n      }\n      dispatch(saveDashboardFinished());\n      dispatch(addDangerToast(errorText));\n    };\n\n    if (\n    [SAVE_TYPE_OVERWRITE, SAVE_TYPE_OVERWRITE_CONFIRMED].includes(saveType))\n    {\n      let chartConfiguration = {};\n      let globalChartConfiguration = {};\n      if (isFeatureEnabled(FeatureFlag.DashboardCrossFilters)) {\n        ({ chartConfiguration, globalChartConfiguration } =\n        handleChartConfiguration());\n      }\n      const updatedDashboard =\n      saveType === SAVE_TYPE_OVERWRITE_CONFIRMED ?\n      data :\n      {\n        certified_by: cleanedData.certified_by,\n        certification_details: cleanedData.certification_details,\n        css: cleanedData.css,\n        dashboard_title: cleanedData.dashboard_title,\n        slug: cleanedData.slug,\n        owners: cleanedData.owners,\n        roles: cleanedData.roles,\n        json_metadata: safeStringify({\n          ...((cleanedData == null ? void 0 : cleanedData.metadata) || {}),\n          default_filters: safeStringify(serializedFilters),\n          filter_scopes: serializedFilterScopes,\n          chart_configuration: chartConfiguration,\n          global_chart_configuration: globalChartConfiguration\n        })\n      };\n\n      const updateDashboard = () =>\n      SupersetClient.put({\n        endpoint: `/api/v1/dashboard/${id}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedDashboard)\n      }).\n      then((response) => onUpdateSuccess(response)).\n      catch((response) => onError(response));\n      return new Promise((resolve, reject) => {\n        if (\n        !isFeatureEnabled(FeatureFlag.ConfirmDashboardDiff) ||\n        saveType === SAVE_TYPE_OVERWRITE_CONFIRMED)\n        {\n          // skip overwrite precheck\n          resolve();\n          return;\n        }\n\n        // precheck for overwrite items\n        SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${id}`\n        }).then((response) => {\n          const dashboard = response.json.result;\n          const overwriteConfirmItems = getOverwriteItems(\n            dashboard,\n            updatedDashboard\n          );\n          if (overwriteConfirmItems.length > 0) {\n            dispatch(\n              setOverrideConfirm({\n                updatedAt: dashboard.changed_on,\n                updatedBy: dashboard.changed_by_name,\n                overwriteConfirmItems,\n                dashboardId: id,\n                data: updatedDashboard\n              })\n            );\n            return reject(overwriteConfirmItems);\n          }\n          return resolve();\n        });\n      }).\n      then(updateDashboard).\n      catch((overwriteConfirmItems) => {\n        const errorText = t('Please confirm the overwrite values.');\n        dispatch(\n          logEvent(LOG_ACTIONS_CONFIRM_OVERWRITE_DASHBOARD_METADATA, {\n            dashboard_id: id,\n            items: overwriteConfirmItems\n          })\n        );\n        dispatch(addDangerToast(errorText));\n      });\n    }\n    // changing the data as the endpoint requires\n    if ('positions' in cleanedData && !('positions' in cleanedData.metadata)) {\n      cleanedData.metadata.positions = cleanedData.positions;\n    }\n    cleanedData.metadata.default_filters = safeStringify(serializedFilters);\n    cleanedData.metadata.filter_scopes = serializedFilterScopes;\n    const copyPayload = {\n      dashboard_title: cleanedData.dashboard_title,\n      css: cleanedData.css,\n      duplicate_slices: cleanedData.duplicate_slices,\n      json_metadata: JSON.stringify(cleanedData.metadata)\n    };\n\n    return SupersetClient.post({\n      endpoint: `/api/v1/dashboard/${id}/copy/`,\n      jsonPayload: copyPayload\n    }).\n    then((response) => onCopySuccess(response)).\n    catch((response) => onError(response));\n  };\n}\n\nexport function fetchCharts(\nchartList = [],\nforce = false,\ninterval = 0,\ndashboardId)\n{\n  return (dispatch, getState) => {\n    if (!interval) {\n      chartList.forEach((chartKey) =>\n      dispatch(refreshChart(chartKey, force, dashboardId))\n      );\n      return;\n    }\n\n    const { metadata: meta } = getState().dashboardInfo;\n    const refreshTime = Math.max(interval, meta.stagger_time || 5000); // default 5 seconds\n    if (typeof meta.stagger_refresh !== 'boolean') {\n      meta.stagger_refresh =\n      meta.stagger_refresh === undefined ?\n      true :\n      meta.stagger_refresh === 'true';\n    }\n    const delay = meta.stagger_refresh ?\n    refreshTime / (chartList.length - 1) :\n    0;\n    chartList.forEach((chartKey, i) => {\n      setTimeout(\n        () => dispatch(refreshChart(chartKey, force, dashboardId)),\n        delay * i\n      );\n    });\n  };\n}\n\nconst refreshCharts = (chartList, force, interval, dashboardId, dispatch) =>\nnew Promise((resolve) => {\n  dispatch(fetchCharts(chartList, force, interval, dashboardId));\n  resolve();\n});\n\nexport const ON_FILTERS_REFRESH = 'ON_FILTERS_REFRESH';\nexport function onFiltersRefresh() {\n  return { type: ON_FILTERS_REFRESH };\n}\n\nexport const ON_FILTERS_REFRESH_SUCCESS = 'ON_FILTERS_REFRESH_SUCCESS';\nexport function onFiltersRefreshSuccess() {\n  return { type: ON_FILTERS_REFRESH_SUCCESS };\n}\n\nexport const ON_REFRESH_SUCCESS = 'ON_REFRESH_SUCCESS';\nexport function onRefreshSuccess() {\n  return { type: ON_REFRESH_SUCCESS };\n}\n\nexport const ON_REFRESH = 'ON_REFRESH';\nexport function onRefresh(\nchartList = [],\nforce = false,\ninterval = 0,\ndashboardId)\n{\n  return (dispatch) => {\n    dispatch({ type: ON_REFRESH });\n    refreshCharts(chartList, force, interval, dashboardId, dispatch).then(\n      () => {\n        dispatch(onRefreshSuccess());\n        dispatch(onFiltersRefresh());\n      }\n    );\n  };\n}\n\nexport const SHOW_BUILDER_PANE = 'SHOW_BUILDER_PANE';\nexport function showBuilderPane() {\n  return { type: SHOW_BUILDER_PANE };\n}\n\nexport function addSliceToDashboard(id) {\n  return (dispatch, getState) => {\n    const { sliceEntities } = getState();\n    const selectedSlice = sliceEntities.slices[id];\n    if (!selectedSlice) {\n      return dispatch(\n        addWarningToast(\n          'Sorry, there is no chart definition associated with the chart trying to be added.'\n        )\n      );\n    }\n    const form_data = {\n      ...selectedSlice.form_data,\n      slice_id: selectedSlice.slice_id\n    };\n    const newChart = {\n      ...initChart,\n      id,\n      form_data: applyDefaultFormData(form_data)\n    };\n\n    return Promise.all([\n    dispatch(addChart(newChart, id)),\n    dispatch(fetchDatasourceMetadata(form_data.datasource))]\n    ).then(() => {\n      dispatch(addSlice(selectedSlice));\n    });\n  };\n}\n\nexport function removeSliceFromDashboard(id) {\n  return (dispatch) => {\n    dispatch(removeSlice(id));\n    dispatch(removeChart(id));\n    getLabelsColorMap().removeSlice(id);\n  };\n}\n\nexport const SET_COLOR_SCHEME = 'SET_COLOR_SCHEME';\nexport function setColorScheme(colorScheme) {\n  return { type: SET_COLOR_SCHEME, colorScheme };\n}\n\nexport const SET_DIRECT_PATH = 'SET_DIRECT_PATH';\nexport function setDirectPathToChild(path) {\n  return { type: SET_DIRECT_PATH, path };\n}\n\nexport const SET_ACTIVE_TAB = 'SET_ACTIVE_TAB';\nexport function setActiveTab(tabId, prevTabId) {\n  return { type: SET_ACTIVE_TAB, tabId, prevTabId };\n}\n\n// Even though SET_ACTIVE_TABS is not being called from Superset's codebase,\n// it is being used by Preset extensions.\nexport const SET_ACTIVE_TABS = 'SET_ACTIVE_TABS';\nexport function setActiveTabs(activeTabs) {\n  return { type: SET_ACTIVE_TABS, activeTabs };\n}\n\nexport const SET_FOCUSED_FILTER_FIELD = 'SET_FOCUSED_FILTER_FIELD';\nexport function setFocusedFilterField(chartId, column) {\n  return { type: SET_FOCUSED_FILTER_FIELD, chartId, column };\n}\n\nexport const UNSET_FOCUSED_FILTER_FIELD = 'UNSET_FOCUSED_FILTER_FIELD';\nexport function unsetFocusedFilterField(chartId, column) {\n  return { type: UNSET_FOCUSED_FILTER_FIELD, chartId, column };\n}\n\nexport const SET_FULL_SIZE_CHART_ID = 'SET_FULL_SIZE_CHART_ID';\nexport function setFullSizeChartId(chartId) {\n  return { type: SET_FULL_SIZE_CHART_ID, chartId };\n}\n\n// Undo history ---------------------------------------------------------------\nexport const SET_MAX_UNDO_HISTORY_EXCEEDED = 'SET_MAX_UNDO_HISTORY_EXCEEDED';\nexport function setMaxUndoHistoryExceeded(maxUndoHistoryExceeded = true) {\n  return {\n    type: SET_MAX_UNDO_HISTORY_EXCEEDED,\n    payload: { maxUndoHistoryExceeded }\n  };\n}\n\nexport function maxUndoHistoryToast() {\n  return (dispatch, getState) => {\n    const { dashboardLayout } = getState();\n    const historyLength = dashboardLayout.past.length;\n\n    return dispatch(\n      addWarningToast(\n        t(\n          'You have used all %(historyLength)s undo slots and will not be able to fully undo subsequent actions. You may save your current state to reset the history.',\n          { historyLength }\n        )\n      )\n    );\n  };\n}\n\nexport const SET_DATASETS_STATUS = 'SET_DATASETS_STATUS';\nexport function setDatasetsStatus(status) {\n  return {\n    type: SET_DATASETS_STATUS,\n    status\n  };\n}\n\nconst updateDashboardMetadata = async (id, metadata, dispatch) => {\n  await SupersetClient.put({\n    endpoint: `/api/v1/dashboard/${id}`,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ json_metadata: JSON.stringify(metadata) })\n  });\n  dispatch(dashboardInfoChanged({ metadata }));\n};\n\nexport const updateDashboardLabelsColor = () => async (dispatch, getState) => {\n  const {\n    dashboardInfo: { id, metadata }\n  } = getState();\n  const categoricalSchemes = getCategoricalSchemeRegistry();\n  const colorScheme = metadata == null ? void 0 : metadata.color_scheme;\n  const colorSchemeRegistry = categoricalSchemes.get(\n  metadata == null ? void 0 : metadata.color_scheme,\n  true\n  );\n  const defaultScheme = categoricalSchemes.defaultKey;\n  const fallbackScheme = (defaultScheme == null ? void 0 : defaultScheme.toString()) || 'supersetColors';\n  const colorSchemeDomain = (metadata == null ? void 0 : metadata.color_scheme_domain) || [];\n\n  try {\n    const updatedMetadata = { ...metadata };\n    let updatedScheme = metadata == null ? void 0 : metadata.color_scheme;\n\n    // Color scheme does not exist anymore, fallback to default\n    if (colorScheme && !colorSchemeRegistry) {\n      updatedScheme = fallbackScheme;\n      updatedMetadata.color_scheme = updatedScheme;\n      updatedMetadata.color_scheme_domain = getColorSchemeDomain(colorScheme);\n\n      dispatch(setColorScheme(updatedScheme));\n      // must re-apply colors from fresh labels color map\n      applyColors(updatedMetadata, true);\n    }\n\n    // stored labels color map and applied might differ\n    const isMapSynced = isLabelsColorMapSynced(metadata);\n    if (!isMapSynced) {\n      // re-apply a fresh labels color map\n      applyColors(updatedMetadata, true);\n      // pull and store the just applied labels color map\n      updatedMetadata.shared_label_colors = getLabelsColorMapEntries();\n    }\n\n    // the stored color domain registry and fresh might differ at this point\n    const freshColorSchemeDomain = getColorSchemeDomain(colorScheme);\n    const isRegistrySynced =\n    colorSchemeDomain.toString() !== freshColorSchemeDomain.toString();\n    if (colorScheme && !isRegistrySynced) {\n      updatedMetadata.color_scheme_domain = freshColorSchemeDomain;\n    }\n\n    if (\n    colorScheme && (!colorSchemeRegistry || !isRegistrySynced) ||\n    !isMapSynced)\n    {\n      await updateDashboardMetadata(id, updatedMetadata, dispatch);\n    }\n  } catch (error) {\n    console.error('Failed to update dashboard color settings:', error);\n  }\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SET_UNSAVED_CHANGES, \"SET_UNSAVED_CHANGES\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setUnsavedChanges, \"setUnsavedChanges\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ADD_SLICE, \"ADD_SLICE\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(addSlice, \"addSlice\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(REMOVE_SLICE, \"REMOVE_SLICE\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(removeSlice, \"removeSlice\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(TOGGLE_FAVE_STAR, \"TOGGLE_FAVE_STAR\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(toggleFaveStar, \"toggleFaveStar\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(fetchFaveStar, \"fetchFaveStar\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(saveFaveStar, \"saveFaveStar\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(TOGGLE_PUBLISHED, \"TOGGLE_PUBLISHED\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(togglePublished, \"togglePublished\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(savePublished, \"savePublished\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(TOGGLE_EXPAND_SLICE, \"TOGGLE_EXPAND_SLICE\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(toggleExpandSlice, \"toggleExpandSlice\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(UPDATE_CSS, \"UPDATE_CSS\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(updateCss, \"updateCss\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_EDIT_MODE, \"SET_EDIT_MODE\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setEditMode, \"setEditMode\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_CHANGE, \"ON_CHANGE\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onChange, \"onChange\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_SAVE, \"ON_SAVE\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onSave, \"onSave\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_REFRESH_FREQUENCY, \"SET_REFRESH_FREQUENCY\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setRefreshFrequency, \"setRefreshFrequency\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(saveDashboardRequestSuccess, \"saveDashboardRequestSuccess\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_OVERRIDE_CONFIRM, \"SET_OVERRIDE_CONFIRM\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setOverrideConfirm, \"setOverrideConfirm\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SAVE_DASHBOARD_STARTED, \"SAVE_DASHBOARD_STARTED\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(saveDashboardStarted, \"saveDashboardStarted\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SAVE_DASHBOARD_FINISHED, \"SAVE_DASHBOARD_FINISHED\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(saveDashboardFinished, \"saveDashboardFinished\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(saveDashboardRequest, \"saveDashboardRequest\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(fetchCharts, \"fetchCharts\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(refreshCharts, \"refreshCharts\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_FILTERS_REFRESH, \"ON_FILTERS_REFRESH\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onFiltersRefresh, \"onFiltersRefresh\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_FILTERS_REFRESH_SUCCESS, \"ON_FILTERS_REFRESH_SUCCESS\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onFiltersRefreshSuccess, \"onFiltersRefreshSuccess\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_REFRESH_SUCCESS, \"ON_REFRESH_SUCCESS\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onRefreshSuccess, \"onRefreshSuccess\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_REFRESH, \"ON_REFRESH\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onRefresh, \"onRefresh\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SHOW_BUILDER_PANE, \"SHOW_BUILDER_PANE\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(showBuilderPane, \"showBuilderPane\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(addSliceToDashboard, \"addSliceToDashboard\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(removeSliceFromDashboard, \"removeSliceFromDashboard\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_COLOR_SCHEME, \"SET_COLOR_SCHEME\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setColorScheme, \"setColorScheme\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_DIRECT_PATH, \"SET_DIRECT_PATH\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setDirectPathToChild, \"setDirectPathToChild\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_ACTIVE_TAB, \"SET_ACTIVE_TAB\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setActiveTab, \"setActiveTab\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_ACTIVE_TABS, \"SET_ACTIVE_TABS\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setActiveTabs, \"setActiveTabs\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_FOCUSED_FILTER_FIELD, \"SET_FOCUSED_FILTER_FIELD\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setFocusedFilterField, \"setFocusedFilterField\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(UNSET_FOCUSED_FILTER_FIELD, \"UNSET_FOCUSED_FILTER_FIELD\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(unsetFocusedFilterField, \"unsetFocusedFilterField\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_FULL_SIZE_CHART_ID, \"SET_FULL_SIZE_CHART_ID\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setFullSizeChartId, \"setFullSizeChartId\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_MAX_UNDO_HISTORY_EXCEEDED, \"SET_MAX_UNDO_HISTORY_EXCEEDED\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setMaxUndoHistoryExceeded, \"setMaxUndoHistoryExceeded\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(maxUndoHistoryToast, \"maxUndoHistoryToast\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_DATASETS_STATUS, \"SET_DATASETS_STATUS\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setDatasetsStatus, \"setDatasetsStatus\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(updateDashboardMetadata, \"updateDashboardMetadata\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(updateDashboardLabelsColor, \"updateDashboardLabelsColor\", \"/app/superset-frontend/src/dashboard/actions/dashboardState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ActionCreators","UndoActionCreators","rison","ensureIsArray","isFeatureEnabled","FeatureFlag","getLabelsColorMap","SupersetClient","t","getClientErrorObject","getCategoricalSchemeRegistry","addChart","removeChart","refreshChart","chart","initChart","applyDefaultFormData","SAVE_TYPE_OVERWRITE","SAVE_TYPE_OVERWRITE_CONFIRMED","getCrossFiltersConfiguration","isCrossFiltersEnabled","addSuccessToast","addWarningToast","addDangerToast","serializeActiveFilterValues","serializeFilterScopes","getActiveFilters","safeStringify","logEvent","LOG_ACTIONS_CONFIRM_OVERWRITE_DASHBOARD_METADATA","UPDATE_COMPONENTS_PARENTS_LIST","saveChartConfiguration","dashboardInfoChanged","SAVE_CHART_CONFIG_COMPLETE","fetchDatasourceMetadata","updateDirectPathToFilter","SET_FILTER_CONFIG_COMPLETE","getOverwriteItems","applyColors","isLabelsColorMapSynced","getLabelsColorMapEntries","getColorSchemeDomain","getColorNamespace","SET_UNSAVED_CHANGES","setUnsavedChanges","hasUnsavedChanges","type","payload","ADD_SLICE","addSlice","slice","REMOVE_SLICE","removeSlice","sliceId","TOGGLE_FAVE_STAR","toggleFaveStar","isStarred","fetchFaveStar","id","fetchFaveStarThunk","dispatch","get","endpoint","encode","then","json","_json$result","_json$result$","result","value","catch","saveFaveStar","saveFaveStarThunk","apiCall","delete","post","TOGGLE_PUBLISHED","togglePublished","isPublished","savePublished","savePublishedThunk","put","headers","body","JSON","stringify","published","TOGGLE_EXPAND_SLICE","toggleExpandSlice","UPDATE_CSS","updateCss","css","SET_EDIT_MODE","setEditMode","editMode","ON_CHANGE","onChange","ON_SAVE","onSave","lastModifiedTime","SET_REFRESH_FREQUENCY","setRefreshFrequency","refreshFrequency","isPersistent","saveDashboardRequestSuccess","clearHistory","SET_OVERRIDE_CONFIRM","setOverrideConfirm","overwriteConfirmMetadata","SAVE_DASHBOARD_STARTED","saveDashboardStarted","SAVE_DASHBOARD_FINISHED","saveDashboardFinished","saveDashboardRequest","data","saveType","getState","_data$metadata","_data$metadata2","_data$metadata3","_data$metadata4","_data$metadata5","_data$metadata6","_data$metadata7","_data$metadata8","_data$metadata9","dashboardFilters","dashboardLayout","layout","present","Object","values","forEach","filter","_layout$componentId","chartId","componentId","directPathToFilter","pop","parents","push","serializedFilters","serializedFilterScopes","certified_by","certification_details","dashboard_title","owners","roles","slug","hasId","item","undefined","metadataCrossFiltersEnabled","metadata","cross_filters_enabled","cleanedData","map","o","DashboardRbac","r","color_namespace","color_scheme","color_scheme_domain","expanded_slices","label_colors","shared_label_colors","refresh_frequency","timed_refresh_immune_slices","handleChartConfiguration","charts","dashboardInfo","onCopySuccess","response","last_modified_time","DashboardCrossFilters","chartConfiguration","globalChartConfiguration","onUpdateSuccess","updatedDashboard","json_metadata","parse","chart_configuration","native_filter_configuration","filterConfig","window","history","pushState","event","onError","error","message","errorText","includes","default_filters","filter_scopes","global_chart_configuration","updateDashboard","Promise","resolve","reject","ConfirmDashboardDiff","dashboard","overwriteConfirmItems","length","updatedAt","changed_on","updatedBy","changed_by_name","dashboardId","dashboard_id","items","positions","copyPayload","duplicate_slices","jsonPayload","fetchCharts","chartList","force","interval","chartKey","meta","refreshTime","Math","max","stagger_time","stagger_refresh","delay","i","setTimeout","refreshCharts","ON_FILTERS_REFRESH","onFiltersRefresh","ON_FILTERS_REFRESH_SUCCESS","onFiltersRefreshSuccess","ON_REFRESH_SUCCESS","onRefreshSuccess","ON_REFRESH","onRefresh","SHOW_BUILDER_PANE","showBuilderPane","addSliceToDashboard","sliceEntities","selectedSlice","slices","form_data","slice_id","newChart","all","datasource","removeSliceFromDashboard","SET_COLOR_SCHEME","setColorScheme","colorScheme","SET_DIRECT_PATH","setDirectPathToChild","path","SET_ACTIVE_TAB","setActiveTab","tabId","prevTabId","SET_ACTIVE_TABS","setActiveTabs","activeTabs","SET_FOCUSED_FILTER_FIELD","setFocusedFilterField","column","UNSET_FOCUSED_FILTER_FIELD","unsetFocusedFilterField","SET_FULL_SIZE_CHART_ID","setFullSizeChartId","SET_MAX_UNDO_HISTORY_EXCEEDED","setMaxUndoHistoryExceeded","maxUndoHistoryExceeded","maxUndoHistoryToast","historyLength","past","SET_DATASETS_STATUS","setDatasetsStatus","status","updateDashboardMetadata","updateDashboardLabelsColor","categoricalSchemes","colorSchemeRegistry","defaultScheme","defaultKey","fallbackScheme","toString","colorSchemeDomain","updatedMetadata","updatedScheme","isMapSynced","freshColorSchemeDomain","isRegistrySynced","console","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/dashboard/actions/dashboardState.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { ActionCreators as UndoActionCreators } from 'redux-undo';\nimport rison from 'rison';\nimport {\n  ensureIsArray,\n  isFeatureEnabled,\n  FeatureFlag,\n  getLabelsColorMap,\n  SupersetClient,\n  t,\n  getClientErrorObject,\n  getCategoricalSchemeRegistry,\n} from '@superset-ui/core';\nimport {\n  addChart,\n  removeChart,\n  refreshChart,\n} from 'src/components/Chart/chartAction';\nimport { chart as initChart } from 'src/components/Chart/chartReducer';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport {\n  SAVE_TYPE_OVERWRITE,\n  SAVE_TYPE_OVERWRITE_CONFIRMED,\n} from 'src/dashboard/util/constants';\nimport {\n  getCrossFiltersConfiguration,\n  isCrossFiltersEnabled,\n} from 'src/dashboard/util/crossFilters';\nimport {\n  addSuccessToast,\n  addWarningToast,\n  addDangerToast,\n} from 'src/components/MessageToasts/actions';\nimport serializeActiveFilterValues from 'src/dashboard/util/serializeActiveFilterValues';\nimport serializeFilterScopes from 'src/dashboard/util/serializeFilterScopes';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport { logEvent } from 'src/logger/actions';\nimport { LOG_ACTIONS_CONFIRM_OVERWRITE_DASHBOARD_METADATA } from 'src/logger/LogUtils';\nimport { UPDATE_COMPONENTS_PARENTS_LIST } from './dashboardLayout';\nimport {\n  saveChartConfiguration,\n  dashboardInfoChanged,\n  SAVE_CHART_CONFIG_COMPLETE,\n} from './dashboardInfo';\nimport { fetchDatasourceMetadata } from './datasources';\nimport { updateDirectPathToFilter } from './dashboardFilters';\nimport { SET_FILTER_CONFIG_COMPLETE } from './nativeFilters';\nimport getOverwriteItems from '../util/getOverwriteItems';\nimport {\n  applyColors,\n  isLabelsColorMapSynced,\n  getLabelsColorMapEntries,\n  getColorSchemeDomain,\n  getColorNamespace,\n} from '../../utils/colorScheme';\n\nexport const SET_UNSAVED_CHANGES = 'SET_UNSAVED_CHANGES';\nexport function setUnsavedChanges(hasUnsavedChanges) {\n  return { type: SET_UNSAVED_CHANGES, payload: { hasUnsavedChanges } };\n}\n\nexport const ADD_SLICE = 'ADD_SLICE';\nexport function addSlice(slice) {\n  return { type: ADD_SLICE, slice };\n}\n\nexport const REMOVE_SLICE = 'REMOVE_SLICE';\nexport function removeSlice(sliceId) {\n  return { type: REMOVE_SLICE, sliceId };\n}\n\nexport const TOGGLE_FAVE_STAR = 'TOGGLE_FAVE_STAR';\nexport function toggleFaveStar(isStarred) {\n  return { type: TOGGLE_FAVE_STAR, isStarred };\n}\n\nexport function fetchFaveStar(id) {\n  return function fetchFaveStarThunk(dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/favorite_status/?q=${rison.encode([id])}`,\n    })\n      .then(({ json }) => {\n        dispatch(toggleFaveStar(!!json?.result?.[0]?.value));\n      })\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'There was an issue fetching the favorite status of this dashboard.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function saveFaveStar(id, isStarred) {\n  return function saveFaveStarThunk(dispatch) {\n    const endpoint = `/api/v1/dashboard/${id}/favorites/`;\n    const apiCall = isStarred\n      ? SupersetClient.delete({\n          endpoint,\n        })\n      : SupersetClient.post({ endpoint });\n\n    return apiCall\n      .then(() => {\n        dispatch(toggleFaveStar(!isStarred));\n      })\n      .catch(() =>\n        dispatch(\n          addDangerToast(t('There was an issue favoriting this dashboard.')),\n        ),\n      );\n  };\n}\n\nexport const TOGGLE_PUBLISHED = 'TOGGLE_PUBLISHED';\nexport function togglePublished(isPublished) {\n  return { type: TOGGLE_PUBLISHED, isPublished };\n}\n\nexport function savePublished(id, isPublished) {\n  return function savePublishedThunk(dispatch) {\n    return SupersetClient.put({\n      endpoint: `/api/v1/dashboard/${id}`,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        published: isPublished,\n      }),\n    })\n      .then(() => {\n        dispatch(\n          addSuccessToast(\n            isPublished\n              ? t('This dashboard is now published')\n              : t('This dashboard is now hidden'),\n          ),\n        );\n        dispatch(togglePublished(isPublished));\n      })\n      .catch(() => {\n        dispatch(\n          addDangerToast(\n            t('You do not have permissions to edit this dashboard.'),\n          ),\n        );\n      });\n  };\n}\n\nexport const TOGGLE_EXPAND_SLICE = 'TOGGLE_EXPAND_SLICE';\nexport function toggleExpandSlice(sliceId) {\n  return { type: TOGGLE_EXPAND_SLICE, sliceId };\n}\n\nexport const UPDATE_CSS = 'UPDATE_CSS';\nexport function updateCss(css) {\n  return { type: UPDATE_CSS, css };\n}\n\nexport const SET_EDIT_MODE = 'SET_EDIT_MODE';\nexport function setEditMode(editMode) {\n  return { type: SET_EDIT_MODE, editMode };\n}\n\nexport const ON_CHANGE = 'ON_CHANGE';\nexport function onChange() {\n  return { type: ON_CHANGE };\n}\n\nexport const ON_SAVE = 'ON_SAVE';\nexport function onSave(lastModifiedTime) {\n  return { type: ON_SAVE, lastModifiedTime };\n}\n\nexport const SET_REFRESH_FREQUENCY = 'SET_REFRESH_FREQUENCY';\nexport function setRefreshFrequency(refreshFrequency, isPersistent = false) {\n  return { type: SET_REFRESH_FREQUENCY, refreshFrequency, isPersistent };\n}\n\nexport function saveDashboardRequestSuccess(lastModifiedTime) {\n  return dispatch => {\n    dispatch(onSave(lastModifiedTime));\n    // clear layout undo history\n    dispatch(UndoActionCreators.clearHistory());\n  };\n}\n\nexport const SET_OVERRIDE_CONFIRM = 'SET_OVERRIDE_CONFIRM';\nexport function setOverrideConfirm(overwriteConfirmMetadata) {\n  return {\n    type: SET_OVERRIDE_CONFIRM,\n    overwriteConfirmMetadata,\n  };\n}\n\nexport const SAVE_DASHBOARD_STARTED = 'SAVE_DASHBOARD_STARTED';\nexport function saveDashboardStarted() {\n  return { type: SAVE_DASHBOARD_STARTED };\n}\n\nexport const SAVE_DASHBOARD_FINISHED = 'SAVE_DASHBOARD_FINISHED';\nexport function saveDashboardFinished() {\n  return { type: SAVE_DASHBOARD_FINISHED };\n}\n\nexport function saveDashboardRequest(data, id, saveType) {\n  return (dispatch, getState) => {\n    dispatch({ type: UPDATE_COMPONENTS_PARENTS_LIST });\n    dispatch(saveDashboardStarted());\n\n    const { dashboardFilters, dashboardLayout } = getState();\n    const layout = dashboardLayout.present;\n    Object.values(dashboardFilters).forEach(filter => {\n      const { chartId } = filter;\n      const componentId = filter.directPathToFilter.slice().pop();\n      const directPathToFilter = (layout[componentId]?.parents || []).slice();\n      directPathToFilter.push(componentId);\n      dispatch(updateDirectPathToFilter(chartId, directPathToFilter));\n    });\n    // serialize selected values for each filter field, grouped by filter id\n    const serializedFilters = serializeActiveFilterValues(getActiveFilters());\n    // serialize filter scope for each filter field, grouped by filter id\n    const serializedFilterScopes = serializeFilterScopes(dashboardFilters);\n    const {\n      certified_by,\n      certification_details,\n      css,\n      dashboard_title,\n      owners,\n      roles,\n      slug,\n    } = data;\n\n    const hasId = item => item.id !== undefined;\n    const metadataCrossFiltersEnabled = data.metadata?.cross_filters_enabled;\n    // making sure the data is what the backend expects\n    const cleanedData = {\n      ...data,\n      certified_by: certified_by || '',\n      certification_details:\n        certified_by && certification_details ? certification_details : '',\n      css: css || '',\n      dashboard_title: dashboard_title || t('[ untitled dashboard ]'),\n      owners: ensureIsArray(owners).map(o => (hasId(o) ? o.id : o)),\n      roles: !isFeatureEnabled(FeatureFlag.DashboardRbac)\n        ? undefined\n        : ensureIsArray(roles).map(r => (hasId(r) ? r.id : r)),\n      slug: slug || null,\n      metadata: {\n        ...data.metadata,\n        color_namespace: getColorNamespace(data.metadata?.color_namespace),\n        color_scheme: data.metadata?.color_scheme || '',\n        color_scheme_domain: data.metadata?.color_scheme_domain || [],\n        expanded_slices: data.metadata?.expanded_slices || {},\n        label_colors: data.metadata?.label_colors || {},\n        shared_label_colors: data.metadata?.shared_label_colors || {},\n        refresh_frequency: data.metadata?.refresh_frequency || 0,\n        timed_refresh_immune_slices:\n          data.metadata?.timed_refresh_immune_slices || [],\n        // cross-filters should be enabled by default\n        cross_filters_enabled: isCrossFiltersEnabled(\n          metadataCrossFiltersEnabled,\n        ),\n      },\n    };\n\n    const handleChartConfiguration = () => {\n      const {\n        dashboardLayout,\n        charts,\n        dashboardInfo: { metadata },\n      } = getState();\n      return getCrossFiltersConfiguration(\n        dashboardLayout.present,\n        metadata,\n        charts,\n      );\n    };\n\n    const onCopySuccess = response => {\n      const lastModifiedTime = response.json.result.last_modified_time;\n      if (lastModifiedTime) {\n        dispatch(saveDashboardRequestSuccess(lastModifiedTime));\n      }\n      if (isFeatureEnabled(FeatureFlag.DashboardCrossFilters)) {\n        const { chartConfiguration, globalChartConfiguration } =\n          handleChartConfiguration();\n        dispatch(\n          saveChartConfiguration({\n            chartConfiguration,\n            globalChartConfiguration,\n          }),\n        );\n      }\n      dispatch(saveDashboardFinished());\n      dispatch(addSuccessToast(t('This dashboard was saved successfully.')));\n      return response;\n    };\n\n    const onUpdateSuccess = response => {\n      const updatedDashboard = response.json.result;\n      const lastModifiedTime = response.json.last_modified_time;\n      // syncing with the backend transformations of the metadata\n      if (updatedDashboard.json_metadata) {\n        const metadata = JSON.parse(updatedDashboard.json_metadata);\n        dispatch(\n          dashboardInfoChanged({\n            metadata,\n          }),\n        );\n        if (metadata.chart_configuration) {\n          dispatch({\n            type: SAVE_CHART_CONFIG_COMPLETE,\n            chartConfiguration: metadata.chart_configuration,\n          });\n        }\n        if (metadata.native_filter_configuration) {\n          dispatch({\n            type: SET_FILTER_CONFIG_COMPLETE,\n            filterConfig: metadata.native_filter_configuration,\n          });\n        }\n      }\n      if (lastModifiedTime) {\n        dispatch(saveDashboardRequestSuccess(lastModifiedTime));\n      }\n      dispatch(saveDashboardFinished());\n      // redirect to the new slug or id\n      window.history.pushState(\n        { event: 'dashboard_properties_changed' },\n        '',\n        `/superset/dashboard/${slug || id}/`,\n      );\n\n      dispatch(addSuccessToast(t('This dashboard was saved successfully.')));\n      dispatch(setOverrideConfirm(undefined));\n      return response;\n    };\n\n    const onError = async response => {\n      const { error, message } = await getClientErrorObject(response);\n      let errorText = t('Sorry, an unknown error occurred');\n\n      if (error) {\n        errorText = t(\n          'Sorry, there was an error saving this dashboard: %s',\n          error,\n        );\n      }\n      if (typeof message === 'string' && message === 'Forbidden') {\n        errorText = t('You do not have permission to edit this dashboard');\n      }\n      dispatch(saveDashboardFinished());\n      dispatch(addDangerToast(errorText));\n    };\n\n    if (\n      [SAVE_TYPE_OVERWRITE, SAVE_TYPE_OVERWRITE_CONFIRMED].includes(saveType)\n    ) {\n      let chartConfiguration = {};\n      let globalChartConfiguration = {};\n      if (isFeatureEnabled(FeatureFlag.DashboardCrossFilters)) {\n        ({ chartConfiguration, globalChartConfiguration } =\n          handleChartConfiguration());\n      }\n      const updatedDashboard =\n        saveType === SAVE_TYPE_OVERWRITE_CONFIRMED\n          ? data\n          : {\n              certified_by: cleanedData.certified_by,\n              certification_details: cleanedData.certification_details,\n              css: cleanedData.css,\n              dashboard_title: cleanedData.dashboard_title,\n              slug: cleanedData.slug,\n              owners: cleanedData.owners,\n              roles: cleanedData.roles,\n              json_metadata: safeStringify({\n                ...(cleanedData?.metadata || {}),\n                default_filters: safeStringify(serializedFilters),\n                filter_scopes: serializedFilterScopes,\n                chart_configuration: chartConfiguration,\n                global_chart_configuration: globalChartConfiguration,\n              }),\n            };\n\n      const updateDashboard = () =>\n        SupersetClient.put({\n          endpoint: `/api/v1/dashboard/${id}`,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updatedDashboard),\n        })\n          .then(response => onUpdateSuccess(response))\n          .catch(response => onError(response));\n      return new Promise((resolve, reject) => {\n        if (\n          !isFeatureEnabled(FeatureFlag.ConfirmDashboardDiff) ||\n          saveType === SAVE_TYPE_OVERWRITE_CONFIRMED\n        ) {\n          // skip overwrite precheck\n          resolve();\n          return;\n        }\n\n        // precheck for overwrite items\n        SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${id}`,\n        }).then(response => {\n          const dashboard = response.json.result;\n          const overwriteConfirmItems = getOverwriteItems(\n            dashboard,\n            updatedDashboard,\n          );\n          if (overwriteConfirmItems.length > 0) {\n            dispatch(\n              setOverrideConfirm({\n                updatedAt: dashboard.changed_on,\n                updatedBy: dashboard.changed_by_name,\n                overwriteConfirmItems,\n                dashboardId: id,\n                data: updatedDashboard,\n              }),\n            );\n            return reject(overwriteConfirmItems);\n          }\n          return resolve();\n        });\n      })\n        .then(updateDashboard)\n        .catch(overwriteConfirmItems => {\n          const errorText = t('Please confirm the overwrite values.');\n          dispatch(\n            logEvent(LOG_ACTIONS_CONFIRM_OVERWRITE_DASHBOARD_METADATA, {\n              dashboard_id: id,\n              items: overwriteConfirmItems,\n            }),\n          );\n          dispatch(addDangerToast(errorText));\n        });\n    }\n    // changing the data as the endpoint requires\n    if ('positions' in cleanedData && !('positions' in cleanedData.metadata)) {\n      cleanedData.metadata.positions = cleanedData.positions;\n    }\n    cleanedData.metadata.default_filters = safeStringify(serializedFilters);\n    cleanedData.metadata.filter_scopes = serializedFilterScopes;\n    const copyPayload = {\n      dashboard_title: cleanedData.dashboard_title,\n      css: cleanedData.css,\n      duplicate_slices: cleanedData.duplicate_slices,\n      json_metadata: JSON.stringify(cleanedData.metadata),\n    };\n\n    return SupersetClient.post({\n      endpoint: `/api/v1/dashboard/${id}/copy/`,\n      jsonPayload: copyPayload,\n    })\n      .then(response => onCopySuccess(response))\n      .catch(response => onError(response));\n  };\n}\n\nexport function fetchCharts(\n  chartList = [],\n  force = false,\n  interval = 0,\n  dashboardId,\n) {\n  return (dispatch, getState) => {\n    if (!interval) {\n      chartList.forEach(chartKey =>\n        dispatch(refreshChart(chartKey, force, dashboardId)),\n      );\n      return;\n    }\n\n    const { metadata: meta } = getState().dashboardInfo;\n    const refreshTime = Math.max(interval, meta.stagger_time || 5000); // default 5 seconds\n    if (typeof meta.stagger_refresh !== 'boolean') {\n      meta.stagger_refresh =\n        meta.stagger_refresh === undefined\n          ? true\n          : meta.stagger_refresh === 'true';\n    }\n    const delay = meta.stagger_refresh\n      ? refreshTime / (chartList.length - 1)\n      : 0;\n    chartList.forEach((chartKey, i) => {\n      setTimeout(\n        () => dispatch(refreshChart(chartKey, force, dashboardId)),\n        delay * i,\n      );\n    });\n  };\n}\n\nconst refreshCharts = (chartList, force, interval, dashboardId, dispatch) =>\n  new Promise(resolve => {\n    dispatch(fetchCharts(chartList, force, interval, dashboardId));\n    resolve();\n  });\n\nexport const ON_FILTERS_REFRESH = 'ON_FILTERS_REFRESH';\nexport function onFiltersRefresh() {\n  return { type: ON_FILTERS_REFRESH };\n}\n\nexport const ON_FILTERS_REFRESH_SUCCESS = 'ON_FILTERS_REFRESH_SUCCESS';\nexport function onFiltersRefreshSuccess() {\n  return { type: ON_FILTERS_REFRESH_SUCCESS };\n}\n\nexport const ON_REFRESH_SUCCESS = 'ON_REFRESH_SUCCESS';\nexport function onRefreshSuccess() {\n  return { type: ON_REFRESH_SUCCESS };\n}\n\nexport const ON_REFRESH = 'ON_REFRESH';\nexport function onRefresh(\n  chartList = [],\n  force = false,\n  interval = 0,\n  dashboardId,\n) {\n  return dispatch => {\n    dispatch({ type: ON_REFRESH });\n    refreshCharts(chartList, force, interval, dashboardId, dispatch).then(\n      () => {\n        dispatch(onRefreshSuccess());\n        dispatch(onFiltersRefresh());\n      },\n    );\n  };\n}\n\nexport const SHOW_BUILDER_PANE = 'SHOW_BUILDER_PANE';\nexport function showBuilderPane() {\n  return { type: SHOW_BUILDER_PANE };\n}\n\nexport function addSliceToDashboard(id) {\n  return (dispatch, getState) => {\n    const { sliceEntities } = getState();\n    const selectedSlice = sliceEntities.slices[id];\n    if (!selectedSlice) {\n      return dispatch(\n        addWarningToast(\n          'Sorry, there is no chart definition associated with the chart trying to be added.',\n        ),\n      );\n    }\n    const form_data = {\n      ...selectedSlice.form_data,\n      slice_id: selectedSlice.slice_id,\n    };\n    const newChart = {\n      ...initChart,\n      id,\n      form_data: applyDefaultFormData(form_data),\n    };\n\n    return Promise.all([\n      dispatch(addChart(newChart, id)),\n      dispatch(fetchDatasourceMetadata(form_data.datasource)),\n    ]).then(() => {\n      dispatch(addSlice(selectedSlice));\n    });\n  };\n}\n\nexport function removeSliceFromDashboard(id) {\n  return dispatch => {\n    dispatch(removeSlice(id));\n    dispatch(removeChart(id));\n    getLabelsColorMap().removeSlice(id);\n  };\n}\n\nexport const SET_COLOR_SCHEME = 'SET_COLOR_SCHEME';\nexport function setColorScheme(colorScheme) {\n  return { type: SET_COLOR_SCHEME, colorScheme };\n}\n\nexport const SET_DIRECT_PATH = 'SET_DIRECT_PATH';\nexport function setDirectPathToChild(path) {\n  return { type: SET_DIRECT_PATH, path };\n}\n\nexport const SET_ACTIVE_TAB = 'SET_ACTIVE_TAB';\nexport function setActiveTab(tabId, prevTabId) {\n  return { type: SET_ACTIVE_TAB, tabId, prevTabId };\n}\n\n// Even though SET_ACTIVE_TABS is not being called from Superset's codebase,\n// it is being used by Preset extensions.\nexport const SET_ACTIVE_TABS = 'SET_ACTIVE_TABS';\nexport function setActiveTabs(activeTabs) {\n  return { type: SET_ACTIVE_TABS, activeTabs };\n}\n\nexport const SET_FOCUSED_FILTER_FIELD = 'SET_FOCUSED_FILTER_FIELD';\nexport function setFocusedFilterField(chartId, column) {\n  return { type: SET_FOCUSED_FILTER_FIELD, chartId, column };\n}\n\nexport const UNSET_FOCUSED_FILTER_FIELD = 'UNSET_FOCUSED_FILTER_FIELD';\nexport function unsetFocusedFilterField(chartId, column) {\n  return { type: UNSET_FOCUSED_FILTER_FIELD, chartId, column };\n}\n\nexport const SET_FULL_SIZE_CHART_ID = 'SET_FULL_SIZE_CHART_ID';\nexport function setFullSizeChartId(chartId) {\n  return { type: SET_FULL_SIZE_CHART_ID, chartId };\n}\n\n// Undo history ---------------------------------------------------------------\nexport const SET_MAX_UNDO_HISTORY_EXCEEDED = 'SET_MAX_UNDO_HISTORY_EXCEEDED';\nexport function setMaxUndoHistoryExceeded(maxUndoHistoryExceeded = true) {\n  return {\n    type: SET_MAX_UNDO_HISTORY_EXCEEDED,\n    payload: { maxUndoHistoryExceeded },\n  };\n}\n\nexport function maxUndoHistoryToast() {\n  return (dispatch, getState) => {\n    const { dashboardLayout } = getState();\n    const historyLength = dashboardLayout.past.length;\n\n    return dispatch(\n      addWarningToast(\n        t(\n          'You have used all %(historyLength)s undo slots and will not be able to fully undo subsequent actions. You may save your current state to reset the history.',\n          { historyLength },\n        ),\n      ),\n    );\n  };\n}\n\nexport const SET_DATASETS_STATUS = 'SET_DATASETS_STATUS';\nexport function setDatasetsStatus(status) {\n  return {\n    type: SET_DATASETS_STATUS,\n    status,\n  };\n}\n\nconst updateDashboardMetadata = async (id, metadata, dispatch) => {\n  await SupersetClient.put({\n    endpoint: `/api/v1/dashboard/${id}`,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ json_metadata: JSON.stringify(metadata) }),\n  });\n  dispatch(dashboardInfoChanged({ metadata }));\n};\n\nexport const updateDashboardLabelsColor = () => async (dispatch, getState) => {\n  const {\n    dashboardInfo: { id, metadata },\n  } = getState();\n  const categoricalSchemes = getCategoricalSchemeRegistry();\n  const colorScheme = metadata?.color_scheme;\n  const colorSchemeRegistry = categoricalSchemes.get(\n    metadata?.color_scheme,\n    true,\n  );\n  const defaultScheme = categoricalSchemes.defaultKey;\n  const fallbackScheme = defaultScheme?.toString() || 'supersetColors';\n  const colorSchemeDomain = metadata?.color_scheme_domain || [];\n\n  try {\n    const updatedMetadata = { ...metadata };\n    let updatedScheme = metadata?.color_scheme;\n\n    // Color scheme does not exist anymore, fallback to default\n    if (colorScheme && !colorSchemeRegistry) {\n      updatedScheme = fallbackScheme;\n      updatedMetadata.color_scheme = updatedScheme;\n      updatedMetadata.color_scheme_domain = getColorSchemeDomain(colorScheme);\n\n      dispatch(setColorScheme(updatedScheme));\n      // must re-apply colors from fresh labels color map\n      applyColors(updatedMetadata, true);\n    }\n\n    // stored labels color map and applied might differ\n    const isMapSynced = isLabelsColorMapSynced(metadata);\n    if (!isMapSynced) {\n      // re-apply a fresh labels color map\n      applyColors(updatedMetadata, true);\n      // pull and store the just applied labels color map\n      updatedMetadata.shared_label_colors = getLabelsColorMapEntries();\n    }\n\n    // the stored color domain registry and fresh might differ at this point\n    const freshColorSchemeDomain = getColorSchemeDomain(colorScheme);\n    const isRegistrySynced =\n      colorSchemeDomain.toString() !== freshColorSchemeDomain.toString();\n    if (colorScheme && !isRegistrySynced) {\n      updatedMetadata.color_scheme_domain = freshColorSchemeDomain;\n    }\n\n    if (\n      (colorScheme && (!colorSchemeRegistry || !isRegistrySynced)) ||\n      !isMapSynced\n    ) {\n      await updateDashboardMetadata(id, updatedMetadata, dispatch);\n    }\n  } catch (error) {\n    console.error('Failed to update dashboard color settings:', error);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}