{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { t } from '@superset-ui/core';\nimport { Menu } from 'src/components/Menu';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport DownloadMenuItems from 'src/dashboard/components/menu/DownloadMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport HeaderReportDropdown from 'src/features/reports/ReportModal/HeaderReportDropdown';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { MenuKeys } from 'src/dashboard/types';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number,\n  dashboardTitle: PropTypes.string,\n  dataMask: PropTypes.object.isRequired,\n  customCss: PropTypes.string,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  directPathToChild: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool,\n  userCanShare: PropTypes.bool,\n  userCanSave: PropTypes.bool,\n  userCanCurate: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  manageEmbedded: PropTypes.func.isRequired,\n  logEvent: PropTypes.func,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired\n};\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null\n};\n\nconst mapStateToProps = (state) => ({\n  directPathToChild: state.dashboardState.directPathToChild\n});\n\nexport class HeaderActionsDropdown extends PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      showReportSubMenu: null\n    };\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n    this.setShowReportSubMenu = this.setShowReportSubMenu.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.customCss !== nextProps.customCss) {\n      this.setState({ css: nextProps.customCss }, () => {\n        injectCustomCss(nextProps.customCss);\n      });\n    }\n  }\n\n  setShowReportSubMenu(show) {\n    this.setState({\n      showReportSubMenu: show\n    });\n  }\n\n  changeCss(css) {\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key }) {\n    switch (key) {\n      case MenuKeys.RefreshDashboard:\n        this.props.forceRefreshAllCharts();\n        this.props.addSuccessToast(t('Refreshing charts'));\n        break;\n      case MenuKeys.EditProperties:\n        this.props.showPropertiesModal();\n        break;\n      case MenuKeys.ToggleFullscreen:{\n          const url = getDashboardUrl({\n            pathname: window.location.pathname,\n            filters: getActiveFilters(),\n            hash: window.location.hash,\n            standalone: !getUrlParam(URL_PARAMS.standalone)\n          });\n          window.location.replace(url);\n          break;\n        }\n      case MenuKeys.ManageEmbedded:{\n          this.props.manageEmbedded();\n          break;\n        }\n      default:\n        break;\n    }\n  }\n\n  render() {var _dashboardInfo$common, _dashboardInfo$common2, _dashboardInfo$metada;\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanShare,\n      userCanSave,\n      userCanCurate,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast,\n      setIsDropdownVisible,\n      isDropdownVisible,\n      directPathToChild,\n      ...rest\n    } = this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n\n    const isEmbedded = !(dashboardInfo != null && dashboardInfo.userId);\n\n    const url = getDashboardUrl({\n      pathname: window.location.pathname,\n      filters: getActiveFilters(),\n      hash: window.location.hash\n    });\n\n    const refreshIntervalOptions = (_dashboardInfo$common =\n    dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common2 = _dashboardInfo$common.conf) == null ? void 0 : _dashboardInfo$common2.DASHBOARD_AUTO_REFRESH_INTERVALS;\n\n    const dashboardComponentId = [...(directPathToChild || [])].pop();\n\n    return (\n      _jsxs(Menu, { selectable: false, \"data-test\": \"header-actions-menu\", ...rest, children: [\n        !editMode &&\n        _jsx(Menu.Item, {\n\n          \"data-test\": \"refresh-dashboard-menu-item\",\n          disabled: isLoading,\n          onClick: this.handleMenuClick, children:\n\n          t('Refresh dashboard') }, MenuKeys.RefreshDashboard\n        ),\n\n        !editMode && !isEmbedded &&\n        _jsx(Menu.Item, {\n\n          onClick: this.handleMenuClick, children:\n\n          getUrlParam(URL_PARAMS.standalone) ?\n          t('Exit fullscreen') :\n          t('Enter fullscreen') }, MenuKeys.ToggleFullscreen\n        ),\n\n        editMode &&\n        _jsx(Menu.Item, {\n\n          onClick: this.handleMenuClick, children:\n\n          t('Edit properties') }, MenuKeys.EditProperties\n        ),\n\n        editMode &&\n        _jsx(Menu.Item, { children:\n          _jsx(CssEditor, {\n            triggerNode: _jsx(\"span\", { children: t('Edit CSS') }),\n            initialCss: this.state.css,\n            onChange: this.changeCss,\n            addDangerToast: addDangerToast }\n          ) }, MenuKeys.EditCss\n        ),\n\n        _jsx(Menu.Divider, {}),\n        userCanSave &&\n        _jsx(Menu.Item, { children:\n          _jsx(SaveModal, {\n            addSuccessToast: this.props.addSuccessToast,\n            addDangerToast: this.props.addDangerToast,\n            dashboardId: dashboardId,\n            dashboardTitle: dashboardTitle,\n            dashboardInfo: dashboardInfo,\n            saveType: SAVE_TYPE_NEWDASHBOARD,\n            layout: layout,\n            expandedSlices: expandedSlices,\n            refreshFrequency: refreshFrequency,\n            shouldPersistRefreshFrequency: shouldPersistRefreshFrequency,\n            lastModifiedTime: lastModifiedTime,\n            customCss: customCss,\n            colorNamespace: colorNamespace,\n            colorScheme: colorScheme,\n            onSave: onSave,\n            triggerNode:\n            _jsx(\"span\", { \"data-test\": \"save-as-menu-item\", children: t('Save as') }),\n\n            canOverwrite: userCanEdit }\n          ) }, MenuKeys.SaveModal\n        ),\n\n        _jsx(Menu.SubMenu, {\n\n          disabled: isLoading,\n          title: t('Download'),\n          logEvent: this.props.logEvent, children:\n\n          _jsx(DownloadMenuItems, {\n            pdfMenuItemTitle: t('Export to PDF'),\n            imageMenuItemTitle: t('Download as Image'),\n            dashboardTitle: dashboardTitle,\n            dashboardId: dashboardId }\n          ) }, MenuKeys.Download\n        ),\n        userCanShare &&\n        _jsx(Menu.SubMenu, {\n\n          \"data-test\": \"share-dashboard-menu-item\",\n          disabled: isLoading,\n          title: t('Share'), children:\n\n          _jsx(ShareMenuItems, {\n            url: url,\n            copyMenuItemTitle: t('Copy permalink to clipboard'),\n            emailMenuItemTitle: t('Share permalink by email'),\n            emailSubject: emailSubject,\n            emailBody: emailBody,\n            addSuccessToast: addSuccessToast,\n            addDangerToast: addDangerToast,\n            dashboardId: dashboardId,\n            dashboardComponentId: dashboardComponentId }\n          ) }, MenuKeys.Share\n        ),\n\n        !editMode && userCanCurate &&\n        _jsx(Menu.Item, {\n\n          onClick: this.handleMenuClick, children:\n\n          t('Embed dashboard') }, MenuKeys.ManageEmbedded\n        ),\n\n        _jsx(Menu.Divider, {}),\n        !editMode ?\n        this.state.showReportSubMenu ?\n        _jsxs(_Fragment, { children: [\n          _jsx(Menu.SubMenu, { title: t('Manage email report'), children:\n            _jsx(HeaderReportDropdown, {\n              dashboardId: dashboardInfo.id,\n              setShowReportSubMenu: this.setShowReportSubMenu,\n              showReportSubMenu: this.state.showReportSubMenu,\n              setIsDropdownVisible: setIsDropdownVisible,\n              isDropdownVisible: isDropdownVisible,\n              useTextMenu: true }\n            ) }\n          ),\n          _jsx(Menu.Divider, {})] }\n        ) :\n\n        _jsx(Menu, { children:\n          _jsx(HeaderReportDropdown, {\n            dashboardId: dashboardInfo.id,\n            setShowReportSubMenu: this.setShowReportSubMenu,\n            setIsDropdownVisible: setIsDropdownVisible,\n            isDropdownVisible: isDropdownVisible,\n            useTextMenu: true }\n          ) }\n        ) :\n\n        null,\n        editMode && !_isEmpty(dashboardInfo == null ? void 0 : (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.filter_scopes) &&\n        _jsx(Menu.Item, { children:\n          _jsx(FilterScopeModal, {\n            className: \"m-r-5\",\n            triggerNode: t('Set filter mapping') }\n          ) }, MenuKeys.SetFilterMapping\n        ),\n\n\n        _jsx(Menu.Item, { children:\n          _jsx(RefreshIntervalModal, {\n            addSuccessToast: this.props.addSuccessToast,\n            refreshFrequency: refreshFrequency,\n            refreshLimit: refreshLimit,\n            refreshWarning: refreshWarning,\n            onChange: this.changeRefreshInterval,\n            editMode: editMode,\n            refreshIntervalOptions: refreshIntervalOptions,\n            triggerNode: _jsx(\"span\", { children: t('Set auto-refresh interval') }) }\n          ) }, MenuKeys.AutorefreshModal\n        )] }\n      ));\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;const _default =\n\nconnect(mapStateToProps)(HeaderActionsDropdown);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/app/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(HeaderActionsDropdown, \"HeaderActionsDropdown\", \"/app/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["PureComponent","PropTypes","connect","t","Menu","URL_PARAMS","ShareMenuItems","DownloadMenuItems","CssEditor","RefreshIntervalModal","SaveModal","HeaderReportDropdown","injectCustomCss","SAVE_TYPE_NEWDASHBOARD","FilterScopeModal","getDashboardUrl","getActiveFilters","getUrlParam","MenuKeys","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","propTypes","addSuccessToast","func","isRequired","addDangerToast","dashboardInfo","object","dashboardId","number","dashboardTitle","string","dataMask","customCss","colorNamespace","colorScheme","directPathToChild","array","onChange","updateCss","forceRefreshAllCharts","refreshFrequency","shouldPersistRefreshFrequency","bool","setRefreshFrequency","startPeriodicRender","editMode","userCanEdit","userCanShare","userCanSave","userCanCurate","isLoading","layout","expandedSlices","onSave","showPropertiesModal","manageEmbedded","logEvent","refreshLimit","refreshWarning","lastModifiedTime","defaultProps","undefined","mapStateToProps","state","dashboardState","HeaderActionsDropdown","discardChanges","window","location","reload","constructor","props","css","showReportSubMenu","changeCss","bind","changeRefreshInterval","handleMenuClick","setShowReportSubMenu","UNSAFE_componentWillReceiveProps","nextProps","setState","show","refreshInterval","isPersistent","key","RefreshDashboard","EditProperties","ToggleFullscreen","url","pathname","filters","hash","standalone","replace","ManageEmbedded","render","_dashboardInfo$common","_dashboardInfo$common2","_dashboardInfo$metada","setIsDropdownVisible","isDropdownVisible","rest","emailTitle","emailSubject","emailBody","isEmbedded","userId","refreshIntervalOptions","common","conf","DASHBOARD_AUTO_REFRESH_INTERVALS","dashboardComponentId","pop","selectable","children","Item","disabled","onClick","triggerNode","initialCss","EditCss","Divider","saveType","canOverwrite","SubMenu","title","pdfMenuItemTitle","imageMenuItemTitle","Download","copyMenuItemTitle","emailMenuItemTitle","Share","id","useTextMenu","_isEmpty","metadata","filter_scopes","className","SetFilterMapping","AutorefreshModal","__reactstandin__regenerateByEval","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty } from 'lodash';\nimport { connect } from 'react-redux';\nimport { t } from '@superset-ui/core';\nimport { Menu } from 'src/components/Menu';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport DownloadMenuItems from 'src/dashboard/components/menu/DownloadMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport HeaderReportDropdown from 'src/features/reports/ReportModal/HeaderReportDropdown';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { MenuKeys } from 'src/dashboard/types';\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number,\n  dashboardTitle: PropTypes.string,\n  dataMask: PropTypes.object.isRequired,\n  customCss: PropTypes.string,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  directPathToChild: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool,\n  userCanShare: PropTypes.bool,\n  userCanSave: PropTypes.bool,\n  userCanCurate: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  manageEmbedded: PropTypes.func.isRequired,\n  logEvent: PropTypes.func,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired,\n};\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null,\n};\n\nconst mapStateToProps = state => ({\n  directPathToChild: state.dashboardState.directPathToChild,\n});\n\nexport class HeaderActionsDropdown extends PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      showReportSubMenu: null,\n    };\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n    this.setShowReportSubMenu = this.setShowReportSubMenu.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.customCss !== nextProps.customCss) {\n      this.setState({ css: nextProps.customCss }, () => {\n        injectCustomCss(nextProps.customCss);\n      });\n    }\n  }\n\n  setShowReportSubMenu(show) {\n    this.setState({\n      showReportSubMenu: show,\n    });\n  }\n\n  changeCss(css) {\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key }) {\n    switch (key) {\n      case MenuKeys.RefreshDashboard:\n        this.props.forceRefreshAllCharts();\n        this.props.addSuccessToast(t('Refreshing charts'));\n        break;\n      case MenuKeys.EditProperties:\n        this.props.showPropertiesModal();\n        break;\n      case MenuKeys.ToggleFullscreen: {\n        const url = getDashboardUrl({\n          pathname: window.location.pathname,\n          filters: getActiveFilters(),\n          hash: window.location.hash,\n          standalone: !getUrlParam(URL_PARAMS.standalone),\n        });\n        window.location.replace(url);\n        break;\n      }\n      case MenuKeys.ManageEmbedded: {\n        this.props.manageEmbedded();\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanShare,\n      userCanSave,\n      userCanCurate,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast,\n      setIsDropdownVisible,\n      isDropdownVisible,\n      directPathToChild,\n      ...rest\n    } = this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n\n    const isEmbedded = !dashboardInfo?.userId;\n\n    const url = getDashboardUrl({\n      pathname: window.location.pathname,\n      filters: getActiveFilters(),\n      hash: window.location.hash,\n    });\n\n    const refreshIntervalOptions =\n      dashboardInfo.common?.conf?.DASHBOARD_AUTO_REFRESH_INTERVALS;\n\n    const dashboardComponentId = [...(directPathToChild || [])].pop();\n\n    return (\n      <Menu selectable={false} data-test=\"header-actions-menu\" {...rest}>\n        {!editMode && (\n          <Menu.Item\n            key={MenuKeys.RefreshDashboard}\n            data-test=\"refresh-dashboard-menu-item\"\n            disabled={isLoading}\n            onClick={this.handleMenuClick}\n          >\n            {t('Refresh dashboard')}\n          </Menu.Item>\n        )}\n        {!editMode && !isEmbedded && (\n          <Menu.Item\n            key={MenuKeys.ToggleFullscreen}\n            onClick={this.handleMenuClick}\n          >\n            {getUrlParam(URL_PARAMS.standalone)\n              ? t('Exit fullscreen')\n              : t('Enter fullscreen')}\n          </Menu.Item>\n        )}\n        {editMode && (\n          <Menu.Item\n            key={MenuKeys.EditProperties}\n            onClick={this.handleMenuClick}\n          >\n            {t('Edit properties')}\n          </Menu.Item>\n        )}\n        {editMode && (\n          <Menu.Item key={MenuKeys.EditCss}>\n            <CssEditor\n              triggerNode={<span>{t('Edit CSS')}</span>}\n              initialCss={this.state.css}\n              onChange={this.changeCss}\n              addDangerToast={addDangerToast}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Divider />\n        {userCanSave && (\n          <Menu.Item key={MenuKeys.SaveModal}>\n            <SaveModal\n              addSuccessToast={this.props.addSuccessToast}\n              addDangerToast={this.props.addDangerToast}\n              dashboardId={dashboardId}\n              dashboardTitle={dashboardTitle}\n              dashboardInfo={dashboardInfo}\n              saveType={SAVE_TYPE_NEWDASHBOARD}\n              layout={layout}\n              expandedSlices={expandedSlices}\n              refreshFrequency={refreshFrequency}\n              shouldPersistRefreshFrequency={shouldPersistRefreshFrequency}\n              lastModifiedTime={lastModifiedTime}\n              customCss={customCss}\n              colorNamespace={colorNamespace}\n              colorScheme={colorScheme}\n              onSave={onSave}\n              triggerNode={\n                <span data-test=\"save-as-menu-item\">{t('Save as')}</span>\n              }\n              canOverwrite={userCanEdit}\n            />\n          </Menu.Item>\n        )}\n        <Menu.SubMenu\n          key={MenuKeys.Download}\n          disabled={isLoading}\n          title={t('Download')}\n          logEvent={this.props.logEvent}\n        >\n          <DownloadMenuItems\n            pdfMenuItemTitle={t('Export to PDF')}\n            imageMenuItemTitle={t('Download as Image')}\n            dashboardTitle={dashboardTitle}\n            dashboardId={dashboardId}\n          />\n        </Menu.SubMenu>\n        {userCanShare && (\n          <Menu.SubMenu\n            key={MenuKeys.Share}\n            data-test=\"share-dashboard-menu-item\"\n            disabled={isLoading}\n            title={t('Share')}\n          >\n            <ShareMenuItems\n              url={url}\n              copyMenuItemTitle={t('Copy permalink to clipboard')}\n              emailMenuItemTitle={t('Share permalink by email')}\n              emailSubject={emailSubject}\n              emailBody={emailBody}\n              addSuccessToast={addSuccessToast}\n              addDangerToast={addDangerToast}\n              dashboardId={dashboardId}\n              dashboardComponentId={dashboardComponentId}\n            />\n          </Menu.SubMenu>\n        )}\n        {!editMode && userCanCurate && (\n          <Menu.Item\n            key={MenuKeys.ManageEmbedded}\n            onClick={this.handleMenuClick}\n          >\n            {t('Embed dashboard')}\n          </Menu.Item>\n        )}\n        <Menu.Divider />\n        {!editMode ? (\n          this.state.showReportSubMenu ? (\n            <>\n              <Menu.SubMenu title={t('Manage email report')}>\n                <HeaderReportDropdown\n                  dashboardId={dashboardInfo.id}\n                  setShowReportSubMenu={this.setShowReportSubMenu}\n                  showReportSubMenu={this.state.showReportSubMenu}\n                  setIsDropdownVisible={setIsDropdownVisible}\n                  isDropdownVisible={isDropdownVisible}\n                  useTextMenu\n                />\n              </Menu.SubMenu>\n              <Menu.Divider />\n            </>\n          ) : (\n            <Menu>\n              <HeaderReportDropdown\n                dashboardId={dashboardInfo.id}\n                setShowReportSubMenu={this.setShowReportSubMenu}\n                setIsDropdownVisible={setIsDropdownVisible}\n                isDropdownVisible={isDropdownVisible}\n                useTextMenu\n              />\n            </Menu>\n          )\n        ) : null}\n        {editMode && !isEmpty(dashboardInfo?.metadata?.filter_scopes) && (\n          <Menu.Item key={MenuKeys.SetFilterMapping}>\n            <FilterScopeModal\n              className=\"m-r-5\"\n              triggerNode={t('Set filter mapping')}\n            />\n          </Menu.Item>\n        )}\n\n        <Menu.Item key={MenuKeys.AutorefreshModal}>\n          <RefreshIntervalModal\n            addSuccessToast={this.props.addSuccessToast}\n            refreshFrequency={refreshFrequency}\n            refreshLimit={refreshLimit}\n            refreshWarning={refreshWarning}\n            onChange={this.changeRefreshInterval}\n            editMode={editMode}\n            refreshIntervalOptions={refreshIntervalOptions}\n            triggerNode={<span>{t('Set auto-refresh interval')}</span>}\n          />\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;\n\nexport default connect(mapStateToProps)(HeaderActionsDropdown);\n"],"mappings":"8UAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,OAAO;AACrC,OAAOC,SAAS,MAAM,YAAY;;AAElC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,CAAC,QAAQ,mBAAmB;AACrC,SAASC,IAAI,QAAQ,qBAAqB;AAC1C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,cAAc,MAAM,8CAA8C;AACzE,OAAOC,iBAAiB,MAAM,iDAAiD;AAC/E,OAAOC,SAAS,MAAM,oCAAoC;AAC1D,OAAOC,oBAAoB,MAAM,+CAA+C;AAChF,OAAOC,SAAS,MAAM,oCAAoC;AAC1D,OAAOC,oBAAoB,MAAM,uDAAuD;AACxF,OAAOC,eAAe,MAAM,oCAAoC;AAChE,SAASC,sBAAsB,QAAQ,8BAA8B;AACrE,OAAOC,gBAAgB,MAAM,uDAAuD;AACpF,OAAOC,eAAe,MAAM,oCAAoC;AAChE,SAASC,gBAAgB,QAAQ,2CAA2C;AAC5E,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,QAAQ,QAAQ,qBAAqB,CAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,QAAA,IAAAC,SAAA,EAAAC,IAAA,IAAAC,KAAA;;AAE/C,MAAMC,SAAS,GAAG;EAChBC,eAAe,EAAEzB,SAAS,CAAC0B,IAAI,CAACC,UAAU;EAC1CC,cAAc,EAAE5B,SAAS,CAAC0B,IAAI,CAACC,UAAU;EACzCE,aAAa,EAAE7B,SAAS,CAAC8B,MAAM,CAACH,UAAU;EAC1CI,WAAW,EAAE/B,SAAS,CAACgC,MAAM;EAC7BC,cAAc,EAAEjC,SAAS,CAACkC,MAAM;EAChCC,QAAQ,EAAEnC,SAAS,CAAC8B,MAAM,CAACH,UAAU;EACrCS,SAAS,EAAEpC,SAAS,CAACkC,MAAM;EAC3BG,cAAc,EAAErC,SAAS,CAACkC,MAAM;EAChCI,WAAW,EAAEtC,SAAS,CAACkC,MAAM;EAC7BK,iBAAiB,EAAEvC,SAAS,CAACwC,KAAK;EAClCC,QAAQ,EAAEzC,SAAS,CAAC0B,IAAI,CAACC,UAAU;EACnCe,SAAS,EAAE1C,SAAS,CAAC0B,IAAI,CAACC,UAAU;EACpCgB,qBAAqB,EAAE3C,SAAS,CAAC0B,IAAI,CAACC,UAAU;EAChDiB,gBAAgB,EAAE5C,SAAS,CAACgC,MAAM;EAClCa,6BAA6B,EAAE7C,SAAS,CAAC8C,IAAI,CAACnB,UAAU;EACxDoB,mBAAmB,EAAE/C,SAAS,CAAC0B,IAAI,CAACC,UAAU;EAC9CqB,mBAAmB,EAAEhD,SAAS,CAAC0B,IAAI,CAACC,UAAU;EAC9CsB,QAAQ,EAAEjD,SAAS,CAAC8C,IAAI,CAACnB,UAAU;EACnCuB,WAAW,EAAElD,SAAS,CAAC8C,IAAI;EAC3BK,YAAY,EAAEnD,SAAS,CAAC8C,IAAI;EAC5BM,WAAW,EAAEpD,SAAS,CAAC8C,IAAI;EAC3BO,aAAa,EAAErD,SAAS,CAAC8C,IAAI,CAACnB,UAAU;EACxC2B,SAAS,EAAEtD,SAAS,CAAC8C,IAAI,CAACnB,UAAU;EACpC4B,MAAM,EAAEvD,SAAS,CAAC8B,MAAM,CAACH,UAAU;EACnC6B,cAAc,EAAExD,SAAS,CAAC8B,MAAM;EAChC2B,MAAM,EAAEzD,SAAS,CAAC0B,IAAI,CAACC,UAAU;EACjC+B,mBAAmB,EAAE1D,SAAS,CAAC0B,IAAI,CAACC,UAAU;EAC9CgC,cAAc,EAAE3D,SAAS,CAAC0B,IAAI,CAACC,UAAU;EACzCiC,QAAQ,EAAE5D,SAAS,CAAC0B,IAAI;EACxBmC,YAAY,EAAE7D,SAAS,CAACgC,MAAM;EAC9B8B,cAAc,EAAE9D,SAAS,CAACkC,MAAM;EAChC6B,gBAAgB,EAAE/D,SAAS,CAACgC,MAAM,CAACL;AACrC,CAAC;;AAED,MAAMqC,YAAY,GAAG;EACnB3B,cAAc,EAAE4B,SAAS;EACzB3B,WAAW,EAAE2B,SAAS;EACtBJ,YAAY,EAAE,CAAC;EACfC,cAAc,EAAE;AAClB,CAAC;;AAED,MAAMI,eAAe,GAAGA,CAAAC,KAAK,MAAK;EAChC5B,iBAAiB,EAAE4B,KAAK,CAACC,cAAc,CAAC7B;AAC1C,CAAC,CAAC;;AAEF,OAAO,MAAM8B,qBAAqB,SAAStE,aAAa,CAAC;EACvD,OAAOuE,cAAcA,CAAA,EAAG;IACtBC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC1B;;EAEAC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACR,KAAK,GAAG;MACXS,GAAG,EAAED,KAAK,CAACvC,SAAS;MACpByC,iBAAiB,EAAE;IACrB,CAAC;;IAED,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;IAC1C,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,CAACD,IAAI,CAAC,IAAI,CAAC;IAClE,IAAI,CAACE,eAAe,GAAG,IAAI,CAACA,eAAe,CAACF,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAACG,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACH,IAAI,CAAC,IAAI,CAAC;EAClE;;EAEAI,gCAAgCA,CAACC,SAAS,EAAE;IAC1C,IAAI,IAAI,CAACT,KAAK,CAACvC,SAAS,KAAKgD,SAAS,CAAChD,SAAS,EAAE;MAChD,IAAI,CAACiD,QAAQ,CAAC,EAAET,GAAG,EAAEQ,SAAS,CAAChD,SAAS,CAAC,CAAC,EAAE,MAAM;QAChDzB,eAAe,CAACyE,SAAS,CAAChD,SAAS,CAAC;MACtC,CAAC,CAAC;IACJ;EACF;;EAEA8C,oBAAoBA,CAACI,IAAI,EAAE;IACzB,IAAI,CAACD,QAAQ,CAAC;MACZR,iBAAiB,EAAES;IACrB,CAAC,CAAC;EACJ;;EAEAR,SAASA,CAACF,GAAG,EAAE;IACb,IAAI,CAACD,KAAK,CAAClC,QAAQ,CAAC,CAAC;IACrB,IAAI,CAACkC,KAAK,CAACjC,SAAS,CAACkC,GAAG,CAAC;EAC3B;;EAEAI,qBAAqBA,CAACO,eAAe,EAAEC,YAAY,EAAE;IACnD,IAAI,CAACb,KAAK,CAAC5B,mBAAmB,CAACwC,eAAe,EAAEC,YAAY,CAAC;IAC7D,IAAI,CAACb,KAAK,CAAC3B,mBAAmB,CAACuC,eAAe,GAAG,IAAI,CAAC;EACxD;;EAEAN,eAAeA,CAAC,EAAEQ,GAAG,CAAC,CAAC,EAAE;IACvB,QAAQA,GAAG;MACT,KAAKxE,QAAQ,CAACyE,gBAAgB;QAC5B,IAAI,CAACf,KAAK,CAAChC,qBAAqB,CAAC,CAAC;QAClC,IAAI,CAACgC,KAAK,CAAClD,eAAe,CAACvB,CAAC,CAAC,mBAAmB,CAAC,CAAC;QAClD;MACF,KAAKe,QAAQ,CAAC0E,cAAc;QAC1B,IAAI,CAAChB,KAAK,CAACjB,mBAAmB,CAAC,CAAC;QAChC;MACF,KAAKzC,QAAQ,CAAC2E,gBAAgB,CAAE;UAC9B,MAAMC,GAAG,GAAG/E,eAAe,CAAC;YAC1BgF,QAAQ,EAAEvB,MAAM,CAACC,QAAQ,CAACsB,QAAQ;YAClCC,OAAO,EAAEhF,gBAAgB,CAAC,CAAC;YAC3BiF,IAAI,EAAEzB,MAAM,CAACC,QAAQ,CAACwB,IAAI;YAC1BC,UAAU,EAAE,CAACjF,WAAW,CAACZ,UAAU,CAAC6F,UAAU;UAChD,CAAC,CAAC;UACF1B,MAAM,CAACC,QAAQ,CAAC0B,OAAO,CAACL,GAAG,CAAC;UAC5B;QACF;MACA,KAAK5E,QAAQ,CAACkF,cAAc,CAAE;UAC5B,IAAI,CAACxB,KAAK,CAAChB,cAAc,CAAC,CAAC;UAC3B;QACF;MACA;QACE;IACJ;EACF;;EAEAyC,MAAMA,CAAA,EAAG,KAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA;IACP,MAAM;MACJtE,cAAc;MACdF,WAAW;MACXF,aAAa;MACbe,gBAAgB;MAChBC,6BAA6B;MAC7BI,QAAQ;MACRb,SAAS;MACTC,cAAc;MACdC,WAAW;MACXiB,MAAM;MACNC,cAAc;MACdC,MAAM;MACNP,WAAW;MACXC,YAAY;MACZC,WAAW;MACXC,aAAa;MACbC,SAAS;MACTO,YAAY;MACZC,cAAc;MACdC,gBAAgB;MAChBtC,eAAe;MACfG,cAAc;MACd4E,oBAAoB;MACpBC,iBAAiB;MACjBlE,iBAAiB;MACjB,GAAGmE;IACL,CAAC,GAAG,IAAI,CAAC/B,KAAK;;IAEd,MAAMgC,UAAU,GAAGzG,CAAC,CAAC,oBAAoB,CAAC;IAC1C,MAAM0G,YAAY,GAAG,GAAGD,UAAU,IAAI1E,cAAc,EAAE;IACtD,MAAM4E,SAAS,GAAG3G,CAAC,CAAC,4BAA4B,CAAC;;IAEjD,MAAM4G,UAAU,GAAG,EAACjF,aAAa,YAAbA,aAAa,CAAEkF,MAAM;;IAEzC,MAAMlB,GAAG,GAAG/E,eAAe,CAAC;MAC1BgF,QAAQ,EAAEvB,MAAM,CAACC,QAAQ,CAACsB,QAAQ;MAClCC,OAAO,EAAEhF,gBAAgB,CAAC,CAAC;MAC3BiF,IAAI,EAAEzB,MAAM,CAACC,QAAQ,CAACwB;IACxB,CAAC,CAAC;;IAEF,MAAMgB,sBAAsB,IAAAX,qBAAA;IAC1BxE,aAAa,CAACoF,MAAM,sBAAAX,sBAAA,GAApBD,qBAAA,CAAsBa,IAAI,qBAA1BZ,sBAAA,CAA4Ba,gCAAgC;;IAE9D,MAAMC,oBAAoB,GAAG,CAAC,IAAI7E,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC8E,GAAG,CAAC,CAAC;;IAEjE;MACE9F,KAAA,CAACpB,IAAI,IAACmH,UAAU,EAAE,KAAM,EAAC,aAAU,qBAAqB,KAAKZ,IAAI,EAAAa,QAAA;QAC9D,CAACtE,QAAQ;QACR9B,IAAA,CAAChB,IAAI,CAACqH,IAAI;;UAER,aAAU,6BAA6B;UACvCC,QAAQ,EAAEnE,SAAU;UACpBoE,OAAO,EAAE,IAAI,CAACzC,eAAgB,EAAAsC,QAAA;;UAE7BrH,CAAC,CAAC,mBAAmB,CAAC,IALlBe,QAAQ,CAACyE;QAML,CACZ;;QACA,CAACzC,QAAQ,IAAI,CAAC6D,UAAU;QACvB3F,IAAA,CAAChB,IAAI,CAACqH,IAAI;;UAERE,OAAO,EAAE,IAAI,CAACzC,eAAgB,EAAAsC,QAAA;;UAE7BvG,WAAW,CAACZ,UAAU,CAAC6F,UAAU,CAAC;UAC/B/F,CAAC,CAAC,iBAAiB,CAAC;UACpBA,CAAC,CAAC,kBAAkB,CAAC,IALpBe,QAAQ,CAAC2E;QAML,CACZ;;QACA3C,QAAQ;QACP9B,IAAA,CAAChB,IAAI,CAACqH,IAAI;;UAERE,OAAO,EAAE,IAAI,CAACzC,eAAgB,EAAAsC,QAAA;;UAE7BrH,CAAC,CAAC,iBAAiB,CAAC,IAHhBe,QAAQ,CAAC0E;QAIL,CACZ;;QACA1C,QAAQ;QACP9B,IAAA,CAAChB,IAAI,CAACqH,IAAI,IAAAD,QAAA;UACRpG,IAAA,CAACZ,SAAS;YACRoH,WAAW,EAAExG,IAAA,WAAAoG,QAAA,EAAOrH,CAAC,CAAC,UAAU,CAAC,EAAO,CAAE;YAC1C0H,UAAU,EAAE,IAAI,CAACzD,KAAK,CAACS,GAAI;YAC3BnC,QAAQ,EAAE,IAAI,CAACqC,SAAU;YACzBlD,cAAc,EAAEA,cAAe;UAChC,CAAC,IANYX,QAAQ,CAAC4G;QAOd,CACZ;;QACD1G,IAAA,CAAChB,IAAI,CAAC2H,OAAO,IAAE,CAAC;QACf1E,WAAW;QACVjC,IAAA,CAAChB,IAAI,CAACqH,IAAI,IAAAD,QAAA;UACRpG,IAAA,CAACV,SAAS;YACRgB,eAAe,EAAE,IAAI,CAACkD,KAAK,CAAClD,eAAgB;YAC5CG,cAAc,EAAE,IAAI,CAAC+C,KAAK,CAAC/C,cAAe;YAC1CG,WAAW,EAAEA,WAAY;YACzBE,cAAc,EAAEA,cAAe;YAC/BJ,aAAa,EAAEA,aAAc;YAC7BkG,QAAQ,EAAEnH,sBAAuB;YACjC2C,MAAM,EAAEA,MAAO;YACfC,cAAc,EAAEA,cAAe;YAC/BZ,gBAAgB,EAAEA,gBAAiB;YACnCC,6BAA6B,EAAEA,6BAA8B;YAC7DkB,gBAAgB,EAAEA,gBAAiB;YACnC3B,SAAS,EAAEA,SAAU;YACrBC,cAAc,EAAEA,cAAe;YAC/BC,WAAW,EAAEA,WAAY;YACzBmB,MAAM,EAAEA,MAAO;YACfkE,WAAW;YACTxG,IAAA,WAAM,aAAU,mBAAmB,EAAAoG,QAAA,EAAErH,CAAC,CAAC,SAAS,CAAC,EAAO,CACzD;;YACD8H,YAAY,EAAE9E,WAAY;UAC3B,CAAC,IArBYjC,QAAQ,CAACR;QAsBd,CACZ;;QACDU,IAAA,CAAChB,IAAI,CAAC8H,OAAO;;UAEXR,QAAQ,EAAEnE,SAAU;UACpB4E,KAAK,EAAEhI,CAAC,CAAC,UAAU,CAAE;UACrB0D,QAAQ,EAAE,IAAI,CAACe,KAAK,CAACf,QAAS,EAAA2D,QAAA;;UAE9BpG,IAAA,CAACb,iBAAiB;YAChB6H,gBAAgB,EAAEjI,CAAC,CAAC,eAAe,CAAE;YACrCkI,kBAAkB,EAAElI,CAAC,CAAC,mBAAmB,CAAE;YAC3C+B,cAAc,EAAEA,cAAe;YAC/BF,WAAW,EAAEA,WAAY;UAC1B,CAAC,IAVGd,QAAQ,CAACoH;QAWF,CAAC;QACdlF,YAAY;QACXhC,IAAA,CAAChB,IAAI,CAAC8H,OAAO;;UAEX,aAAU,2BAA2B;UACrCR,QAAQ,EAAEnE,SAAU;UACpB4E,KAAK,EAAEhI,CAAC,CAAC,OAAO,CAAE,EAAAqH,QAAA;;UAElBpG,IAAA,CAACd,cAAc;YACbwF,GAAG,EAAEA,GAAI;YACTyC,iBAAiB,EAAEpI,CAAC,CAAC,6BAA6B,CAAE;YACpDqI,kBAAkB,EAAErI,CAAC,CAAC,0BAA0B,CAAE;YAClD0G,YAAY,EAAEA,YAAa;YAC3BC,SAAS,EAAEA,SAAU;YACrBpF,eAAe,EAAEA,eAAgB;YACjCG,cAAc,EAAEA,cAAe;YAC/BG,WAAW,EAAEA,WAAY;YACzBqF,oBAAoB,EAAEA,oBAAqB;UAC5C,CAAC,IAfGnG,QAAQ,CAACuH;QAgBF,CACf;;QACA,CAACvF,QAAQ,IAAII,aAAa;QACzBlC,IAAA,CAAChB,IAAI,CAACqH,IAAI;;UAERE,OAAO,EAAE,IAAI,CAACzC,eAAgB,EAAAsC,QAAA;;UAE7BrH,CAAC,CAAC,iBAAiB,CAAC,IAHhBe,QAAQ,CAACkF;QAIL,CACZ;;QACDhF,IAAA,CAAChB,IAAI,CAAC2H,OAAO,IAAE,CAAC;QACf,CAAC7E,QAAQ;QACR,IAAI,CAACkB,KAAK,CAACU,iBAAiB;QAC1BtD,KAAA,CAAAF,SAAA,IAAAkG,QAAA;UACEpG,IAAA,CAAChB,IAAI,CAAC8H,OAAO,IAACC,KAAK,EAAEhI,CAAC,CAAC,qBAAqB,CAAE,EAAAqH,QAAA;YAC5CpG,IAAA,CAACT,oBAAoB;cACnBqB,WAAW,EAAEF,aAAa,CAAC4G,EAAG;cAC9BvD,oBAAoB,EAAE,IAAI,CAACA,oBAAqB;cAChDL,iBAAiB,EAAE,IAAI,CAACV,KAAK,CAACU,iBAAkB;cAChD2B,oBAAoB,EAAEA,oBAAqB;cAC3CC,iBAAiB,EAAEA,iBAAkB;cACrCiC,WAAW;YACZ,CAAC;UACU,CAAC;UACfvH,IAAA,CAAChB,IAAI,CAAC2H,OAAO,IAAE,CAAC;QAChB,CAAC;;QAEH3G,IAAA,CAAChB,IAAI,IAAAoH,QAAA;UACHpG,IAAA,CAACT,oBAAoB;YACnBqB,WAAW,EAAEF,aAAa,CAAC4G,EAAG;YAC9BvD,oBAAoB,EAAE,IAAI,CAACA,oBAAqB;YAChDsB,oBAAoB,EAAEA,oBAAqB;YAC3CC,iBAAiB,EAAEA,iBAAkB;YACrCiC,WAAW;UACZ,CAAC;QACE,CACP;;QACC,IAAI;QACPzF,QAAQ,IAAI,CAAC0F,QAAA,CAAQ9G,aAAa,qBAAA0E,qBAAA,GAAb1E,aAAa,CAAE+G,QAAQ,qBAAvBrC,qBAAA,CAAyBsC,aAAa,CAAC;QAC3D1H,IAAA,CAAChB,IAAI,CAACqH,IAAI,IAAAD,QAAA;UACRpG,IAAA,CAACN,gBAAgB;YACfiI,SAAS,EAAC,OAAO;YACjBnB,WAAW,EAAEzH,CAAC,CAAC,oBAAoB,CAAE;UACtC,CAAC,IAJYe,QAAQ,CAAC8H;QAKd,CACZ;;;QAED5H,IAAA,CAAChB,IAAI,CAACqH,IAAI,IAAAD,QAAA;UACRpG,IAAA,CAACX,oBAAoB;YACnBiB,eAAe,EAAE,IAAI,CAACkD,KAAK,CAAClD,eAAgB;YAC5CmB,gBAAgB,EAAEA,gBAAiB;YACnCiB,YAAY,EAAEA,YAAa;YAC3BC,cAAc,EAAEA,cAAe;YAC/BrB,QAAQ,EAAE,IAAI,CAACuC,qBAAsB;YACrC/B,QAAQ,EAAEA,QAAS;YACnB+D,sBAAsB,EAAEA,sBAAuB;YAC/CW,WAAW,EAAExG,IAAA,WAAAoG,QAAA,EAAOrH,CAAC,CAAC,2BAA2B,CAAC,EAAO,CAAE;UAC5D,CAAC,IAVYe,QAAQ,CAAC+H;QAWd,CAAC;MACR,CAAC;;EAEX,CAAC;EAAAC,iCAAAxD,GAAA,EAAAyD,IAAA;IAAA,KAAAzD,GAAA,IAAA0D,IAAA,CAAAD,IAAA,GACH;AAEA7E,qBAAqB,CAAC7C,SAAS,GAAGA,SAAS;AAC3C6C,qBAAqB,CAACL,YAAY,GAAGA,YAAY,CAAC,MAAAoF,QAAA;;AAEnCnJ,OAAO,CAACiE,eAAe,CAAC,CAACG,qBAAqB,CAAC,CAA9D,eAAA+E,QAAA,CAA+D,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAtF,SAAA,MAAAoF,cAAA,WAAAA,cAAA,CAAAG,QAAA,CAvUzDhI,SAAS,yGAAA6H,cAAA,CAAAG,QAAA,CAmCTxF,YAAY,4GAAAqF,cAAA,CAAAG,QAAA,CAOZtF,eAAe,+GAAAmF,cAAA,CAAAG,QAAA,CAIRnF,qBAAqB,qHAAAgF,cAAA,CAAAG,QAAA,CAAAJ,QAAA,+HAAAK,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAxF,SAAA,CAAAwF,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}