{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { isDataset, isQueryResponse } from '../types';\nexport function columnsByType(datasource, type) {\n  if (isDataset(datasource) || isQueryResponse(datasource)) {\n    const columns = datasource.columns;\n    const filteredColumns = columns.filter((col) => type === undefined || col.type_generic === type);\n    return filteredColumns.sort((col1, col2) => {\n      const opt1Name = 'verbose_name' in col1 ?\n      col1.verbose_name || col1.column_name :\n      col1.column_name;\n      const opt2Name = 'verbose_name' in col2 ?\n      col2.verbose_name || col2.column_name :\n      col2.column_name;\n      return opt1Name.toLowerCase() > opt2Name.toLowerCase() ? 1 : -1;\n    });\n  }\n  return [];\n}\n/**\n * Convert Datasource columns to column choices\n */\nexport default function columnChoices(datasource, type) {\n  return columnsByType(datasource, type).map((col) => [\n  col.column_name,\n  'verbose_name' in col ?\n  col.verbose_name || col.column_name :\n  col.column_name]\n  );\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(columnsByType, \"columnsByType\", \"/app/superset-frontend/packages/superset-ui-chart-controls/src/utils/columnChoices.ts\");reactHotLoader.register(columnChoices, \"columnChoices\", \"/app/superset-frontend/packages/superset-ui-chart-controls/src/utils/columnChoices.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isDataset","isQueryResponse","columnsByType","datasource","type","columns","filteredColumns","filter","col","undefined","type_generic","sort","col1","col2","opt1Name","verbose_name","column_name","opt2Name","toLowerCase","columnChoices","map","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/packages/superset-ui-chart-controls/src/utils/columnChoices.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType, QueryColumn, QueryResponse } from '@superset-ui/core';\nimport { ColumnMeta, Dataset, isDataset, isQueryResponse } from '../types';\n\nexport function columnsByType(\n  datasource?: Dataset | QueryResponse | null,\n  type?: GenericDataType,\n): (ColumnMeta | QueryColumn)[] {\n  if (isDataset(datasource) || isQueryResponse(datasource)) {\n    const columns = datasource.columns as (ColumnMeta | QueryColumn)[];\n    const filteredColumns = columns.filter(\n      col => type === undefined || col.type_generic === type,\n    );\n    return filteredColumns.sort(\n      (col1: ColumnMeta | QueryColumn, col2: ColumnMeta | QueryColumn) => {\n        const opt1Name =\n          'verbose_name' in col1\n            ? col1.verbose_name || col1.column_name\n            : col1.column_name;\n        const opt2Name =\n          'verbose_name' in col2\n            ? col2.verbose_name || col2.column_name\n            : col2.column_name;\n        return opt1Name.toLowerCase() > opt2Name.toLowerCase() ? 1 : -1;\n      },\n    );\n  }\n  return [];\n}\n\n/**\n * Convert Datasource columns to column choices\n */\nexport default function columnChoices(\n  datasource?: Dataset | QueryResponse | null,\n  type?: GenericDataType,\n): [string, string][] {\n  return columnsByType(datasource, type).map(\n    (col: ColumnMeta | QueryColumn): [string, string] => [\n      col.column_name,\n      'verbose_name' in col\n        ? col.verbose_name || col.column_name\n        : col.column_name,\n    ],\n  );\n}\n"],"mappings":"uSAmBA,SAA8BA,SAAS,EAAEC,eAAe,QAAQ,UAAU;AAE1E,OAAM,SAAUC,aAAaA,CAC3BC,UAA2C,EAC3CC,IAAsB;EAEtB,IAAIJ,SAAS,CAACG,UAAU,CAAC,IAAIF,eAAe,CAACE,UAAU,CAAC,EAAE;IACxD,MAAME,OAAO,GAAGF,UAAU,CAACE,OAAuC;IAClE,MAAMC,eAAe,GAAGD,OAAO,CAACE,MAAM,CACpC,CAAAC,GAAG,KAAIJ,IAAI,KAAKK,SAAS,IAAID,GAAG,CAACE,YAAY,KAAKN,IAAI,CACvD;IACD,OAAOE,eAAe,CAACK,IAAI,CACzB,CAACC,IAA8B,EAAEC,IAA8B,KAAI;MACjE,MAAMC,QAAQ,GACZ,cAAc,IAAIF,IAAI;MAClBA,IAAI,CAACG,YAAY,IAAIH,IAAI,CAACI,WAAW;MACrCJ,IAAI,CAACI,WAAW;MACtB,MAAMC,QAAQ,GACZ,cAAc,IAAIJ,IAAI;MAClBA,IAAI,CAACE,YAAY,IAAIF,IAAI,CAACG,WAAW;MACrCH,IAAI,CAACG,WAAW;MACtB,OAAOF,QAAQ,CAACI,WAAW,EAAE,GAAGD,QAAQ,CAACC,WAAW,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IACjE,CAAC,CACF;;EAEH,OAAO,EAAE;AACX;AAEA;;;AAGA,eAAc,SAAUC,aAAaA,CACnChB,UAA2C,EAC3CC,IAAsB;EAEtB,OAAOF,aAAa,CAACC,UAAU,EAAEC,IAAI,CAAC,CAACgB,GAAG,CACxC,CAACZ,GAA6B,KAAuB;EACnDA,GAAG,CAACQ,WAAW;EACf,cAAc,IAAIR,GAAG;EACjBA,GAAG,CAACO,YAAY,IAAIP,GAAG,CAACQ,WAAW;EACnCR,GAAG,CAACQ,WAAW;EACpB,CACF;AACH,CAAC,mBAAAK,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAd,SAAA,MAAAY,cAAA,WAAAA,cAAA,CAAAG,QAAA,CAzCetB,aAAa,4GAAAmB,cAAA,CAAAG,QAAA,CA6BLL,aAAa,oIAAAM,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAhB,SAAA,CAAAgB,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}