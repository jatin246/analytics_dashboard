{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { css, styled, t } from '@superset-ui/core';\nimport Alert from 'src/components/Alert';\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport Loading from 'src/components/Loading';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { EmptyWrapperType } from 'src/components/TableView/TableView';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst CostEstimateModalStyles = styled.div`\n  ${({ theme }) => css`\n    font-size: ${theme.typography.sizes.s};\n  `}\n`;\nconst EstimateQueryCostButton = ({ getEstimate, queryEditorId, tooltip = '', disabled = false }) => {\n  const queryCostEstimate = useSelector((state) => {var _state$sqlLab$queryCo;return (_state$sqlLab$queryCo = state.sqlLab.queryCostEstimates) == null ? void 0 : _state$sqlLab$queryCo[queryEditorId];});\n  const { selectedText } = useQueryEditor(queryEditorId, ['selectedText']);\n  const { cost } = queryCostEstimate || {};\n  const tableData = useMemo(() => Array.isArray(cost) ? cost : [], [cost]);\n  const columns = useMemo(() => Array.isArray(cost) && cost.length ?\n  Object.keys(cost[0]).map((key) => ({ accessor: key, Header: key })) :\n  [], [cost]);\n  // A call back method to pass an event handler function as a prop to the Button element.\n  // Refer: https://reactjs.org/docs/handling-events.html\n  const onClickHandler = () => {\n    getEstimate();\n  };\n  const renderModalBody = () => {\n    if (queryCostEstimate != null && queryCostEstimate.error) {\n      return _jsx(Alert, { type: \"error\", message: queryCostEstimate == null ? void 0 : queryCostEstimate.error }, \"query-estimate-error\");\n    }\n    if (queryCostEstimate != null && queryCostEstimate.completed) {\n      return _jsx(CostEstimateModalStyles, { children:\n        _jsx(TableView, { columns: columns, data: tableData, withPagination: false, emptyWrapperType: EmptyWrapperType.Small }) }\n      );\n    }\n    return _jsx(Loading, { position: \"normal\" });\n  };\n  const btnText = selectedText ?\n  t('Estimate selected query cost') :\n  t('Estimate cost');\n  return _jsx(\"span\", { className: \"EstimateQueryCostButton\", children:\n    _jsx(ModalTrigger, { modalTitle: t('Cost estimate'), modalBody: renderModalBody(), triggerNode: _jsx(Button, { style: { height: 32, padding: '4px 15px' }, onClick: onClickHandler, tooltip: tooltip, disabled: disabled, children:\n        btnText }, \"query-estimate-btn\"\n      ) }) }\n  );\n};__signature__(EstimateQueryCostButton, \"useSelector{queryCostEstimate}\\nuseQueryEditor{{ selectedText }}\\nuseMemo{tableData}\\nuseMemo{columns}\", () => [useSelector, useQueryEditor]);const _default =\nEstimateQueryCostButton;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CostEstimateModalStyles, \"CostEstimateModalStyles\", \"/app/superset-frontend/src/SqlLab/components/EstimateQueryCostButton/index.tsx\");reactHotLoader.register(EstimateQueryCostButton, \"EstimateQueryCostButton\", \"/app/superset-frontend/src/SqlLab/components/EstimateQueryCostButton/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/SqlLab/components/EstimateQueryCostButton/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useMemo","useSelector","css","styled","t","Alert","TableView","Button","Loading","ModalTrigger","EmptyWrapperType","useQueryEditor","jsx","_jsx","CostEstimateModalStyles","div","theme","typography","sizes","s","EstimateQueryCostButton","getEstimate","queryEditorId","tooltip","disabled","queryCostEstimate","state","_state$sqlLab$queryCo","sqlLab","queryCostEstimates","selectedText","cost","tableData","Array","isArray","columns","length","Object","keys","map","key","accessor","Header","onClickHandler","renderModalBody","error","type","message","completed","children","data","withPagination","emptyWrapperType","Small","position","btnText","className","modalTitle","modalBody","triggerNode","style","height","padding","onClick","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/SqlLab/components/EstimateQueryCostButton/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { css, styled, t } from '@superset-ui/core';\n\nimport Alert from 'src/components/Alert';\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport Loading from 'src/components/Loading';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { EmptyWrapperType } from 'src/components/TableView/TableView';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { SqlLabRootState, QueryCostEstimate } from 'src/SqlLab/types';\n\nexport interface EstimateQueryCostButtonProps {\n  getEstimate: Function;\n  queryEditorId: string;\n  tooltip?: string;\n  disabled?: boolean;\n}\n\nconst CostEstimateModalStyles = styled.div`\n  ${({ theme }) => css`\n    font-size: ${theme.typography.sizes.s};\n  `}\n`;\n\nconst EstimateQueryCostButton = ({\n  getEstimate,\n  queryEditorId,\n  tooltip = '',\n  disabled = false,\n}: EstimateQueryCostButtonProps) => {\n  const queryCostEstimate = useSelector<\n    SqlLabRootState,\n    QueryCostEstimate | undefined\n  >(state => state.sqlLab.queryCostEstimates?.[queryEditorId]);\n\n  const { selectedText } = useQueryEditor(queryEditorId, ['selectedText']);\n  const { cost } = queryCostEstimate || {};\n  const tableData = useMemo(() => (Array.isArray(cost) ? cost : []), [cost]);\n  const columns = useMemo(\n    () =>\n      Array.isArray(cost) && cost.length\n        ? Object.keys(cost[0]).map(key => ({ accessor: key, Header: key }))\n        : [],\n    [cost],\n  );\n\n  // A call back method to pass an event handler function as a prop to the Button element.\n  // Refer: https://reactjs.org/docs/handling-events.html\n  const onClickHandler = () => {\n    getEstimate();\n  };\n\n  const renderModalBody = () => {\n    if (queryCostEstimate?.error) {\n      return (\n        <Alert\n          key=\"query-estimate-error\"\n          type=\"error\"\n          message={queryCostEstimate?.error}\n        />\n      );\n    }\n    if (queryCostEstimate?.completed) {\n      return (\n        <CostEstimateModalStyles>\n          <TableView\n            columns={columns}\n            data={tableData}\n            withPagination={false}\n            emptyWrapperType={EmptyWrapperType.Small}\n          />\n        </CostEstimateModalStyles>\n      );\n    }\n    return <Loading position=\"normal\" />;\n  };\n\n  const btnText = selectedText\n    ? t('Estimate selected query cost')\n    : t('Estimate cost');\n  return (\n    <span className=\"EstimateQueryCostButton\">\n      <ModalTrigger\n        modalTitle={t('Cost estimate')}\n        modalBody={renderModalBody()}\n        triggerNode={\n          <Button\n            style={{ height: 32, padding: '4px 15px' }}\n            onClick={onClickHandler}\n            key=\"query-estimate-btn\"\n            tooltip={tooltip}\n            disabled={disabled}\n          >\n            {btnText}\n          </Button>\n        }\n      />\n    </span>\n  );\n};\n\nexport default EstimateQueryCostButton;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}