{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { css, logging, SupersetClient, t, tn } from '@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport MetadataBar, { MetadataType } from 'src/components/MetadataBar';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { applyColors, resetColors } from 'src/utils/colorScheme';\nimport { useExploreAdditionalActionsMenu } from '../useExploreAdditionalActionsMenu';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  canOverwrite: PropTypes.bool.isRequired,\n  canDownload: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  formData: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape,\n  saveDisabled: PropTypes.bool\n};\n\nconst saveButtonStyles = (theme) => css`\n  color: ${theme.colors.primary.dark2};\n  & > span[role='img'] {\n    margin-right: 0;\n  }\n`;\n\nconst additionalItemsStyles = (theme) => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nexport const ExploreChartHeader = ({\n  dashboardId,\n  slice,\n  actions,\n  formData,\n  ownState,\n  chart,\n  user,\n  canOverwrite,\n  canDownload,\n  isStarred,\n  sliceName,\n  saveDisabled,\n  metadata\n}) => {\n  const dispatch = useDispatch();\n  const { latestQueryFormData, sliceFormData } = chart;\n  const [isPropertiesModalOpen, setIsPropertiesModalOpen] = useState(false);\n\n  const updateCategoricalNamespace = async () => {\n    const { dashboards } = metadata || {};\n    const dashboard =\n    dashboardId && dashboards && dashboards.find((d) => d.id === dashboardId);\n\n    if (!dashboard) {\n      // clean up color namespace and shared color maps\n      // to avoid colors spill outside of dashboard context\n      resetColors(metadata == null ? void 0 : metadata.color_namespace);\n      return;\n    }\n\n    if (dashboard) {\n      try {var _response$json;\n        // Dashboards from metadata don't contain the json_metadata field\n        // to avoid unnecessary payload. Here we query for the dashboard json_metadata.\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboard.id}`\n        });\n        const result = response == null ? void 0 : (_response$json = response.json) == null ? void 0 : _response$json.result;\n\n        // setting the chart to use the dashboard custom label colors if any\n        const dashboardMetadata = JSON.parse(result.json_metadata);\n        applyColors(dashboardMetadata);\n      } catch (error) {\n        logging.info(t('Unable to retrieve dashboard colors'));\n      }\n    }\n  };\n\n  useEffect(() => {\n    updateCategoricalNamespace();\n  }, []);\n\n  const openPropertiesModal = () => {\n    setIsPropertiesModalOpen(true);\n  };\n\n  const closePropertiesModal = () => {\n    setIsPropertiesModalOpen(false);\n  };\n\n  const showModal = useCallback(() => {\n    dispatch(setSaveChartModalVisibility(true));\n  }, [dispatch]);\n\n  const updateSlice = useCallback(\n    (slice) => {\n      dispatch(sliceUpdated(slice));\n    },\n    [dispatch]\n  );\n\n  const history = useHistory();\n  const { redirectSQLLab } = actions;\n\n  const redirectToSQLLab = useCallback(\n    (formData, openNewWindow = false) => {\n      redirectSQLLab(formData, !openNewWindow && history);\n    },\n    [redirectSQLLab, history]\n  );\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] =\n  useExploreAdditionalActionsMenu(\n    latestQueryFormData,\n    canDownload,\n    slice,\n    redirectToSQLLab,\n    openPropertiesModal,\n    ownState,\n    metadata == null ? void 0 : metadata.dashboards\n  );\n\n  const metadataBar = useMemo(() => {\n    if (!metadata) {\n      return null;\n    }\n    const items = [];\n    items.push({\n      type: MetadataType.Dashboards,\n      title:\n      metadata.dashboards.length > 0 ?\n      tn(\n        'Added to 1 dashboard',\n        'Added to %s dashboards',\n        metadata.dashboards.length,\n        metadata.dashboards.length\n      ) :\n      t('Not added to any dashboard'),\n      description:\n      metadata.dashboards.length > 0 ?\n      t(\n        'You can preview the list of dashboards in the chart settings dropdown.'\n      ) :\n      undefined\n    });\n    items.push({\n      type: MetadataType.LastModified,\n      value: metadata.changed_on_humanized,\n      modifiedBy: metadata.changed_by || t('Not available')\n    });\n    items.push({\n      type: MetadataType.Owner,\n      createdBy: metadata.created_by || t('Not available'),\n      owners: metadata.owners.length > 0 ? metadata.owners : t('None'),\n      createdOn: metadata.created_on_humanized\n    });\n    if (slice != null && slice.description) {\n      items.push({\n        type: MetadataType.Description,\n        value: slice == null ? void 0 : slice.description\n      });\n    }\n    return _jsx(MetadataBar, { items: items, tooltipPlacement: \"bottom\" });\n  }, [metadata, slice == null ? void 0 : slice.description]);\n\n  const oldSliceName = slice == null ? void 0 : slice.slice_name;\n  return (\n    _jsxs(_Fragment, { children: [\n      _jsx(PageHeaderWithActions, {\n        editableTitleProps: {\n          title: sliceName,\n          canEdit:\n          !slice ||\n          canOverwrite ||\n          ((slice == null ? void 0 : slice.owners) || []).includes(user == null ? void 0 : user.userId),\n          onSave: actions.updateChartTitle,\n          placeholder: t('Add the name of the chart'),\n          label: t('Chart title')\n        },\n        showTitlePanelItems: !!slice,\n        certificatiedBadgeProps: {\n          certifiedBy: slice == null ? void 0 : slice.certified_by,\n          details: slice == null ? void 0 : slice.certification_details\n        },\n        showFaveStar: !!(user != null && user.userId),\n        faveStarProps: {\n          itemId: slice == null ? void 0 : slice.slice_id,\n          fetchFaveStar: actions.fetchFaveStar,\n          saveFaveStar: actions.saveFaveStar,\n          isStarred,\n          showTooltip: true\n        },\n        titlePanelAdditionalItems:\n        _jsxs(\"div\", { css: additionalItemsStyles, children: [\n          sliceFormData ?\n          _jsx(AlteredSliceTag, {\n            className: \"altered\",\n            origFormData: {\n              ...sliceFormData,\n              chartTitle: oldSliceName\n            },\n            currentFormData: { ...formData, chartTitle: sliceName } }\n          ) :\n          null,\n          metadataBar] }\n        ),\n\n        rightPanelAdditionalItems:\n        _jsx(Tooltip, {\n          title:\n          saveDisabled ?\n          t('Add required control values to save chart') :\n          null, children:\n\n\n\n          _jsx(\"div\", { children:\n            _jsxs(Button, {\n              buttonStyle: \"secondary\",\n              onClick: showModal,\n              disabled: saveDisabled,\n              \"data-test\": \"query-save-button\",\n              css: saveButtonStyles, children: [\n\n              _jsx(Icons.SaveOutlined, { iconSize: \"l\" }),\n              t('Save')] }\n            ) }\n          ) }\n        ),\n\n        additionalActionsMenu: menu,\n        menuDropdownProps: {\n          visible: isDropdownVisible,\n          onVisibleChange: setIsDropdownVisible\n        } }\n      ),\n      isPropertiesModalOpen &&\n      _jsx(PropertiesModal, {\n        show: isPropertiesModalOpen,\n        onHide: closePropertiesModal,\n        onSave: updateSlice,\n        slice: slice }\n      )] }\n\n    ));\n\n};__signature__(ExploreChartHeader, \"useDispatch{dispatch}\\nuseState{[isPropertiesModalOpen, setIsPropertiesModalOpen](false)}\\nuseEffect{}\\nuseCallback{showModal}\\nuseCallback{updateSlice}\\nuseHistory{history}\\nuseCallback{redirectToSQLLab}\\nuseExploreAdditionalActionsMenu{[menu, isDropdownVisible, setIsDropdownVisible]}\\nuseMemo{metadataBar}\", () => [useDispatch, useHistory, useExploreAdditionalActionsMenu]);\n\nExploreChartHeader.propTypes = propTypes;const _default =\n\nExploreChartHeader;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(saveButtonStyles, \"saveButtonStyles\", \"/app/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(additionalItemsStyles, \"additionalItemsStyles\", \"/app/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(ExploreChartHeader, \"ExploreChartHeader\", \"/app/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","useHistory","useDispatch","PropTypes","Tooltip","css","logging","SupersetClient","t","tn","chartPropShape","AlteredSliceTag","Button","Icons","PropertiesModal","sliceUpdated","PageHeaderWithActions","MetadataBar","MetadataType","setSaveChartModalVisibility","applyColors","resetColors","useExploreAdditionalActionsMenu","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","propTypes","actions","object","isRequired","canOverwrite","bool","canDownload","dashboardId","number","isStarred","slice","sliceName","string","table_name","formData","ownState","timeout","chart","saveDisabled","saveButtonStyles","theme","colors","primary","dark2","additionalItemsStyles","gridUnit","ExploreChartHeader","user","metadata","dispatch","latestQueryFormData","sliceFormData","isPropertiesModalOpen","setIsPropertiesModalOpen","updateCategoricalNamespace","dashboards","dashboard","find","d","id","color_namespace","_response$json","response","get","endpoint","result","json","dashboardMetadata","JSON","parse","json_metadata","error","info","openPropertiesModal","closePropertiesModal","showModal","updateSlice","history","redirectSQLLab","redirectToSQLLab","openNewWindow","menu","isDropdownVisible","setIsDropdownVisible","metadataBar","items","push","type","Dashboards","title","length","description","undefined","LastModified","value","changed_on_humanized","modifiedBy","changed_by","Owner","createdBy","created_by","owners","createdOn","created_on_humanized","Description","tooltipPlacement","oldSliceName","slice_name","children","editableTitleProps","canEdit","includes","userId","onSave","updateChartTitle","placeholder","label","showTitlePanelItems","certificatiedBadgeProps","certifiedBy","certified_by","details","certification_details","showFaveStar","faveStarProps","itemId","slice_id","fetchFaveStar","saveFaveStar","showTooltip","titlePanelAdditionalItems","className","origFormData","chartTitle","currentFormData","rightPanelAdditionalItems","buttonStyle","onClick","disabled","SaveOutlined","iconSize","additionalActionsMenu","menuDropdownProps","visible","onVisibleChange","show","onHide","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { css, logging, SupersetClient, t, tn } from '@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport MetadataBar, { MetadataType } from 'src/components/MetadataBar';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { applyColors, resetColors } from 'src/utils/colorScheme';\nimport { useExploreAdditionalActionsMenu } from '../useExploreAdditionalActionsMenu';\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  canOverwrite: PropTypes.bool.isRequired,\n  canDownload: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  formData: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape,\n  saveDisabled: PropTypes.bool,\n};\n\nconst saveButtonStyles = theme => css`\n  color: ${theme.colors.primary.dark2};\n  & > span[role='img'] {\n    margin-right: 0;\n  }\n`;\n\nconst additionalItemsStyles = theme => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nexport const ExploreChartHeader = ({\n  dashboardId,\n  slice,\n  actions,\n  formData,\n  ownState,\n  chart,\n  user,\n  canOverwrite,\n  canDownload,\n  isStarred,\n  sliceName,\n  saveDisabled,\n  metadata,\n}) => {\n  const dispatch = useDispatch();\n  const { latestQueryFormData, sliceFormData } = chart;\n  const [isPropertiesModalOpen, setIsPropertiesModalOpen] = useState(false);\n\n  const updateCategoricalNamespace = async () => {\n    const { dashboards } = metadata || {};\n    const dashboard =\n      dashboardId && dashboards && dashboards.find(d => d.id === dashboardId);\n\n    if (!dashboard) {\n      // clean up color namespace and shared color maps\n      // to avoid colors spill outside of dashboard context\n      resetColors(metadata?.color_namespace);\n      return;\n    }\n\n    if (dashboard) {\n      try {\n        // Dashboards from metadata don't contain the json_metadata field\n        // to avoid unnecessary payload. Here we query for the dashboard json_metadata.\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboard.id}`,\n        });\n        const result = response?.json?.result;\n\n        // setting the chart to use the dashboard custom label colors if any\n        const dashboardMetadata = JSON.parse(result.json_metadata);\n        applyColors(dashboardMetadata);\n      } catch (error) {\n        logging.info(t('Unable to retrieve dashboard colors'));\n      }\n    }\n  };\n\n  useEffect(() => {\n    updateCategoricalNamespace();\n  }, []);\n\n  const openPropertiesModal = () => {\n    setIsPropertiesModalOpen(true);\n  };\n\n  const closePropertiesModal = () => {\n    setIsPropertiesModalOpen(false);\n  };\n\n  const showModal = useCallback(() => {\n    dispatch(setSaveChartModalVisibility(true));\n  }, [dispatch]);\n\n  const updateSlice = useCallback(\n    slice => {\n      dispatch(sliceUpdated(slice));\n    },\n    [dispatch],\n  );\n\n  const history = useHistory();\n  const { redirectSQLLab } = actions;\n\n  const redirectToSQLLab = useCallback(\n    (formData, openNewWindow = false) => {\n      redirectSQLLab(formData, !openNewWindow && history);\n    },\n    [redirectSQLLab, history],\n  );\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] =\n    useExploreAdditionalActionsMenu(\n      latestQueryFormData,\n      canDownload,\n      slice,\n      redirectToSQLLab,\n      openPropertiesModal,\n      ownState,\n      metadata?.dashboards,\n    );\n\n  const metadataBar = useMemo(() => {\n    if (!metadata) {\n      return null;\n    }\n    const items = [];\n    items.push({\n      type: MetadataType.Dashboards,\n      title:\n        metadata.dashboards.length > 0\n          ? tn(\n              'Added to 1 dashboard',\n              'Added to %s dashboards',\n              metadata.dashboards.length,\n              metadata.dashboards.length,\n            )\n          : t('Not added to any dashboard'),\n      description:\n        metadata.dashboards.length > 0\n          ? t(\n              'You can preview the list of dashboards in the chart settings dropdown.',\n            )\n          : undefined,\n    });\n    items.push({\n      type: MetadataType.LastModified,\n      value: metadata.changed_on_humanized,\n      modifiedBy: metadata.changed_by || t('Not available'),\n    });\n    items.push({\n      type: MetadataType.Owner,\n      createdBy: metadata.created_by || t('Not available'),\n      owners: metadata.owners.length > 0 ? metadata.owners : t('None'),\n      createdOn: metadata.created_on_humanized,\n    });\n    if (slice?.description) {\n      items.push({\n        type: MetadataType.Description,\n        value: slice?.description,\n      });\n    }\n    return <MetadataBar items={items} tooltipPlacement=\"bottom\" />;\n  }, [metadata, slice?.description]);\n\n  const oldSliceName = slice?.slice_name;\n  return (\n    <>\n      <PageHeaderWithActions\n        editableTitleProps={{\n          title: sliceName,\n          canEdit:\n            !slice ||\n            canOverwrite ||\n            (slice?.owners || []).includes(user?.userId),\n          onSave: actions.updateChartTitle,\n          placeholder: t('Add the name of the chart'),\n          label: t('Chart title'),\n        }}\n        showTitlePanelItems={!!slice}\n        certificatiedBadgeProps={{\n          certifiedBy: slice?.certified_by,\n          details: slice?.certification_details,\n        }}\n        showFaveStar={!!user?.userId}\n        faveStarProps={{\n          itemId: slice?.slice_id,\n          fetchFaveStar: actions.fetchFaveStar,\n          saveFaveStar: actions.saveFaveStar,\n          isStarred,\n          showTooltip: true,\n        }}\n        titlePanelAdditionalItems={\n          <div css={additionalItemsStyles}>\n            {sliceFormData ? (\n              <AlteredSliceTag\n                className=\"altered\"\n                origFormData={{\n                  ...sliceFormData,\n                  chartTitle: oldSliceName,\n                }}\n                currentFormData={{ ...formData, chartTitle: sliceName }}\n              />\n            ) : null}\n            {metadataBar}\n          </div>\n        }\n        rightPanelAdditionalItems={\n          <Tooltip\n            title={\n              saveDisabled\n                ? t('Add required control values to save chart')\n                : null\n            }\n          >\n            {/* needed to wrap button in a div - antd tooltip doesn't work with disabled button */}\n            <div>\n              <Button\n                buttonStyle=\"secondary\"\n                onClick={showModal}\n                disabled={saveDisabled}\n                data-test=\"query-save-button\"\n                css={saveButtonStyles}\n              >\n                <Icons.SaveOutlined iconSize=\"l\" />\n                {t('Save')}\n              </Button>\n            </div>\n          </Tooltip>\n        }\n        additionalActionsMenu={menu}\n        menuDropdownProps={{\n          visible: isDropdownVisible,\n          onVisibleChange: setIsDropdownVisible,\n        }}\n      />\n      {isPropertiesModalOpen && (\n        <PropertiesModal\n          show={isPropertiesModalOpen}\n          onHide={closePropertiesModal}\n          onSave={updateSlice}\n          slice={slice}\n        />\n      )}\n    </>\n  );\n};\n\nExploreChartHeader.propTypes = propTypes;\n\nexport default ExploreChartHeader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}