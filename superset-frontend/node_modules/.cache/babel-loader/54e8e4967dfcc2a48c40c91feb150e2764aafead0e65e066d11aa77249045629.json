{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { isAdhocColumn, t, styled, css, DatasourceType } from '@superset-ui/core';\nimport { isSavedExpression } from '@superset-ui/chart-controls';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport { POPOVER_INITIAL_HEIGHT, POPOVER_INITIAL_WIDTH } from 'src/explore/constants';\nimport useResizeButton from './useResizeButton';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\nconst getInitialColumnValues = (editedColumn) => {\n  if (!editedColumn) {\n    return [undefined, undefined, undefined];\n  }\n  if (isAdhocColumn(editedColumn)) {\n    return [editedColumn, undefined, undefined];\n  }\n  if (isSavedExpression(editedColumn)) {\n    return [undefined, editedColumn, undefined];\n  }\n  return [undefined, undefined, editedColumn];\n};\nconst ColumnSelectPopover = ({ columns, editedColumn, getCurrentTab, hasCustomLabel, isTemporal, label, onChange, onClose, setDatasetModal, setLabel, disabledTabs = new Set() }) => {\n  const datasourceType = useSelector((state) => state.explore.datasource.type);\n  const [initialLabel] = useState(label);\n  const [initialAdhocColumn, initialCalculatedColumn, initialSimpleColumn] = getInitialColumnValues(editedColumn);\n  const [adhocColumn, setAdhocColumn] = useState(initialAdhocColumn);\n  const [selectedCalculatedColumn, setSelectedCalculatedColumn] = useState(initialCalculatedColumn);\n  const [selectedSimpleColumn, setSelectedSimpleColumn] = useState(initialSimpleColumn);\n  const [selectedTab, setSelectedTab] = useState(null);\n  const [resizeButton, width, height] = useResizeButton(POPOVER_INITIAL_WIDTH, POPOVER_INITIAL_HEIGHT);\n  const sqlEditorRef = useRef(null);\n  const [calculatedColumns, simpleColumns] = useMemo(() => columns == null ? void 0 : columns.reduce((acc, column) => {\n    if (column.expression) {\n      acc[0].push(column);\n    } else\n    {\n      acc[1].push(column);\n    }\n    return acc;\n  }, [[], []]), [columns]);\n  const onSqlExpressionChange = useCallback((sqlExpression) => {\n    setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n    setSelectedSimpleColumn(undefined);\n    setSelectedCalculatedColumn(undefined);\n  }, [label]);\n  const onCalculatedColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = calculatedColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(selectedColumn);\n    setSelectedSimpleColumn(undefined);\n    setAdhocColumn(undefined);\n    setLabel((selectedColumn == null ? void 0 : selectedColumn.verbose_name) || (selectedColumn == null ? void 0 : selectedColumn.column_name) || '');\n  }, [calculatedColumns, setLabel]);\n  const onSimpleColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = simpleColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(undefined);\n    setSelectedSimpleColumn(selectedColumn);\n    setAdhocColumn(undefined);\n    setLabel((selectedColumn == null ? void 0 : selectedColumn.verbose_name) || (selectedColumn == null ? void 0 : selectedColumn.column_name) || '');\n  }, [setLabel, simpleColumns]);\n  const defaultActiveTabKey = initialAdhocColumn ?\n  'sqlExpression' :\n  initialSimpleColumn || calculatedColumns.length === 0 ?\n  'simple' :\n  'saved';\n  useEffect(() => {\n    getCurrentTab(defaultActiveTabKey);\n    setSelectedTab(defaultActiveTabKey);\n  }, [defaultActiveTabKey, getCurrentTab, setSelectedTab]);\n  useEffect(() => {\n    /* if the adhoc column is not set (because it was never edited) but the\n     * tab is selected and the label has changed, then we need to set the\n     * adhoc column manually */\n    if (adhocColumn === undefined &&\n    selectedTab === 'sqlExpression' &&\n    hasCustomLabel) {\n      const sqlExpression = (selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) || (\n      selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.expression) ||\n      '';\n      setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n    }\n  }, [\n  adhocColumn,\n  defaultActiveTabKey,\n  hasCustomLabel,\n  getCurrentTab,\n  label,\n  selectedCalculatedColumn,\n  selectedSimpleColumn,\n  selectedTab]\n  );\n  const onSave = useCallback(() => {\n    if (adhocColumn && adhocColumn.label !== label) {\n      adhocColumn.label = label;\n    }\n    const selectedColumn = adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n    if (!selectedColumn) {\n      return;\n    }\n    onChange(selectedColumn);\n    onClose();\n  }, [\n  adhocColumn,\n  label,\n  onChange,\n  onClose,\n  selectedCalculatedColumn,\n  selectedSimpleColumn]\n  );\n  const onResetStateAndClose = useCallback(() => {\n    setSelectedCalculatedColumn(initialCalculatedColumn);\n    setSelectedSimpleColumn(initialSimpleColumn);\n    setAdhocColumn(initialAdhocColumn);\n    onClose();\n  }, [\n  initialAdhocColumn,\n  initialCalculatedColumn,\n  initialSimpleColumn,\n  onClose]\n  );\n  const onTabChange = useCallback((tab) => {var _sqlEditorRef$current;\n    getCurrentTab(tab);\n    setSelectedTab(tab);\n    // @ts-ignore\n    (_sqlEditorRef$current = sqlEditorRef.current) == null ? void 0 : _sqlEditorRef$current.editor.focus();\n  }, [getCurrentTab]);\n  const onSqlEditorFocus = useCallback(() => {var _sqlEditorRef$current2;\n    // @ts-ignore\n    (_sqlEditorRef$current2 = sqlEditorRef.current) == null ? void 0 : _sqlEditorRef$current2.editor.resize();\n  }, []);\n  const setDatasetAndClose = () => {\n    if (setDatasetModal) {\n      setDatasetModal(true);\n    }\n    onClose();\n  };\n  const stateIsValid = adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n  const hasUnsavedChanges = initialLabel !== label ||\n  (selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name) !== (\n  initialCalculatedColumn == null ? void 0 : initialCalculatedColumn.column_name) ||\n  (selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) !== (initialSimpleColumn == null ? void 0 : initialSimpleColumn.column_name) ||\n  (adhocColumn == null ? void 0 : adhocColumn.sqlExpression) !== (initialAdhocColumn == null ? void 0 : initialAdhocColumn.sqlExpression);\n  const savedExpressionsLabel = t('Saved expressions');\n  const simpleColumnsLabel = t('Column');\n  return _jsxs(Form, { layout: \"vertical\", id: \"metrics-edit-popover\", children: [\n    _jsxs(Tabs, { id: \"adhoc-metric-edit-tabs\", defaultActiveKey: defaultActiveTabKey, onChange: onTabChange, className: \"adhoc-metric-edit-tabs\", allowOverflow: true, css: css`\n          height: ${height}px;\n          width: ${width}px;\n        `, children: [\n      _jsx(Tabs.TabPane, { tab: t('Saved'), disabled: disabledTabs.has('saved'), children:\n        calculatedColumns.length > 0 ? _jsx(FormItem, { label: savedExpressionsLabel, children:\n          _jsx(StyledSelect, { ariaLabel: savedExpressionsLabel, value: selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name, onChange: onCalculatedColumnChange, allowClear: true, autoFocus: !selectedCalculatedColumn, placeholder: t('%s column(s)', calculatedColumns.length), options: calculatedColumns.map((calculatedColumn) => ({\n              value: calculatedColumn.column_name,\n              label: calculatedColumn.verbose_name ||\n              calculatedColumn.column_name,\n              customLabel: _jsx(StyledColumnOption, { column: calculatedColumn, showType: true }),\n              key: calculatedColumn.column_name\n            })) }) }\n        ) : datasourceType === DatasourceType.Table ? _jsx(EmptyStateSmall, { image: \"empty.svg\", title: isTemporal ?\n          t('No temporal columns found') :\n          t('No saved expressions found'), description: isTemporal ?\n          t('Add calculated temporal columns to dataset in \"Edit datasource\" modal') :\n          t('Add calculated columns to dataset in \"Edit datasource\" modal') }) : _jsx(EmptyStateSmall, { image: \"empty.svg\", title: isTemporal ?\n          t('No temporal columns found') :\n          t('No saved expressions found'), description: isTemporal ? _jsxs(_Fragment, { children: [\n            _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: setDatasetAndClose, children:\n              t('Create a dataset') }\n            ), ' ',\n            t(' to mark a column as a time column')] }\n          ) : _jsxs(_Fragment, { children: [\n            _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: setDatasetAndClose, children:\n              t('Create a dataset') }\n            ), ' ',\n            t(' to add calculated columns')] }\n          ) }) }, \"saved\"\n      ),\n      _jsx(Tabs.TabPane, { tab: t('Simple'), disabled: disabledTabs.has('simple'), children:\n        isTemporal && simpleColumns.length === 0 ? _jsx(EmptyStateSmall, { image: \"empty.svg\", title: t('No temporal columns found'), description: datasourceType === DatasourceType.Table ? t('Mark a column as temporal in \"Edit datasource\" modal') : _jsxs(_Fragment, { children: [\n            _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: setDatasetAndClose, children:\n              t('Create a dataset') }\n            ), ' ',\n            t(' to mark a column as a time column')] }\n          ) }) : _jsx(FormItem, { label: simpleColumnsLabel, children:\n          _jsx(Select, { ariaLabel: simpleColumnsLabel, value: selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name, onChange: onSimpleColumnChange, allowClear: true, autoFocus: !selectedSimpleColumn, placeholder: t('%s column(s)', simpleColumns.length), options: simpleColumns.map((simpleColumn) => ({\n              value: simpleColumn.column_name,\n              label: simpleColumn.verbose_name || simpleColumn.column_name,\n              customLabel: _jsx(StyledColumnOption, { column: simpleColumn, showType: true }),\n              key: simpleColumn.column_name\n            })) }) }\n        ) }, \"simple\"\n      ),\n\n      _jsx(Tabs.TabPane, { tab: t('Custom SQL'), disabled: disabledTabs.has('sqlExpression'), children:\n        _jsx(SQLEditor, { value: (adhocColumn == null ? void 0 : adhocColumn.sqlExpression) || (\n          selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) || (\n          selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.expression), onFocus: onSqlEditorFocus, showLoadingForImport: true, onChange: onSqlExpressionChange, width: \"100%\", height: `${height - 80}px`, showGutter: false, editorProps: { $blockScrolling: true }, enableLiveAutocompletion: true, className: \"filter-sql-editor\", wrapEnabled: true, ref: sqlEditorRef }) }, \"sqlExpression\"\n      )] }\n    ),\n    _jsxs(\"div\", { children: [\n      _jsx(Button, { buttonSize: \"small\", onClick: onResetStateAndClose, cta: true, children:\n        t('Close') }\n      ),\n      _jsx(Button, { disabled: !stateIsValid || !hasUnsavedChanges, buttonStyle: \"primary\", buttonSize: \"small\", onClick: onSave, \"data-test\": \"ColumnEdit#save\", cta: true, children:\n        t('Save') }\n      ),\n      resizeButton] }\n    )] }\n  );\n};__signature__(ColumnSelectPopover, \"useSelector{datasourceType}\\nuseState{[initialLabel](label)}\\nuseState{[adhocColumn, setAdhocColumn](initialAdhocColumn)}\\nuseState{[selectedCalculatedColumn, setSelectedCalculatedColumn](initialCalculatedColumn)}\\nuseState{[selectedSimpleColumn, setSelectedSimpleColumn](initialSimpleColumn)}\\nuseState{[selectedTab, setSelectedTab](null)}\\nuseResizeButton{[resizeButton, width, height]}\\nuseRef{sqlEditorRef}\\nuseMemo{[calculatedColumns, simpleColumns]}\\nuseCallback{onSqlExpressionChange}\\nuseCallback{onCalculatedColumnChange}\\nuseCallback{onSimpleColumnChange}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{onSave}\\nuseCallback{onResetStateAndClose}\\nuseCallback{onTabChange}\\nuseCallback{onSqlEditorFocus}\", () => [useSelector, useResizeButton]);const _default =\nColumnSelectPopover;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledSelect, \"StyledSelect\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");reactHotLoader.register(getInitialColumnValues, \"getInitialColumnValues\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");reactHotLoader.register(ColumnSelectPopover, \"ColumnSelectPopover\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","useState","useSelector","isAdhocColumn","t","styled","css","DatasourceType","isSavedExpression","Tabs","Button","Select","Form","FormItem","SQLEditor","EmptyStateSmall","StyledColumnOption","POPOVER_INITIAL_HEIGHT","POPOVER_INITIAL_WIDTH","useResizeButton","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","StyledSelect","theme","gridUnit","getInitialColumnValues","editedColumn","undefined","ColumnSelectPopover","columns","getCurrentTab","hasCustomLabel","isTemporal","label","onChange","onClose","setDatasetModal","setLabel","disabledTabs","Set","datasourceType","state","explore","datasource","type","initialLabel","initialAdhocColumn","initialCalculatedColumn","initialSimpleColumn","adhocColumn","setAdhocColumn","selectedCalculatedColumn","setSelectedCalculatedColumn","selectedSimpleColumn","setSelectedSimpleColumn","selectedTab","setSelectedTab","resizeButton","width","height","sqlEditorRef","calculatedColumns","simpleColumns","reduce","acc","column","expression","push","onSqlExpressionChange","sqlExpression","expressionType","onCalculatedColumnChange","selectedColumnName","selectedColumn","find","col","column_name","verbose_name","onSimpleColumnChange","defaultActiveTabKey","length","onSave","onResetStateAndClose","onTabChange","tab","_sqlEditorRef$current","current","editor","focus","onSqlEditorFocus","_sqlEditorRef$current2","resize","setDatasetAndClose","stateIsValid","hasUnsavedChanges","savedExpressionsLabel","simpleColumnsLabel","layout","id","children","defaultActiveKey","className","allowOverflow","TabPane","disabled","has","ariaLabel","value","allowClear","autoFocus","placeholder","options","map","calculatedColumn","customLabel","showType","key","Table","image","title","description","role","tabIndex","onClick","simpleColumn","onFocus","showLoadingForImport","showGutter","editorProps","$blockScrolling","enableLiveAutocompletion","wrapEnabled","ref","buttonSize","cta","buttonStyle","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  AdhocColumn,\n  isAdhocColumn,\n  t,\n  styled,\n  css,\n  DatasourceType,\n} from '@superset-ui/core';\nimport { ColumnMeta, isSavedExpression } from '@superset-ui/chart-controls';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\n\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport {\n  POPOVER_INITIAL_HEIGHT,\n  POPOVER_INITIAL_WIDTH,\n} from 'src/explore/constants';\nimport { ExplorePageState } from 'src/explore/types';\nimport useResizeButton from './useResizeButton';\n\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\n\ninterface ColumnSelectPopoverProps {\n  columns: ColumnMeta[];\n  editedColumn?: ColumnMeta | AdhocColumn;\n  onChange: (column: ColumnMeta | AdhocColumn) => void;\n  onClose: () => void;\n  hasCustomLabel: boolean;\n  setLabel: (title: string) => void;\n  getCurrentTab: (tab: string) => void;\n  label: string;\n  isTemporal?: boolean;\n  setDatasetModal?: Dispatch<SetStateAction<boolean>>;\n  disabledTabs?: Set<string>;\n}\n\nconst getInitialColumnValues = (\n  editedColumn?: ColumnMeta | AdhocColumn,\n): [AdhocColumn?, ColumnMeta?, ColumnMeta?] => {\n  if (!editedColumn) {\n    return [undefined, undefined, undefined];\n  }\n  if (isAdhocColumn(editedColumn)) {\n    return [editedColumn, undefined, undefined];\n  }\n  if (isSavedExpression(editedColumn)) {\n    return [undefined, editedColumn, undefined];\n  }\n  return [undefined, undefined, editedColumn];\n};\n\nconst ColumnSelectPopover = ({\n  columns,\n  editedColumn,\n  getCurrentTab,\n  hasCustomLabel,\n  isTemporal,\n  label,\n  onChange,\n  onClose,\n  setDatasetModal,\n  setLabel,\n  disabledTabs = new Set<'saved' | 'simple' | 'sqlExpression'>(),\n}: ColumnSelectPopoverProps) => {\n  const datasourceType = useSelector<ExplorePageState, string | undefined>(\n    state => state.explore.datasource.type,\n  );\n  const [initialLabel] = useState(label);\n  const [initialAdhocColumn, initialCalculatedColumn, initialSimpleColumn] =\n    getInitialColumnValues(editedColumn);\n\n  const [adhocColumn, setAdhocColumn] = useState<AdhocColumn | undefined>(\n    initialAdhocColumn,\n  );\n  const [selectedCalculatedColumn, setSelectedCalculatedColumn] = useState<\n    ColumnMeta | undefined\n  >(initialCalculatedColumn);\n  const [selectedSimpleColumn, setSelectedSimpleColumn] = useState<\n    ColumnMeta | undefined\n  >(initialSimpleColumn);\n  const [selectedTab, setSelectedTab] = useState<string | null>(null);\n\n  const [resizeButton, width, height] = useResizeButton(\n    POPOVER_INITIAL_WIDTH,\n    POPOVER_INITIAL_HEIGHT,\n  );\n\n  const sqlEditorRef = useRef(null);\n\n  const [calculatedColumns, simpleColumns] = useMemo(\n    () =>\n      columns?.reduce(\n        (acc: [ColumnMeta[], ColumnMeta[]], column: ColumnMeta) => {\n          if (column.expression) {\n            acc[0].push(column);\n          } else {\n            acc[1].push(column);\n          }\n          return acc;\n        },\n        [[], []],\n      ),\n    [columns],\n  );\n\n  const onSqlExpressionChange = useCallback(\n    sqlExpression => {\n      setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n      setSelectedSimpleColumn(undefined);\n      setSelectedCalculatedColumn(undefined);\n    },\n    [label],\n  );\n\n  const onCalculatedColumnChange = useCallback(\n    selectedColumnName => {\n      const selectedColumn = calculatedColumns.find(\n        col => col.column_name === selectedColumnName,\n      );\n      setSelectedCalculatedColumn(selectedColumn);\n      setSelectedSimpleColumn(undefined);\n      setAdhocColumn(undefined);\n      setLabel(\n        selectedColumn?.verbose_name || selectedColumn?.column_name || '',\n      );\n    },\n    [calculatedColumns, setLabel],\n  );\n\n  const onSimpleColumnChange = useCallback(\n    selectedColumnName => {\n      const selectedColumn = simpleColumns.find(\n        col => col.column_name === selectedColumnName,\n      );\n      setSelectedCalculatedColumn(undefined);\n      setSelectedSimpleColumn(selectedColumn);\n      setAdhocColumn(undefined);\n      setLabel(\n        selectedColumn?.verbose_name || selectedColumn?.column_name || '',\n      );\n    },\n    [setLabel, simpleColumns],\n  );\n\n  const defaultActiveTabKey = initialAdhocColumn\n    ? 'sqlExpression'\n    : initialSimpleColumn || calculatedColumns.length === 0\n      ? 'simple'\n      : 'saved';\n\n  useEffect(() => {\n    getCurrentTab(defaultActiveTabKey);\n    setSelectedTab(defaultActiveTabKey);\n  }, [defaultActiveTabKey, getCurrentTab, setSelectedTab]);\n\n  useEffect(() => {\n    /* if the adhoc column is not set (because it was never edited) but the\n     * tab is selected and the label has changed, then we need to set the\n     * adhoc column manually */\n    if (\n      adhocColumn === undefined &&\n      selectedTab === 'sqlExpression' &&\n      hasCustomLabel\n    ) {\n      const sqlExpression =\n        selectedSimpleColumn?.column_name ||\n        selectedCalculatedColumn?.expression ||\n        '';\n      setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n    }\n  }, [\n    adhocColumn,\n    defaultActiveTabKey,\n    hasCustomLabel,\n    getCurrentTab,\n    label,\n    selectedCalculatedColumn,\n    selectedSimpleColumn,\n    selectedTab,\n  ]);\n\n  const onSave = useCallback(() => {\n    if (adhocColumn && adhocColumn.label !== label) {\n      adhocColumn.label = label;\n    }\n    const selectedColumn =\n      adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n    if (!selectedColumn) {\n      return;\n    }\n    onChange(selectedColumn);\n    onClose();\n  }, [\n    adhocColumn,\n    label,\n    onChange,\n    onClose,\n    selectedCalculatedColumn,\n    selectedSimpleColumn,\n  ]);\n\n  const onResetStateAndClose = useCallback(() => {\n    setSelectedCalculatedColumn(initialCalculatedColumn);\n    setSelectedSimpleColumn(initialSimpleColumn);\n    setAdhocColumn(initialAdhocColumn);\n    onClose();\n  }, [\n    initialAdhocColumn,\n    initialCalculatedColumn,\n    initialSimpleColumn,\n    onClose,\n  ]);\n\n  const onTabChange = useCallback(\n    tab => {\n      getCurrentTab(tab);\n      setSelectedTab(tab);\n      // @ts-ignore\n      sqlEditorRef.current?.editor.focus();\n    },\n    [getCurrentTab],\n  );\n\n  const onSqlEditorFocus = useCallback(() => {\n    // @ts-ignore\n    sqlEditorRef.current?.editor.resize();\n  }, []);\n\n  const setDatasetAndClose = () => {\n    if (setDatasetModal) {\n      setDatasetModal(true);\n    }\n    onClose();\n  };\n\n  const stateIsValid =\n    adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n  const hasUnsavedChanges =\n    initialLabel !== label ||\n    selectedCalculatedColumn?.column_name !==\n      initialCalculatedColumn?.column_name ||\n    selectedSimpleColumn?.column_name !== initialSimpleColumn?.column_name ||\n    adhocColumn?.sqlExpression !== initialAdhocColumn?.sqlExpression;\n\n  const savedExpressionsLabel = t('Saved expressions');\n  const simpleColumnsLabel = t('Column');\n\n  return (\n    <Form layout=\"vertical\" id=\"metrics-edit-popover\">\n      <Tabs\n        id=\"adhoc-metric-edit-tabs\"\n        defaultActiveKey={defaultActiveTabKey}\n        onChange={onTabChange}\n        className=\"adhoc-metric-edit-tabs\"\n        allowOverflow\n        css={css`\n          height: ${height}px;\n          width: ${width}px;\n        `}\n      >\n        <Tabs.TabPane\n          key=\"saved\"\n          tab={t('Saved')}\n          disabled={disabledTabs.has('saved')}\n        >\n          {calculatedColumns.length > 0 ? (\n            <FormItem label={savedExpressionsLabel}>\n              <StyledSelect\n                ariaLabel={savedExpressionsLabel}\n                value={selectedCalculatedColumn?.column_name}\n                onChange={onCalculatedColumnChange}\n                allowClear\n                autoFocus={!selectedCalculatedColumn}\n                placeholder={t('%s column(s)', calculatedColumns.length)}\n                options={calculatedColumns.map(calculatedColumn => ({\n                  value: calculatedColumn.column_name,\n                  label:\n                    calculatedColumn.verbose_name ||\n                    calculatedColumn.column_name,\n                  customLabel: (\n                    <StyledColumnOption column={calculatedColumn} showType />\n                  ),\n                  key: calculatedColumn.column_name,\n                }))}\n              />\n            </FormItem>\n          ) : datasourceType === DatasourceType.Table ? (\n            <EmptyStateSmall\n              image=\"empty.svg\"\n              title={\n                isTemporal\n                  ? t('No temporal columns found')\n                  : t('No saved expressions found')\n              }\n              description={\n                isTemporal\n                  ? t(\n                      'Add calculated temporal columns to dataset in \"Edit datasource\" modal',\n                    )\n                  : t(\n                      'Add calculated columns to dataset in \"Edit datasource\" modal',\n                    )\n              }\n            />\n          ) : (\n            <EmptyStateSmall\n              image=\"empty.svg\"\n              title={\n                isTemporal\n                  ? t('No temporal columns found')\n                  : t('No saved expressions found')\n              }\n              description={\n                isTemporal ? (\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={setDatasetAndClose}\n                    >\n                      {t('Create a dataset')}\n                    </span>{' '}\n                    {t(' to mark a column as a time column')}\n                  </>\n                ) : (\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={setDatasetAndClose}\n                    >\n                      {t('Create a dataset')}\n                    </span>{' '}\n                    {t(' to add calculated columns')}\n                  </>\n                )\n              }\n            />\n          )}\n        </Tabs.TabPane>\n        <Tabs.TabPane\n          key=\"simple\"\n          tab={t('Simple')}\n          disabled={disabledTabs.has('simple')}\n        >\n          {isTemporal && simpleColumns.length === 0 ? (\n            <EmptyStateSmall\n              image=\"empty.svg\"\n              title={t('No temporal columns found')}\n              description={\n                datasourceType === DatasourceType.Table ? (\n                  t('Mark a column as temporal in \"Edit datasource\" modal')\n                ) : (\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={setDatasetAndClose}\n                    >\n                      {t('Create a dataset')}\n                    </span>{' '}\n                    {t(' to mark a column as a time column')}\n                  </>\n                )\n              }\n            />\n          ) : (\n            <FormItem label={simpleColumnsLabel}>\n              <Select\n                ariaLabel={simpleColumnsLabel}\n                value={selectedSimpleColumn?.column_name}\n                onChange={onSimpleColumnChange}\n                allowClear\n                autoFocus={!selectedSimpleColumn}\n                placeholder={t('%s column(s)', simpleColumns.length)}\n                options={simpleColumns.map(simpleColumn => ({\n                  value: simpleColumn.column_name,\n                  label: simpleColumn.verbose_name || simpleColumn.column_name,\n                  customLabel: (\n                    <StyledColumnOption column={simpleColumn} showType />\n                  ),\n                  key: simpleColumn.column_name,\n                }))}\n              />\n            </FormItem>\n          )}\n        </Tabs.TabPane>\n\n        <Tabs.TabPane\n          key=\"sqlExpression\"\n          tab={t('Custom SQL')}\n          disabled={disabledTabs.has('sqlExpression')}\n        >\n          <SQLEditor\n            value={\n              adhocColumn?.sqlExpression ||\n              selectedSimpleColumn?.column_name ||\n              selectedCalculatedColumn?.expression\n            }\n            onFocus={onSqlEditorFocus}\n            showLoadingForImport\n            onChange={onSqlExpressionChange}\n            width=\"100%\"\n            height={`${height - 80}px`}\n            showGutter={false}\n            editorProps={{ $blockScrolling: true }}\n            enableLiveAutocompletion\n            className=\"filter-sql-editor\"\n            wrapEnabled\n            ref={sqlEditorRef}\n          />\n        </Tabs.TabPane>\n      </Tabs>\n      <div>\n        <Button buttonSize=\"small\" onClick={onResetStateAndClose} cta>\n          {t('Close')}\n        </Button>\n        <Button\n          disabled={!stateIsValid || !hasUnsavedChanges}\n          buttonStyle=\"primary\"\n          buttonSize=\"small\"\n          onClick={onSave}\n          data-test=\"ColumnEdit#save\"\n          cta\n        >\n          {t('Save')}\n        </Button>\n        {resizeButton}\n      </div>\n    </Form>\n  );\n};\n\nexport default ColumnSelectPopover;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}