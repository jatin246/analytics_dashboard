{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isFeatureEnabled, FeatureFlag, styled, SupersetClient, t } from '@superset-ui/core';\nimport { useSelector } from 'react-redux';\nimport { useState, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport { createFetchRelated, createErrorHandler, handleDashboardDelete } from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu from 'src/features/home/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport DeleteModal from 'src/components/DeleteModal';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { loadTags } from 'src/components/Tags/utils';\nimport DashboardCard from 'src/features/dashboards/DashboardCard';\nimport { DashboardStatus } from 'src/features/dashboards/types';\nimport { findPermission } from 'src/utils/findPermission';\nimport { ModifiedInfo } from 'src/components/AuditInfo';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the dashboards. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more dashboards that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nconst DASHBOARD_COLUMNS_TO_FETCH = [\n'id',\n'dashboard_title',\n'published',\n'url',\n'slug',\n'changed_by',\n'changed_on_delta_humanized',\n'owners.id',\n'owners.first_name',\n'owners.last_name',\n'owners',\n'tags.id',\n'tags.name',\n'tags.type',\n'status',\n'certified_by',\n'certification_details',\n'changed_on'];\n\nfunction DashboardList(props) {var _user$userId;\n  const { addDangerToast, addSuccessToast, user } = props;\n  const { roles } = useSelector((state) => state.user);\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n  const { state: { loading, resourceCount: dashboardCount, resourceCollection: dashboards, bulkSelectEnabled }, setResourceCollection: setDashboards, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('dashboard', t('dashboard'), addDangerToast, undefined, undefined, undefined, undefined, DASHBOARD_COLUMNS_TO_FETCH);\n  const dashboardIds = useMemo(() => dashboards.map((d) => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('dashboard', dashboardIds, addDangerToast);\n  const [dashboardToEdit, setDashboardToEdit] = useState(null);\n  const [dashboardToDelete, setDashboardToDelete] = useState(null);\n  const [importingDashboard, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dashboard imported'));\n  };\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(user == null ? void 0 : (_user$userId = user.userId) == null ? void 0 : _user$userId.toString(), null);\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  function openDashboardEditModal(dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n  function handleDashboardEdit(edits) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}`\n    }).then(({ json = {} }) => {\n      setDashboards(dashboards.map((dashboard) => {var _json$result;\n        if (dashboard.id === (json == null ? void 0 : (_json$result = json.result) == null ? void 0 : _json$result.id)) {\n          const { changed_by_name, changed_by, dashboard_title = '', slug = '', json_metadata = '', changed_on_delta_humanized, url = '', certified_by = '', certification_details = '', owners, tags } = json.result;\n          return {\n            ...dashboard,\n            changed_by_name,\n            changed_by,\n            dashboard_title,\n            slug,\n            json_metadata,\n            changed_on_delta_humanized,\n            url,\n            certified_by,\n            certification_details,\n            owners,\n            tags\n          };\n        }\n        return dashboard;\n      }));\n    }, createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboards: %s', errMsg))));\n  }\n  const handleBulkDashboardExport = (dashboardsToExport) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  function handleBulkDashboardDelete(dashboardsToDelete) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(dashboardsToDelete.map(({ id }) => id))}`\n    }).then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected dashboards: ', errMsg))));\n  }\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { id } } }) => (user == null ? void 0 : user.userId) && _jsx(FaveStar, { itemId: id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus[id] }),\n    Header: '',\n    id: 'id',\n    disableSortBy: true,\n    size: 'xs',\n    hidden: !(user != null && user.userId)\n  },\n  {\n    Cell: ({ row: { original: { url, dashboard_title: dashboardTitle, certified_by: certifiedBy, certification_details: certificationDetails } } }) => _jsxs(Link, { to: url, children: [\n      certifiedBy && _jsxs(_Fragment, { children: [\n        _jsx(CertifiedBadge, { certifiedBy: certifiedBy, details: certificationDetails }), ' '] }\n      ),\n      dashboardTitle] }\n    ),\n    Header: t('Name'),\n    accessor: 'dashboard_title'\n  },\n  {\n    Cell: ({ row: { original: { status } } }) => status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft'),\n    Header: t('Status'),\n    accessor: 'published',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original: { tags = [] } } }) =>\n    // Only show custom type tags\n    _jsx(TagsList, { tags: tags.filter((tag) => tag.type === 'TagTypes.custom' || tag.type === 1), maxTags: 3 }),\n    Header: t('Tags'),\n    accessor: 'tags',\n    disableSortBy: true,\n    hidden: !isFeatureEnabled(FeatureFlag.TaggingSystem)\n  },\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => _jsx(FacePile, { users: owners }),\n    Header: t('Owners'),\n    accessor: 'owners',\n    disableSortBy: true,\n    cellProps: {\n      style: { padding: '0px' }\n    },\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn, changed_by: changedBy } } }) => _jsx(ModifiedInfo, { date: changedOn, user: changedBy }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const handleDelete = () => handleDashboardDelete(original, refreshData, addSuccessToast, addDangerToast);\n      const handleEdit = () => openDashboardEditModal(original);\n      const handleExport = () => handleBulkDashboardExport([original]);\n      return _jsxs(Actions, { className: \"actions\", children: [\n        canDelete && _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: _jsxs(_Fragment, { children: [\n            t('Are you sure you want to delete'), ' ',\n            _jsx(\"b\", { children: original.dashboard_title }), \"?\"] }\n          ), onConfirm: handleDelete, children:\n          (confirmDelete) => _jsx(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\", children:\n            _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete, children:\n              _jsx(Icons.Trash, { \"data-test\": \"dashboard-list-trash-icon\" }) }\n            ) }\n          ) }\n        ),\n        canExport && _jsx(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport, children:\n            _jsx(Icons.Share, {}) }\n          ) }\n        ),\n        canEdit && _jsx(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit, children:\n            _jsx(Icons.EditAlt, { \"data-test\": \"edit-alt\" }) }\n          ) }\n        )] }\n      );\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete && !canExport,\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [\n  user == null ? void 0 : user.userId,\n  canEdit,\n  canDelete,\n  canExport,\n  saveFavoriteStatus,\n  favoriteStatus,\n  refreshData,\n  addSuccessToast,\n  addDangerToast]\n  );\n  const favoritesFilter = useMemo(() => ({\n    Header: t('Favorite'),\n    key: 'favorite',\n    id: 'id',\n    urlDisplay: 'favorite',\n    input: 'select',\n    operator: FilterOperator.DashboardIsFav,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }]\n\n  }), []);\n  const filters = useMemo(() => {\n    const filters_list = [\n    {\n      Header: t('Name'),\n      key: 'search',\n      id: 'dashboard_title',\n      input: 'search',\n      operator: FilterOperator.TitleOrSlug\n    },\n    {\n      Header: t('Status'),\n      key: 'published',\n      id: 'published',\n      input: 'select',\n      operator: FilterOperator.Equals,\n      unfilteredLabel: t('Any'),\n      selects: [\n      { label: t('Published'), value: true },\n      { label: t('Draft'), value: false }]\n\n    },\n    ...(isFeatureEnabled(FeatureFlag.TaggingSystem) && canReadTag ?\n    [\n    {\n      Header: t('Tag'),\n      key: 'tags',\n      id: 'tags',\n      input: 'select',\n      operator: FilterOperator.DashboardTagById,\n      unfilteredLabel: t('All'),\n      fetchSelects: loadTags\n    }] :\n\n    []),\n    {\n      Header: t('Owner'),\n      key: 'owner',\n      id: 'owners',\n      input: 'select',\n      operator: FilterOperator.RelationManyMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated('dashboard', 'owners', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboard owner values: %s', errMsg))), props.user),\n      paginate: true\n    },\n    ...(user != null && user.userId ? [favoritesFilter] : []),\n    {\n      Header: t('Certified'),\n      key: 'certified',\n      id: 'id',\n      urlDisplay: 'certified',\n      input: 'select',\n      operator: FilterOperator.DashboardIsCertified,\n      unfilteredLabel: t('Any'),\n      selects: [\n      { label: t('Yes'), value: true },\n      { label: t('No'), value: false }]\n\n    },\n    {\n      Header: t('Modified by'),\n      key: 'changed_by',\n      id: 'changed_by',\n      input: 'select',\n      operator: FilterOperator.RelationOneMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated('dashboard', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n      paginate: true\n    }];\n\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n  const sortTypes = [\n  {\n    desc: false,\n    id: 'dashboard_title',\n    label: t('Alphabetical'),\n    value: 'alphabetical'\n  },\n  {\n    desc: true,\n    id: 'changed_on_delta_humanized',\n    label: t('Recently modified'),\n    value: 'recently_modified'\n  },\n  {\n    desc: false,\n    id: 'changed_on_delta_humanized',\n    label: t('Least recently modified'),\n    value: 'least_recently_modified'\n  }];\n\n  const renderCard = useCallback((dashboard) => _jsx(DashboardCard, { dashboard: dashboard, hasPerm: hasPerm, bulkSelectEnabled: bulkSelectEnabled, showThumbnails: userKey ?\n    userKey.thumbnails :\n    isFeatureEnabled(FeatureFlag.Thumbnails), userId: user == null ? void 0 : user.userId, loading: loading, openDashboardEditModal: openDashboardEditModal, saveFavoriteStatus: saveFavoriteStatus, favoriteStatus: favoriteStatus[dashboard.id], handleBulkDashboardExport: handleBulkDashboardExport, onDelete: (dashboard) => setDashboardToDelete(dashboard) }), [\n  bulkSelectEnabled,\n  favoriteStatus,\n  hasPerm,\n  loading,\n  user == null ? void 0 : user.userId,\n  saveFavoriteStatus,\n  userKey]\n  );\n  const subMenuButtons = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: _jsxs(_Fragment, { children: [\n        _jsx(\"i\", { className: \"fa fa-plus\" }), \" \", t('Dashboard')] }\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      }\n    });\n    subMenuButtons.push({\n      name: _jsx(Tooltip, { id: \"import-tooltip\", title: t('Import dashboards'), placement: \"bottomRight\", children:\n        _jsx(Icons.Import, { \"data-test\": \"import-button\" }) }\n      ),\n      buttonStyle: 'link',\n      onClick: openDashboardImportModal\n    });\n  }\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { name: t('Dashboards'), buttons: subMenuButtons }),\n    _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected dashboards?'), onConfirm: handleBulkDashboardDelete, children:\n      (confirmDelete) => {\n        const bulkActions = [];\n        if (canDelete) {\n          bulkActions.push({\n            key: 'delete',\n            name: t('Delete'),\n            type: 'danger',\n            onSelect: confirmDelete\n          });\n        }\n        if (canExport) {\n          bulkActions.push({\n            key: 'export',\n            name: t('Export'),\n            type: 'primary',\n            onSelect: handleBulkDashboardExport\n          });\n        }\n        return _jsxs(_Fragment, { children: [\n          dashboardToEdit && _jsx(PropertiesModal, { dashboardId: dashboardToEdit.id, show: true, onHide: () => setDashboardToEdit(null), onSubmit: handleDashboardEdit }),\n          dashboardToDelete && _jsx(DeleteModal, { description: _jsxs(_Fragment, { children: [\n              t('Are you sure you want to delete'), ' ',\n              _jsx(\"b\", { children: dashboardToDelete.dashboard_title }), \"?\"] }\n            ), onConfirm: () => {\n              handleDashboardDelete(dashboardToDelete, refreshData, addSuccessToast, addDangerToast, undefined, user == null ? void 0 : user.userId);\n              setDashboardToDelete(null);\n            }, onHide: () => setDashboardToDelete(null), open: !!dashboardToDelete, title: t('Please confirm') }),\n          _jsx(ListView, { bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, cardSortSelectOptions: sortTypes, className: \"dashboard-list-view\", columns: columns, count: dashboardCount, data: dashboards, disableBulkSelect: toggleBulkSelect, fetchData: fetchData, refreshData: refreshData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, showThumbnails: userKey ?\n            userKey.thumbnails :\n            isFeatureEnabled(FeatureFlag.Thumbnails), renderCard: renderCard, defaultViewMode: isFeatureEnabled(FeatureFlag.ListviewsDefaultCardView) ?\n            'card' :\n            'table', enableBulkTag: true, bulkTagResourceName: \"dashboard\" })] }\n        );\n      } }\n    ),\n\n    _jsx(ImportModelsModal, { resourceName: \"dashboard\", resourceLabel: t('dashboard'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDashboardImport, show: importingDashboard, onHide: closeDashboardImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields, sshTunnelPasswordFields: sshTunnelPasswordFields, setSSHTunnelPasswordFields: setSSHTunnelPasswordFields, sshTunnelPrivateKeyFields: sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields: setSSHTunnelPrivateKeyFields, sshTunnelPrivateKeyPasswordFields: sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields: setSSHTunnelPrivateKeyPasswordFields }),\n\n    preparingExport && _jsx(Loading, {})] }\n  );\n}__signature__(DashboardList, \"useSelector{{ roles }}\\nuseListViewResource{{ state: { loading, resourceCount: dashboardCount, resourceCollection: dashboards, bulkSelectEnabled, }, setResourceCollection: setDashboards, hasPerm, fetchData, toggleBulkSelect, refreshData, }}\\nuseMemo{dashboardIds}\\nuseFavoriteStatus{[saveFavoriteStatus, favoriteStatus]}\\nuseState{[dashboardToEdit, setDashboardToEdit](null)}\\nuseState{[dashboardToDelete, setDashboardToDelete](null)}\\nuseState{[importingDashboard, showImportModal](false)}\\nuseState{[passwordFields, setPasswordFields]([])}\\nuseState{[preparingExport, setPreparingExport](false)}\\nuseState{[sshTunnelPasswordFields, setSSHTunnelPasswordFields]([])}\\nuseState{[sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields]([])}\\nuseState{[sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields,]([])}\\nuseMemo{columns}\\nuseMemo{favoritesFilter}\\nuseMemo{filters}\\nuseCallback{renderCard}\", () => [useSelector, useListViewResource, useFavoriteStatus]);const _default =\nwithToasts(DashboardList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PAGE_SIZE, \"PAGE_SIZE\", \"/app/superset-frontend/src/pages/DashboardList/index.tsx\");reactHotLoader.register(PASSWORDS_NEEDED_MESSAGE, \"PASSWORDS_NEEDED_MESSAGE\", \"/app/superset-frontend/src/pages/DashboardList/index.tsx\");reactHotLoader.register(CONFIRM_OVERWRITE_MESSAGE, \"CONFIRM_OVERWRITE_MESSAGE\", \"/app/superset-frontend/src/pages/DashboardList/index.tsx\");reactHotLoader.register(Actions, \"Actions\", \"/app/superset-frontend/src/pages/DashboardList/index.tsx\");reactHotLoader.register(DASHBOARD_COLUMNS_TO_FETCH, \"DASHBOARD_COLUMNS_TO_FETCH\", \"/app/superset-frontend/src/pages/DashboardList/index.tsx\");reactHotLoader.register(DashboardList, \"DashboardList\", \"/app/superset-frontend/src/pages/DashboardList/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/pages/DashboardList/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isFeatureEnabled","FeatureFlag","styled","SupersetClient","t","useSelector","useState","useMemo","useCallback","Link","rison","createFetchRelated","createErrorHandler","handleDashboardDelete","useListViewResource","useFavoriteStatus","ConfirmStatusChange","TagsList","handleResourceExport","Loading","SubMenu","ListView","FilterOperator","dangerouslyGetItemDoNotUse","withToasts","FacePile","Icons","DeleteModal","FaveStar","PropertiesModal","Tooltip","ImportModelsModal","QueryObjectColumns","CertifiedBadge","loadTags","DashboardCard","DashboardStatus","findPermission","ModifiedInfo","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","PAGE_SIZE","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","Actions","div","theme","colors","grayscale","base","DASHBOARD_COLUMNS_TO_FETCH","DashboardList","props","_user$userId","addDangerToast","addSuccessToast","user","roles","state","canReadTag","loading","resourceCount","dashboardCount","resourceCollection","dashboards","bulkSelectEnabled","setResourceCollection","setDashboards","hasPerm","fetchData","toggleBulkSelect","refreshData","undefined","dashboardIds","map","d","id","saveFavoriteStatus","favoriteStatus","dashboardToEdit","setDashboardToEdit","dashboardToDelete","setDashboardToDelete","importingDashboard","showImportModal","passwordFields","setPasswordFields","preparingExport","setPreparingExport","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","openDashboardImportModal","closeDashboardImportModal","handleDashboardImport","userKey","userId","toString","canCreate","canEdit","canDelete","canExport","initialSort","desc","openDashboardEditModal","dashboard","handleDashboardEdit","edits","get","endpoint","then","json","_json$result","result","changed_by_name","changed_by","dashboard_title","slug","json_metadata","changed_on_delta_humanized","url","certified_by","certification_details","owners","tags","errMsg","handleBulkDashboardExport","dashboardsToExport","ids","handleBulkDashboardDelete","dashboardsToDelete","delete","encode","message","columns","Cell","row","original","itemId","saveFaveStar","isStarred","Header","disableSortBy","size","hidden","dashboardTitle","certifiedBy","certificationDetails","to","children","details","accessor","status","PUBLISHED","filter","tag","type","maxTags","TaggingSystem","users","cellProps","style","padding","changedOn","changedBy","date","handleDelete","handleEdit","handleExport","className","title","description","onConfirm","confirmDelete","placement","role","tabIndex","onClick","Trash","Share","EditAlt","ChangedBy","favoritesFilter","key","urlDisplay","input","operator","DashboardIsFav","unfilteredLabel","selects","label","value","filters","filters_list","TitleOrSlug","Equals","DashboardTagById","fetchSelects","RelationManyMany","paginate","DashboardIsCertified","RelationOneMany","sortTypes","renderCard","showThumbnails","thumbnails","Thumbnails","onDelete","subMenuButtons","push","name","buttonStyle","window","location","assign","Import","buttons","bulkActions","onSelect","dashboardId","show","onHide","onSubmit","open","cardSortSelectOptions","count","data","disableBulkSelect","pageSize","defaultViewMode","ListviewsDefaultCardView","enableBulkTag","bulkTagResourceName","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/pages/DashboardList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport { useSelector } from 'react-redux';\nimport { useState, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createErrorHandler,\n  handleDashboardDelete,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filter,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport Owner from 'src/types/Owner';\nimport Tag from 'src/types/TagType';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport DeleteModal from 'src/components/DeleteModal';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\n\nimport Dashboard from 'src/dashboard/containers/Dashboard';\nimport {\n  Dashboard as CRUDDashboard,\n  QueryObjectColumns,\n} from 'src/views/CRUD/types';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { loadTags } from 'src/components/Tags/utils';\nimport DashboardCard from 'src/features/dashboards/DashboardCard';\nimport { DashboardStatus } from 'src/features/dashboards/types';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { findPermission } from 'src/utils/findPermission';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the dashboards. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more dashboards that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface DashboardListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nexport interface Dashboard {\n  changed_by_name: string;\n  changed_on_delta_humanized: string;\n  changed_by: string;\n  dashboard_title: string;\n  id: number;\n  published: boolean;\n  url: string;\n  thumbnail_url: string;\n  owners: Owner[];\n  tags: Tag[];\n  created_by: object;\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nconst DASHBOARD_COLUMNS_TO_FETCH = [\n  'id',\n  'dashboard_title',\n  'published',\n  'url',\n  'slug',\n  'changed_by',\n  'changed_on_delta_humanized',\n  'owners.id',\n  'owners.first_name',\n  'owners.last_name',\n  'owners',\n  'tags.id',\n  'tags.name',\n  'tags.type',\n  'status',\n  'certified_by',\n  'certification_details',\n  'changed_on',\n];\n\nfunction DashboardList(props: DashboardListProps) {\n  const { addDangerToast, addSuccessToast, user } = props;\n\n  const { roles } = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n\n  const {\n    state: {\n      loading,\n      resourceCount: dashboardCount,\n      resourceCollection: dashboards,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setDashboards,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dashboard>(\n    'dashboard',\n    t('dashboard'),\n    addDangerToast,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    DASHBOARD_COLUMNS_TO_FETCH,\n  );\n  const dashboardIds = useMemo(() => dashboards.map(d => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'dashboard',\n    dashboardIds,\n    addDangerToast,\n  );\n\n  const [dashboardToEdit, setDashboardToEdit] = useState<Dashboard | null>(\n    null,\n  );\n  const [dashboardToDelete, setDashboardToDelete] =\n    useState<CRUDDashboard | null>(null);\n\n  const [importingDashboard, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dashboard imported'));\n  };\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(user?.userId?.toString(), null);\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  function openDashboardEditModal(dashboard: Dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n\n  function handleDashboardEdit(edits: Dashboard) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}`,\n    }).then(\n      ({ json = {} }) => {\n        setDashboards(\n          dashboards.map(dashboard => {\n            if (dashboard.id === json?.result?.id) {\n              const {\n                changed_by_name,\n                changed_by,\n                dashboard_title = '',\n                slug = '',\n                json_metadata = '',\n                changed_on_delta_humanized,\n                url = '',\n                certified_by = '',\n                certification_details = '',\n                owners,\n                tags,\n              } = json.result;\n              return {\n                ...dashboard,\n                changed_by_name,\n                changed_by,\n                dashboard_title,\n                slug,\n                json_metadata,\n                changed_on_delta_humanized,\n                url,\n                certified_by,\n                certification_details,\n                owners,\n                tags,\n              };\n            }\n            return dashboard;\n          }),\n        );\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('An error occurred while fetching dashboards: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const handleBulkDashboardExport = (dashboardsToExport: Dashboard[]) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  function handleBulkDashboardDelete(dashboardsToDelete: Dashboard[]) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(\n        dashboardsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected dashboards: ', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          user?.userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !user?.userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              dashboard_title: dashboardTitle,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n            },\n          },\n        }: any) => (\n          <Link to={url}>\n            {certifiedBy && (\n              <>\n                <CertifiedBadge\n                  certifiedBy={certifiedBy}\n                  details={certificationDetails}\n                />{' '}\n              </>\n            )}\n            {dashboardTitle}\n          </Link>\n        ),\n        Header: t('Name'),\n        accessor: 'dashboard_title',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { status },\n          },\n        }: any) =>\n          status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft'),\n        Header: t('Status'),\n        accessor: 'published',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: {\n          row: {\n            original: {\n              tags: Tag[];\n            };\n          };\n        }) => (\n          // Only show custom type tags\n          <TagsList\n            tags={tags.filter(\n              (tag: Tag) => tag.type === 'TagTypes.custom' || tag.type === 1,\n            )}\n            maxTags={3}\n          />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TaggingSystem),\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        accessor: 'owners',\n        disableSortBy: true,\n        cellProps: {\n          style: { padding: '0px' },\n        },\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_on_delta_humanized: changedOn,\n              changed_by: changedBy,\n            },\n          },\n        }: any) => <ModifiedInfo date={changedOn} user={changedBy} />,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleDashboardDelete(\n              original,\n              refreshData,\n              addSuccessToast,\n              addDangerToast,\n            );\n          const handleEdit = () => openDashboardEditModal(original);\n          const handleExport = () => handleBulkDashboardExport([original]);\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash data-test=\"dashboard-list-trash-icon\" />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canExport,\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.ChangedBy,\n        hidden: true,\n      },\n    ],\n    [\n      user?.userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      key: 'favorite',\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.DashboardIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(() => {\n    const filters_list = [\n      {\n        Header: t('Name'),\n        key: 'search',\n        id: 'dashboard_title',\n        input: 'search',\n        operator: FilterOperator.TitleOrSlug,\n      },\n      {\n        Header: t('Status'),\n        key: 'published',\n        id: 'published',\n        input: 'select',\n        operator: FilterOperator.Equals,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Published'), value: true },\n          { label: t('Draft'), value: false },\n        ],\n      },\n      ...(isFeatureEnabled(FeatureFlag.TaggingSystem) && canReadTag\n        ? [\n            {\n              Header: t('Tag'),\n              key: 'tags',\n              id: 'tags',\n              input: 'select',\n              operator: FilterOperator.DashboardTagById,\n              unfilteredLabel: t('All'),\n              fetchSelects: loadTags,\n            },\n          ]\n        : []),\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.RelationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard owner values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      ...(user?.userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.DashboardIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Modified by'),\n        key: 'changed_by',\n        id: 'changed_by',\n        input: 'select',\n        operator: FilterOperator.RelationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'changed_by',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset datasource values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n    ] as Filters;\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'dashboard_title',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (dashboard: Dashboard) => (\n      <DashboardCard\n        dashboard={dashboard}\n        hasPerm={hasPerm}\n        bulkSelectEnabled={bulkSelectEnabled}\n        showThumbnails={\n          userKey\n            ? userKey.thumbnails\n            : isFeatureEnabled(FeatureFlag.Thumbnails)\n        }\n        userId={user?.userId}\n        loading={loading}\n        openDashboardEditModal={openDashboardEditModal}\n        saveFavoriteStatus={saveFavoriteStatus}\n        favoriteStatus={favoriteStatus[dashboard.id]}\n        handleBulkDashboardExport={handleBulkDashboardExport}\n        onDelete={dashboard => setDashboardToDelete(dashboard)}\n      />\n    ),\n    [\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n      user?.userId,\n      saveFavoriteStatus,\n      userKey,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dashboard')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      },\n    });\n\n    subMenuButtons.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import dashboards')}\n          placement=\"bottomRight\"\n        >\n          <Icons.Import data-test=\"import-button\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openDashboardImportModal,\n    });\n  }\n  return (\n    <>\n      <SubMenu name={t('Dashboards')} buttons={subMenuButtons} />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected dashboards?',\n        )}\n        onConfirm={handleBulkDashboardDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDashboardExport,\n            });\n          }\n          return (\n            <>\n              {dashboardToEdit && (\n                <PropertiesModal\n                  dashboardId={dashboardToEdit.id}\n                  show\n                  onHide={() => setDashboardToEdit(null)}\n                  onSubmit={handleDashboardEdit}\n                />\n              )}\n              {dashboardToDelete && (\n                <DeleteModal\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{dashboardToDelete.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={() => {\n                    handleDashboardDelete(\n                      dashboardToDelete,\n                      refreshData,\n                      addSuccessToast,\n                      addDangerToast,\n                      undefined,\n                      user?.userId,\n                    );\n                    setDashboardToDelete(null);\n                  }}\n                  onHide={() => setDashboardToDelete(null)}\n                  open={!!dashboardToDelete}\n                  title={t('Please confirm')}\n                />\n              )}\n              <ListView<Dashboard>\n                bulkActions={bulkActions}\n                bulkSelectEnabled={bulkSelectEnabled}\n                cardSortSelectOptions={sortTypes}\n                className=\"dashboard-list-view\"\n                columns={columns}\n                count={dashboardCount}\n                data={dashboards}\n                disableBulkSelect={toggleBulkSelect}\n                fetchData={fetchData}\n                refreshData={refreshData}\n                filters={filters}\n                initialSort={initialSort}\n                loading={loading}\n                pageSize={PAGE_SIZE}\n                addSuccessToast={addSuccessToast}\n                addDangerToast={addDangerToast}\n                showThumbnails={\n                  userKey\n                    ? userKey.thumbnails\n                    : isFeatureEnabled(FeatureFlag.Thumbnails)\n                }\n                renderCard={renderCard}\n                defaultViewMode={\n                  isFeatureEnabled(FeatureFlag.ListviewsDefaultCardView)\n                    ? 'card'\n                    : 'table'\n                }\n                enableBulkTag\n                bulkTagResourceName=\"dashboard\"\n              />\n            </>\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dashboard\"\n        resourceLabel={t('dashboard')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDashboardImport}\n        show={importingDashboard}\n        onHide={closeDashboardImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DashboardList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}