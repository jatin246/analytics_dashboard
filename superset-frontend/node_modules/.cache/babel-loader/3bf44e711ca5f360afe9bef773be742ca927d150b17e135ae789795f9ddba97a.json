{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { FeatureFlag, isFeatureEnabled } from '@superset-ui/core';\nimport { chart } from 'src/components/Chart/chartReducer';\nimport { initSliceEntities } from 'src/dashboard/reducers/sliceEntities';\nimport { getInitialState as getInitialNativeFilterState } from 'src/dashboard/reducers/nativeFilters';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport { buildActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { findPermission } from 'src/utils/findPermission';\nimport {\n  canUserEditDashboard,\n  canUserSaveAsDashboard } from\n'src/dashboard/util/permissionUtils';\nimport {\n  getCrossFiltersConfiguration,\n  isCrossFiltersEnabled } from\n'src/dashboard/util/crossFilters';\nimport {\n  DASHBOARD_HEADER_ID,\n  GRID_DEFAULT_CHART_WIDTH,\n  GRID_COLUMN_COUNT,\n  DASHBOARD_ROOT_ID } from\n'src/dashboard/util/constants';\nimport {\n  DASHBOARD_HEADER_TYPE,\n  CHART_TYPE,\n  ROW_TYPE } from\n'src/dashboard/util/componentTypes';\nimport findFirstParentContainerId from 'src/dashboard/util/findFirstParentContainer';\nimport getEmptyLayout from 'src/dashboard/util/getEmptyLayout';\nimport getLocationHash from 'src/dashboard/util/getLocationHash';\nimport newComponentFactory from 'src/dashboard/util/newComponentFactory';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport extractUrlParams from '../util/extractUrlParams';\nimport updateComponentParentsList from '../util/updateComponentParentsList';\nimport { FilterBarOrientation } from '../types';\n\nexport const HYDRATE_DASHBOARD = 'HYDRATE_DASHBOARD';\n\nexport const hydrateDashboard =\n({ history, dashboard, charts, dataMask, activeTabs }) =>\n(dispatch, getState) => {\n  const { user, common, dashboardState } = getState();\n  const { metadata, position_data: positionData } = dashboard;\n  const regularUrlParams = extractUrlParams('regular');\n  const reservedUrlParams = extractUrlParams('reserved');\n  const editMode = reservedUrlParams.edit === 'true';\n\n  charts.forEach((chart) => {\n    // eslint-disable-next-line no-param-reassign\n    chart.slice_id = chart.form_data.slice_id;\n  });\n\n  // new dash: position_json could be {} or null\n  const layout =\n  positionData && Object.keys(positionData).length > 0 ?\n  positionData :\n  getEmptyLayout();\n\n  // create a lookup to sync layout names with slice names\n  const chartIdToLayoutId = {};\n  Object.values(layout).forEach((layoutComponent) => {\n    if (layoutComponent.type === CHART_TYPE) {\n      chartIdToLayoutId[layoutComponent.meta.chartId] = layoutComponent.id;\n    }\n  });\n\n  // find root level chart container node for newly-added slices\n  const parentId = findFirstParentContainerId(layout);\n  const parent = layout[parentId];\n  let newSlicesContainer;\n  let newSlicesContainerWidth = 0;\n\n  const chartQueries = {};\n  const dashboardFilters = {};\n  const slices = {};\n  const sliceIds = new Set();\n  const slicesFromExploreCount = new Map();\n\n  charts.forEach((slice) => {\n    const key = slice.slice_id;\n    const formData = {\n      ...slice.form_data,\n      url_params: {\n        ...slice.form_data.url_params,\n        ...regularUrlParams\n      }\n    };\n    chartQueries[key] = {\n      ...chart,\n      id: key,\n      form_data: applyDefaultFormData(formData)\n    };\n\n    slices[key] = {\n      slice_id: key,\n      slice_url: slice.slice_url,\n      slice_name: slice.slice_name,\n      form_data: slice.form_data,\n      viz_type: slice.form_data.viz_type,\n      datasource: slice.form_data.datasource,\n      description: slice.description,\n      description_markeddown: slice.description_markeddown,\n      owners: slice.owners,\n      modified: slice.modified,\n      changed_on: new Date(slice.changed_on).getTime()\n    };\n\n    sliceIds.add(key);\n\n    // if there are newly added slices from explore view, fill slices into 1 or more rows\n    if (!chartIdToLayoutId[key] && layout[parentId]) {var _slicesFromExploreCou;\n      if (\n      newSlicesContainerWidth === 0 ||\n      newSlicesContainerWidth + GRID_DEFAULT_CHART_WIDTH > GRID_COLUMN_COUNT)\n      {\n        newSlicesContainer = newComponentFactory(\n          ROW_TYPE,\n          (parent.parents || []).slice()\n        );\n        layout[newSlicesContainer.id] = newSlicesContainer;\n        parent.children.push(newSlicesContainer.id);\n        newSlicesContainerWidth = 0;\n      }\n\n      const chartHolder = newComponentFactory(\n        CHART_TYPE,\n        {\n          chartId: slice.slice_id\n        },\n        (newSlicesContainer.parents || []).slice()\n      );\n\n      const count = ((_slicesFromExploreCou = slicesFromExploreCount.get(slice.slice_id)) != null ? _slicesFromExploreCou : 0) + 1;\n      chartHolder.id = `${CHART_TYPE}-explore-${slice.slice_id}-${count}`;\n      slicesFromExploreCount.set(slice.slice_id, count);\n\n      layout[chartHolder.id] = chartHolder;\n      newSlicesContainer.children.push(chartHolder.id);\n      chartIdToLayoutId[chartHolder.meta.chartId] = chartHolder.id;\n      newSlicesContainerWidth += GRID_DEFAULT_CHART_WIDTH;\n    }\n\n    // sync layout names with current slice names in case a slice was edited\n    // in explore since the layout was updated. name updates go through layout for undo/redo\n    // functionality and python updates slice names based on layout upon dashboard save\n    const layoutId = chartIdToLayoutId[key];\n    if (layoutId && layout[layoutId]) {\n      layout[layoutId].meta.sliceName = slice.slice_name;\n    }\n  });\n\n  // make sure that parents tree is built\n  if (\n  Object.values(layout).some(\n    (element) => element.id !== DASHBOARD_ROOT_ID && !element.parents\n  ))\n  {\n    updateComponentParentsList({\n      currentComponent: layout[DASHBOARD_ROOT_ID],\n      layout\n    });\n  }\n\n  buildActiveFilters({\n    dashboardFilters,\n    components: layout\n  });\n\n  // store the header as a layout component so we can undo/redo changes\n  layout[DASHBOARD_HEADER_ID] = {\n    id: DASHBOARD_HEADER_ID,\n    type: DASHBOARD_HEADER_TYPE,\n    meta: {\n      text: dashboard.dashboard_title\n    }\n  };\n\n  const dashboardLayout = {\n    past: [],\n    present: layout,\n    future: []\n  };\n\n  // Searches for a focused_chart parameter in the URL to automatically focus a chart\n  const focusedChartId = getUrlParam(URL_PARAMS.dashboardFocusedChart);\n  let focusedChartLayoutId;\n  if (focusedChartId) {\n    // Converts focused_chart to dashboard layout id\n    const found = Object.values(dashboardLayout.present).find(\n      (element) => {var _element$meta;return ((_element$meta = element.meta) == null ? void 0 : _element$meta.chartId) === focusedChartId;}\n    );\n    focusedChartLayoutId = found == null ? void 0 : found.id;\n    // Removes the focused_chart parameter from the URL\n    const params = new URLSearchParams(window.location.search);\n    params.delete(URL_PARAMS.dashboardFocusedChart.name);\n    history.replace({\n      search: params.toString()\n    });\n  }\n\n  // find direct link component and path from root\n  const directLinkComponentId = focusedChartLayoutId || getLocationHash();\n  let directPathToChild = dashboardState.directPathToChild || [];\n  if (layout[directLinkComponentId]) {\n    directPathToChild = (layout[directLinkComponentId].parents || []).slice();\n    directPathToChild.push(directLinkComponentId);\n  }\n\n  const nativeFilters = getInitialNativeFilterState({\n    filterConfig: (metadata == null ? void 0 : metadata.native_filter_configuration) || []\n  });\n\n  if (isFeatureEnabled(FeatureFlag.DashboardCrossFilters)) {\n    const { chartConfiguration, globalChartConfiguration } =\n    getCrossFiltersConfiguration(\n      dashboardLayout.present,\n      metadata,\n      chartQueries\n    );\n    metadata.chart_configuration = chartConfiguration;\n    metadata.global_chart_configuration = globalChartConfiguration;\n  }\n\n  const { roles } = user;\n  const canEdit = canUserEditDashboard(dashboard, user);\n  const crossFiltersEnabled = isCrossFiltersEnabled(\n    metadata.cross_filters_enabled\n  );\n\n  return dispatch({\n    type: HYDRATE_DASHBOARD,\n    data: {\n      sliceEntities: { ...initSliceEntities, slices, isLoading: false },\n      charts: chartQueries,\n      // read-only data\n      dashboardInfo: {\n        ...dashboard,\n        metadata,\n        userId: user.userId ? String(user.userId) : null, // legacy, please use state.user instead\n        dash_edit_perm: canEdit,\n        dash_save_perm: canUserSaveAsDashboard(dashboard, user),\n        dash_share_perm: findPermission(\n          'can_share_dashboard',\n          'Superset',\n          roles\n        ),\n        superset_can_explore: findPermission(\n          'can_explore',\n          'Superset',\n          roles\n        ),\n        superset_can_share: findPermission(\n          'can_share_chart',\n          'Superset',\n          roles\n        ),\n        superset_can_csv: findPermission('can_csv', 'Superset', roles),\n        common: {\n          // legacy, please use state.common instead\n          flash_messages: common == null ? void 0 : common.flash_messages,\n          conf: common == null ? void 0 : common.conf\n        },\n        filterBarOrientation:\n        isFeatureEnabled(FeatureFlag.HorizontalFilterBar) &&\n        metadata.filter_bar_orientation ||\n        FilterBarOrientation.Vertical,\n        crossFiltersEnabled\n      },\n      dataMask,\n      dashboardFilters,\n      nativeFilters,\n      dashboardState: {\n        preselectNativeFilters: getUrlParam(URL_PARAMS.nativeFilters),\n        sliceIds: Array.from(sliceIds),\n        directPathToChild,\n        directPathLastUpdated: Date.now(),\n        focusedFilterField: null,\n        expandedSlices: (metadata == null ? void 0 : metadata.expanded_slices) || {},\n        refreshFrequency: (metadata == null ? void 0 : metadata.refresh_frequency) || 0,\n        // dashboard viewers can set refresh frequency for the current visit,\n        // only persistent refreshFrequency will be saved to backend\n        shouldPersistRefreshFrequency: false,\n        css: dashboard.css || '',\n        colorNamespace: (metadata == null ? void 0 : metadata.color_namespace) || null,\n        colorScheme: (metadata == null ? void 0 : metadata.color_scheme) || null,\n        editMode: canEdit && editMode,\n        isPublished: dashboard.published,\n        hasUnsavedChanges: false,\n        dashboardIsSaving: false,\n        maxUndoHistoryExceeded: false,\n        lastModifiedTime: dashboard.changed_on,\n        isRefreshing: false,\n        isFiltersRefreshing: false,\n        activeTabs: activeTabs || (dashboardState == null ? void 0 : dashboardState.activeTabs) || [],\n        datasetsStatus: ResourceStatus.Loading\n      },\n      dashboardLayout\n    }\n  });\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(HYDRATE_DASHBOARD, \"HYDRATE_DASHBOARD\", \"/app/superset-frontend/src/dashboard/actions/hydrate.js\");reactHotLoader.register(hydrateDashboard, \"hydrateDashboard\", \"/app/superset-frontend/src/dashboard/actions/hydrate.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["FeatureFlag","isFeatureEnabled","chart","initSliceEntities","getInitialState","getInitialNativeFilterState","applyDefaultFormData","buildActiveFilters","findPermission","canUserEditDashboard","canUserSaveAsDashboard","getCrossFiltersConfiguration","isCrossFiltersEnabled","DASHBOARD_HEADER_ID","GRID_DEFAULT_CHART_WIDTH","GRID_COLUMN_COUNT","DASHBOARD_ROOT_ID","DASHBOARD_HEADER_TYPE","CHART_TYPE","ROW_TYPE","findFirstParentContainerId","getEmptyLayout","getLocationHash","newComponentFactory","URL_PARAMS","getUrlParam","ResourceStatus","extractUrlParams","updateComponentParentsList","FilterBarOrientation","HYDRATE_DASHBOARD","hydrateDashboard","history","dashboard","charts","dataMask","activeTabs","dispatch","getState","user","common","dashboardState","metadata","position_data","positionData","regularUrlParams","reservedUrlParams","editMode","edit","forEach","slice_id","form_data","layout","Object","keys","length","chartIdToLayoutId","values","layoutComponent","type","meta","chartId","id","parentId","parent","newSlicesContainer","newSlicesContainerWidth","chartQueries","dashboardFilters","slices","sliceIds","Set","slicesFromExploreCount","Map","slice","key","formData","url_params","slice_url","slice_name","viz_type","datasource","description","description_markeddown","owners","modified","changed_on","Date","getTime","add","_slicesFromExploreCou","parents","children","push","chartHolder","count","get","set","layoutId","sliceName","some","element","currentComponent","components","text","dashboard_title","dashboardLayout","past","present","future","focusedChartId","dashboardFocusedChart","focusedChartLayoutId","found","find","_element$meta","params","URLSearchParams","window","location","search","delete","name","replace","toString","directLinkComponentId","directPathToChild","nativeFilters","filterConfig","native_filter_configuration","DashboardCrossFilters","chartConfiguration","globalChartConfiguration","chart_configuration","global_chart_configuration","roles","canEdit","crossFiltersEnabled","cross_filters_enabled","data","sliceEntities","isLoading","dashboardInfo","userId","String","dash_edit_perm","dash_save_perm","dash_share_perm","superset_can_explore","superset_can_share","superset_can_csv","flash_messages","conf","filterBarOrientation","HorizontalFilterBar","filter_bar_orientation","Vertical","preselectNativeFilters","Array","from","directPathLastUpdated","now","focusedFilterField","expandedSlices","expanded_slices","refreshFrequency","refresh_frequency","shouldPersistRefreshFrequency","css","colorNamespace","color_namespace","colorScheme","color_scheme","isPublished","published","hasUnsavedChanges","dashboardIsSaving","maxUndoHistoryExceeded","lastModifiedTime","isRefreshing","isFiltersRefreshing","datasetsStatus","Loading","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/dashboard/actions/hydrate.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { FeatureFlag, isFeatureEnabled } from '@superset-ui/core';\nimport { chart } from 'src/components/Chart/chartReducer';\nimport { initSliceEntities } from 'src/dashboard/reducers/sliceEntities';\nimport { getInitialState as getInitialNativeFilterState } from 'src/dashboard/reducers/nativeFilters';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport { buildActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { findPermission } from 'src/utils/findPermission';\nimport {\n  canUserEditDashboard,\n  canUserSaveAsDashboard,\n} from 'src/dashboard/util/permissionUtils';\nimport {\n  getCrossFiltersConfiguration,\n  isCrossFiltersEnabled,\n} from 'src/dashboard/util/crossFilters';\nimport {\n  DASHBOARD_HEADER_ID,\n  GRID_DEFAULT_CHART_WIDTH,\n  GRID_COLUMN_COUNT,\n  DASHBOARD_ROOT_ID,\n} from 'src/dashboard/util/constants';\nimport {\n  DASHBOARD_HEADER_TYPE,\n  CHART_TYPE,\n  ROW_TYPE,\n} from 'src/dashboard/util/componentTypes';\nimport findFirstParentContainerId from 'src/dashboard/util/findFirstParentContainer';\nimport getEmptyLayout from 'src/dashboard/util/getEmptyLayout';\nimport getLocationHash from 'src/dashboard/util/getLocationHash';\nimport newComponentFactory from 'src/dashboard/util/newComponentFactory';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport extractUrlParams from '../util/extractUrlParams';\nimport updateComponentParentsList from '../util/updateComponentParentsList';\nimport { FilterBarOrientation } from '../types';\n\nexport const HYDRATE_DASHBOARD = 'HYDRATE_DASHBOARD';\n\nexport const hydrateDashboard =\n  ({ history, dashboard, charts, dataMask, activeTabs }) =>\n  (dispatch, getState) => {\n    const { user, common, dashboardState } = getState();\n    const { metadata, position_data: positionData } = dashboard;\n    const regularUrlParams = extractUrlParams('regular');\n    const reservedUrlParams = extractUrlParams('reserved');\n    const editMode = reservedUrlParams.edit === 'true';\n\n    charts.forEach(chart => {\n      // eslint-disable-next-line no-param-reassign\n      chart.slice_id = chart.form_data.slice_id;\n    });\n\n    // new dash: position_json could be {} or null\n    const layout =\n      positionData && Object.keys(positionData).length > 0\n        ? positionData\n        : getEmptyLayout();\n\n    // create a lookup to sync layout names with slice names\n    const chartIdToLayoutId = {};\n    Object.values(layout).forEach(layoutComponent => {\n      if (layoutComponent.type === CHART_TYPE) {\n        chartIdToLayoutId[layoutComponent.meta.chartId] = layoutComponent.id;\n      }\n    });\n\n    // find root level chart container node for newly-added slices\n    const parentId = findFirstParentContainerId(layout);\n    const parent = layout[parentId];\n    let newSlicesContainer;\n    let newSlicesContainerWidth = 0;\n\n    const chartQueries = {};\n    const dashboardFilters = {};\n    const slices = {};\n    const sliceIds = new Set();\n    const slicesFromExploreCount = new Map();\n\n    charts.forEach(slice => {\n      const key = slice.slice_id;\n      const formData = {\n        ...slice.form_data,\n        url_params: {\n          ...slice.form_data.url_params,\n          ...regularUrlParams,\n        },\n      };\n      chartQueries[key] = {\n        ...chart,\n        id: key,\n        form_data: applyDefaultFormData(formData),\n      };\n\n      slices[key] = {\n        slice_id: key,\n        slice_url: slice.slice_url,\n        slice_name: slice.slice_name,\n        form_data: slice.form_data,\n        viz_type: slice.form_data.viz_type,\n        datasource: slice.form_data.datasource,\n        description: slice.description,\n        description_markeddown: slice.description_markeddown,\n        owners: slice.owners,\n        modified: slice.modified,\n        changed_on: new Date(slice.changed_on).getTime(),\n      };\n\n      sliceIds.add(key);\n\n      // if there are newly added slices from explore view, fill slices into 1 or more rows\n      if (!chartIdToLayoutId[key] && layout[parentId]) {\n        if (\n          newSlicesContainerWidth === 0 ||\n          newSlicesContainerWidth + GRID_DEFAULT_CHART_WIDTH > GRID_COLUMN_COUNT\n        ) {\n          newSlicesContainer = newComponentFactory(\n            ROW_TYPE,\n            (parent.parents || []).slice(),\n          );\n          layout[newSlicesContainer.id] = newSlicesContainer;\n          parent.children.push(newSlicesContainer.id);\n          newSlicesContainerWidth = 0;\n        }\n\n        const chartHolder = newComponentFactory(\n          CHART_TYPE,\n          {\n            chartId: slice.slice_id,\n          },\n          (newSlicesContainer.parents || []).slice(),\n        );\n\n        const count = (slicesFromExploreCount.get(slice.slice_id) ?? 0) + 1;\n        chartHolder.id = `${CHART_TYPE}-explore-${slice.slice_id}-${count}`;\n        slicesFromExploreCount.set(slice.slice_id, count);\n\n        layout[chartHolder.id] = chartHolder;\n        newSlicesContainer.children.push(chartHolder.id);\n        chartIdToLayoutId[chartHolder.meta.chartId] = chartHolder.id;\n        newSlicesContainerWidth += GRID_DEFAULT_CHART_WIDTH;\n      }\n\n      // sync layout names with current slice names in case a slice was edited\n      // in explore since the layout was updated. name updates go through layout for undo/redo\n      // functionality and python updates slice names based on layout upon dashboard save\n      const layoutId = chartIdToLayoutId[key];\n      if (layoutId && layout[layoutId]) {\n        layout[layoutId].meta.sliceName = slice.slice_name;\n      }\n    });\n\n    // make sure that parents tree is built\n    if (\n      Object.values(layout).some(\n        element => element.id !== DASHBOARD_ROOT_ID && !element.parents,\n      )\n    ) {\n      updateComponentParentsList({\n        currentComponent: layout[DASHBOARD_ROOT_ID],\n        layout,\n      });\n    }\n\n    buildActiveFilters({\n      dashboardFilters,\n      components: layout,\n    });\n\n    // store the header as a layout component so we can undo/redo changes\n    layout[DASHBOARD_HEADER_ID] = {\n      id: DASHBOARD_HEADER_ID,\n      type: DASHBOARD_HEADER_TYPE,\n      meta: {\n        text: dashboard.dashboard_title,\n      },\n    };\n\n    const dashboardLayout = {\n      past: [],\n      present: layout,\n      future: [],\n    };\n\n    // Searches for a focused_chart parameter in the URL to automatically focus a chart\n    const focusedChartId = getUrlParam(URL_PARAMS.dashboardFocusedChart);\n    let focusedChartLayoutId;\n    if (focusedChartId) {\n      // Converts focused_chart to dashboard layout id\n      const found = Object.values(dashboardLayout.present).find(\n        element => element.meta?.chartId === focusedChartId,\n      );\n      focusedChartLayoutId = found?.id;\n      // Removes the focused_chart parameter from the URL\n      const params = new URLSearchParams(window.location.search);\n      params.delete(URL_PARAMS.dashboardFocusedChart.name);\n      history.replace({\n        search: params.toString(),\n      });\n    }\n\n    // find direct link component and path from root\n    const directLinkComponentId = focusedChartLayoutId || getLocationHash();\n    let directPathToChild = dashboardState.directPathToChild || [];\n    if (layout[directLinkComponentId]) {\n      directPathToChild = (layout[directLinkComponentId].parents || []).slice();\n      directPathToChild.push(directLinkComponentId);\n    }\n\n    const nativeFilters = getInitialNativeFilterState({\n      filterConfig: metadata?.native_filter_configuration || [],\n    });\n\n    if (isFeatureEnabled(FeatureFlag.DashboardCrossFilters)) {\n      const { chartConfiguration, globalChartConfiguration } =\n        getCrossFiltersConfiguration(\n          dashboardLayout.present,\n          metadata,\n          chartQueries,\n        );\n      metadata.chart_configuration = chartConfiguration;\n      metadata.global_chart_configuration = globalChartConfiguration;\n    }\n\n    const { roles } = user;\n    const canEdit = canUserEditDashboard(dashboard, user);\n    const crossFiltersEnabled = isCrossFiltersEnabled(\n      metadata.cross_filters_enabled,\n    );\n\n    return dispatch({\n      type: HYDRATE_DASHBOARD,\n      data: {\n        sliceEntities: { ...initSliceEntities, slices, isLoading: false },\n        charts: chartQueries,\n        // read-only data\n        dashboardInfo: {\n          ...dashboard,\n          metadata,\n          userId: user.userId ? String(user.userId) : null, // legacy, please use state.user instead\n          dash_edit_perm: canEdit,\n          dash_save_perm: canUserSaveAsDashboard(dashboard, user),\n          dash_share_perm: findPermission(\n            'can_share_dashboard',\n            'Superset',\n            roles,\n          ),\n          superset_can_explore: findPermission(\n            'can_explore',\n            'Superset',\n            roles,\n          ),\n          superset_can_share: findPermission(\n            'can_share_chart',\n            'Superset',\n            roles,\n          ),\n          superset_can_csv: findPermission('can_csv', 'Superset', roles),\n          common: {\n            // legacy, please use state.common instead\n            flash_messages: common?.flash_messages,\n            conf: common?.conf,\n          },\n          filterBarOrientation:\n            (isFeatureEnabled(FeatureFlag.HorizontalFilterBar) &&\n              metadata.filter_bar_orientation) ||\n            FilterBarOrientation.Vertical,\n          crossFiltersEnabled,\n        },\n        dataMask,\n        dashboardFilters,\n        nativeFilters,\n        dashboardState: {\n          preselectNativeFilters: getUrlParam(URL_PARAMS.nativeFilters),\n          sliceIds: Array.from(sliceIds),\n          directPathToChild,\n          directPathLastUpdated: Date.now(),\n          focusedFilterField: null,\n          expandedSlices: metadata?.expanded_slices || {},\n          refreshFrequency: metadata?.refresh_frequency || 0,\n          // dashboard viewers can set refresh frequency for the current visit,\n          // only persistent refreshFrequency will be saved to backend\n          shouldPersistRefreshFrequency: false,\n          css: dashboard.css || '',\n          colorNamespace: metadata?.color_namespace || null,\n          colorScheme: metadata?.color_scheme || null,\n          editMode: canEdit && editMode,\n          isPublished: dashboard.published,\n          hasUnsavedChanges: false,\n          dashboardIsSaving: false,\n          maxUndoHistoryExceeded: false,\n          lastModifiedTime: dashboard.changed_on,\n          isRefreshing: false,\n          isFiltersRefreshing: false,\n          activeTabs: activeTabs || dashboardState?.activeTabs || [],\n          datasetsStatus: ResourceStatus.Loading,\n        },\n        dashboardLayout,\n      },\n    });\n  };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}