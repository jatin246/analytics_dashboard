{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, GenericDataType, isAdhocColumn, isPhysicalColumn, QueryMode, SMART_DATE_ID, t } from '@superset-ui/core';\nimport { ColumnOption, D3_TIME_FORMAT_OPTIONS, QueryModeLabel, sharedControls, defineSavedMetrics, getStandardizedControls, sections } from '@superset-ui/chart-controls';\n\nimport { PAGE_SIZE_OPTIONS } from './consts';\nimport { ColorSchemeEnum } from './types';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nfunction getQueryMode(controls) {var _controls$query_mode, _controls$all_columns;\n  const mode = controls == null ? void 0 : (_controls$query_mode = controls.query_mode) == null ? void 0 : _controls$query_mode.value;\n  if (mode === QueryMode.Aggregate || mode === QueryMode.Raw) {\n    return mode;\n  }\n  const rawColumns = controls == null ? void 0 : (_controls$all_columns = controls.all_columns) == null ? void 0 : _controls$all_columns.value;\n  const hasRawColumns = rawColumns && rawColumns.length > 0;\n  return hasRawColumns ? QueryMode.Raw : QueryMode.Aggregate;\n}\n/**\n * Visibility check\n */\nfunction isQueryMode(mode) {\n  return ({ controls }) => getQueryMode(controls) === mode;\n}\nconst isAggMode = isQueryMode(QueryMode.Aggregate);\nconst isRawMode = isQueryMode(QueryMode.Raw);\nconst validateAggControlValues = (controls, values) => {\n  const areControlsEmpty = values.every((val) => ensureIsArray(val).length === 0);\n  return areControlsEmpty && isAggMode({ controls }) ?\n  [t('Group By, Metrics or Percentage Metrics must have a value')] :\n  [];\n};\nconst queryMode = {\n  type: 'RadioButtonControl',\n  label: t('Query mode'),\n  default: null,\n  options: [\n  [QueryMode.Aggregate, QueryModeLabel[QueryMode.Aggregate]],\n  [QueryMode.Raw, QueryModeLabel[QueryMode.Raw]]],\n\n  mapStateToProps: ({ controls }) => ({ value: getQueryMode(controls) }),\n  rerender: ['all_columns', 'groupby', 'metrics', 'percent_metrics']\n};\nconst allColumnsControl = {\n  ...sharedControls.groupby,\n  label: t('Columns'),\n  description: t('Columns to display'),\n  multi: true,\n  freeForm: true,\n  allowAll: true,\n  commaChoosesOption: false,\n  optionRenderer: (c) => _jsx(ColumnOption, { showType: true, column: c }),\n  valueRenderer: (c) => _jsx(ColumnOption, { column: c }),\n  valueKey: 'column_name',\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    options: (datasource == null ? void 0 : datasource.columns) || [],\n    queryMode: getQueryMode(controls),\n    externalValidationErrors: isRawMode({ controls }) && ensureIsArray(controlState == null ? void 0 : controlState.value).length === 0 ?\n    [t('must have a value')] :\n    []\n  }),\n  visibility: isRawMode,\n  resetOnHide: false\n};\nconst percentMetricsControl = {\n  ...sharedControls.metrics,\n  label: t('Percentage metrics'),\n  description: t('Select one or many metrics to display, that will be displayed in the percentages of total. ' +\n  'Percentage metrics will be calculated only from data within the row limit. ' +\n  'You can use an aggregation function on a column or write custom SQL to create a percentage metric.'),\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: ({ datasource, controls }, controlState) => {var _controls$groupby, _controls$metrics;return {\n      columns: (datasource == null ? void 0 : datasource.columns) || [],\n      savedMetrics: defineSavedMetrics(datasource),\n      datasource,\n      datasourceType: datasource == null ? void 0 : datasource.type,\n      queryMode: getQueryMode(controls),\n      externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby =\n      controls.groupby) == null ? void 0 : _controls$groupby.value, (_controls$metrics =\n      controls.metrics) == null ? void 0 : _controls$metrics.value,\n      controlState == null ? void 0 : controlState.value]\n      )\n    };},\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: []\n};\nconst processComparisonColumns = (columns, suffix) => columns.\nmap((col) => {\n  if (!col.label.includes(suffix)) {\n    return [\n    {\n      label: `${t('Main')} ${col.label}`,\n      value: `${t('Main')} ${col.value}`\n    },\n    {\n      label: `# ${col.label}`,\n      value: `# ${col.value}`\n    },\n    {\n      label: `△ ${col.label}`,\n      value: `△ ${col.value}`\n    },\n    {\n      label: `% ${col.label}`,\n      value: `% ${col.value}`\n    }];\n\n  }\n  return [];\n}).\nflat();\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'query_mode',\n      config: queryMode\n    }],\n\n    [\n    {\n      name: 'groupby',\n      override: {\n        visibility: isAggMode,\n        resetOnHide: false,\n        mapStateToProps: (state, controlState) => {var _sharedControls$group, _originalMapStateToPr, _controls$metrics2, _controls$percent_met;\n          const { controls } = state;\n          const originalMapStateToProps = sharedControls == null ? void 0 : (_sharedControls$group = sharedControls.groupby) == null ? void 0 : _sharedControls$group.mapStateToProps;\n          const newState = (_originalMapStateToPr = originalMapStateToProps == null ? void 0 : originalMapStateToProps(state, controlState)) != null ? _originalMapStateToPr : {};\n          newState.externalValidationErrors = validateAggControlValues(controls, [(_controls$metrics2 =\n          controls.metrics) == null ? void 0 : _controls$metrics2.value, (_controls$percent_met =\n          controls.percent_metrics) == null ? void 0 : _controls$percent_met.value,\n          controlState.value]\n          );\n          return newState;\n        },\n        rerender: ['metrics', 'percent_metrics']\n      }\n    }],\n\n    [\n    {\n      name: 'time_grain_sqla',\n      config: {\n        ...sharedControls.time_grain_sqla,\n        visibility: ({ controls }) => {var _controls$groupby2;\n          const dttmLookup = Object.fromEntries(ensureIsArray(controls == null ? void 0 : (_controls$groupby2 = controls.groupby) == null ? void 0 : _controls$groupby2.options).map((option) => [\n          option.column_name,\n          option.is_dttm]\n          ));\n          return ensureIsArray(controls == null ? void 0 : controls.groupby.value).\n          map((selection) => {\n            if (isAdhocColumn(selection)) {\n              return true;\n            }\n            if (isPhysicalColumn(selection)) {\n              return !!dttmLookup[selection];\n            }\n            return false;\n          }).\n          some(Boolean);\n        }\n      }\n    },\n    'temporal_columns_lookup'],\n\n    [\n    {\n      name: 'metrics',\n      override: {\n        validators: [],\n        visibility: isAggMode,\n        resetOnHide: false,\n        mapStateToProps: ({ controls, datasource, form_data }, controlState) => {var _datasource$columns$, _datasource$columns, _controls$groupby3, _controls$percent_met2;return {\n            columns: datasource != null && (_datasource$columns$ = datasource.columns[0]) != null && _datasource$columns$.hasOwnProperty('filterable') ?\n            datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.filter((c) => c.filterable) :\n            datasource == null ? void 0 : datasource.columns,\n            savedMetrics: defineSavedMetrics(datasource),\n            // current active adhoc metrics\n            selectedMetrics: form_data.metrics || (\n            form_data.metric ? [form_data.metric] : []),\n            datasource,\n            externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby3 =\n            controls.groupby) == null ? void 0 : _controls$groupby3.value, (_controls$percent_met2 =\n            controls.percent_metrics) == null ? void 0 : _controls$percent_met2.value,\n            controlState.value]\n            )\n          };},\n        rerender: ['groupby', 'percent_metrics']\n      }\n    },\n    {\n      name: 'all_columns',\n      config: allColumnsControl\n    }],\n\n    [\n    {\n      name: 'percent_metrics',\n      config: percentMetricsControl\n    }],\n\n    ['adhoc_filters'],\n    [\n    {\n      name: 'timeseries_limit_metric',\n      override: {\n        visibility: isAggMode,\n        resetOnHide: false\n      }\n    },\n    {\n      name: 'order_by_cols',\n      config: {\n        type: 'SelectControl',\n        label: t('Ordering'),\n        description: t('Order results by selected columns'),\n        multi: true,\n        default: [],\n        mapStateToProps: ({ datasource }) => ({\n          choices: datasource != null && datasource.hasOwnProperty('order_by_choices') ?\n          datasource == null ? void 0 : datasource.order_by_choices :\n          (datasource == null ? void 0 : datasource.columns) || []\n        }),\n        visibility: isRawMode,\n        resetOnHide: false\n      }\n    }],\n\n    [\n    {\n      name: 'server_pagination',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Server pagination'),\n        description: t('Enable server side pagination of results (experimental feature)'),\n        default: false\n      }\n    }],\n\n    [\n    {\n      name: 'row_limit',\n      override: {\n        default: 1000,\n        visibility: ({ controls }) => {var _controls$server_pagi;return !(controls != null && (_controls$server_pagi = controls.server_pagination) != null && _controls$server_pagi.value);}\n      }\n    },\n    {\n      name: 'server_page_length',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Server Page Length'),\n        default: 10,\n        choices: PAGE_SIZE_OPTIONS,\n        description: t('Rows per page, 0 means no pagination'),\n        visibility: ({ controls }) => {var _controls$server_pagi2;return Boolean(controls == null ? void 0 : (_controls$server_pagi2 = controls.server_pagination) == null ? void 0 : _controls$server_pagi2.value);}\n      }\n    }],\n\n    [\n    {\n      name: 'order_desc',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort descending'),\n        default: true,\n        description: t('If enabled, this control sorts the results/values descending, otherwise it sorts the results ascending.'),\n        visibility: isAggMode,\n        resetOnHide: false\n      }\n    }],\n\n    [\n    {\n      name: 'show_totals',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show summary'),\n        default: false,\n        description: t('Show total aggregations of selected metrics. Note that row limit does not apply to the result.'),\n        visibility: isAggMode,\n        resetOnHide: false\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Options'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'table_timestamp_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Timestamp format'),\n        default: SMART_DATE_ID,\n        renderTrigger: true,\n        clearable: false,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        description: t('D3 time format for datetime columns')\n      }\n    }],\n\n    [\n    {\n      name: 'page_length',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        renderTrigger: true,\n        label: t('Page length'),\n        default: null,\n        choices: PAGE_SIZE_OPTIONS,\n        description: t('Rows per page, 0 means no pagination'),\n        visibility: ({ controls }) => {var _controls$server_pagi3;return !(controls != null && (_controls$server_pagi3 = controls.server_pagination) != null && _controls$server_pagi3.value);}\n      }\n    },\n    null],\n\n    [\n    {\n      name: 'include_search',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Search box'),\n        renderTrigger: true,\n        default: false,\n        description: t('Whether to include a client-side search box')\n      }\n    }],\n\n    [\n    {\n      name: 'allow_rearrange_columns',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Allow columns to be rearranged'),\n        renderTrigger: true,\n        default: false,\n        description: t(\"Allow end user to drag-and-drop column headers to rearrange them. Note their changes won't persist for the next time they open the chart.\"),\n        visibility: ({ controls }) => {var _controls$time_compar;return _isEmpty(controls == null ? void 0 : (_controls$time_compar = controls.time_compare) == null ? void 0 : _controls$time_compar.value);}\n      }\n    }],\n\n    [\n    {\n      name: 'allow_render_html',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Render columns in HTML format'),\n        renderTrigger: true,\n        default: true,\n        description: t('Render data in HTML format if applicable.')\n      }\n    }],\n\n    [\n    {\n      name: 'column_config',\n      config: {\n        type: 'ColumnConfigControl',\n        label: t('Customize columns'),\n        description: t('Further customize how to display each column'),\n        width: 400,\n        height: 320,\n        renderTrigger: true,\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _chart$queriesRespons;\n          return {\n            queryResponse: chart == null ? void 0 : (_chart$queriesRespons = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons[0]\n          };\n        }\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Visual formatting'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'show_cell_bars',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Cell bars'),\n        renderTrigger: true,\n        default: true,\n        description: t('Whether to display a bar chart background in table columns')\n      }\n    }],\n\n    [\n    {\n      name: 'align_pn',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Align +/-'),\n        renderTrigger: true,\n        default: false,\n        description: t('Whether to align background charts with both positive and negative values at 0')\n      }\n    }],\n\n    [\n    {\n      name: 'color_pn',\n      config: {\n        type: 'CheckboxControl',\n        label: t('add colors to cell bars for +/-'),\n        renderTrigger: true,\n        default: true,\n        description: t('Whether to colorize numeric values by whether they are positive or negative')\n      }\n    }],\n\n    [\n    {\n      name: 'comparison_color_enabled',\n      config: {\n        type: 'CheckboxControl',\n        label: t('basic conditional formatting'),\n        renderTrigger: true,\n        visibility: ({ controls }) => {var _controls$time_compar2;return !_isEmpty(controls == null ? void 0 : (_controls$time_compar2 = controls.time_compare) == null ? void 0 : _controls$time_compar2.value);},\n        default: false,\n        description: t('This will be applied to the whole table. Arrows (↑ and ↓) will be added to ' +\n        'main columns for increase and decrease. Basic conditional formatting can be ' +\n        'overwritten by conditional formatting below.')\n      }\n    }],\n\n    [\n    {\n      name: 'comparison_color_scheme',\n      config: {\n        type: 'SelectControl',\n        label: t('color type'),\n        default: ColorSchemeEnum.Green,\n        renderTrigger: true,\n        choices: [\n        [ColorSchemeEnum.Green, 'Green for increase, red for decrease'],\n        [ColorSchemeEnum.Red, 'Red for increase, green for decrease']],\n\n        visibility: ({ controls }) => {var _controls$time_compar3, _controls$comparison_;return !_isEmpty(controls == null ? void 0 : (_controls$time_compar3 = controls.time_compare) == null ? void 0 : _controls$time_compar3.value) &&\n          Boolean(controls == null ? void 0 : (_controls$comparison_ = controls.comparison_color_enabled) == null ? void 0 : _controls$comparison_.value);},\n        description: t('Adds color to the chart symbols based on the positive or ' +\n        'negative change from the comparison value.')\n      }\n    }],\n\n    [\n    {\n      name: 'conditional_formatting',\n      config: {\n        type: 'ConditionalFormattingControl',\n        renderTrigger: true,\n        label: t('Custom Conditional Formatting'),\n        extraColorChoices: [\n        {\n          value: ColorSchemeEnum.Green,\n          label: t('Green for increase, red for decrease')\n        },\n        {\n          value: ColorSchemeEnum.Red,\n          label: t('Red for increase, green for decrease')\n        }],\n\n        description: t('Apply conditional color formatting to numeric columns'),\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _explore$datasource, _explore$datasource2, _explore$datasource$c, _explore$datasource3, _chart$queriesRespons2, _chart$queriesRespons3, _explore$controls, _explore$controls$tim, _ensureIsArray$, _explore$controls2, _explore$controls2$ti;\n          const verboseMap = explore != null && (_explore$datasource = explore.datasource) != null && _explore$datasource.hasOwnProperty('verbose_map') ?\n          explore == null ? void 0 : (_explore$datasource2 = explore.datasource) == null ? void 0 : _explore$datasource2.verbose_map : (_explore$datasource$c =\n          explore == null ? void 0 : (_explore$datasource3 = explore.datasource) == null ? void 0 : _explore$datasource3.columns) != null ? _explore$datasource$c : {};\n          const chartStatus = chart == null ? void 0 : chart.chartStatus;\n          const { colnames, coltypes } = (_chart$queriesRespons2 = chart == null ? void 0 : (_chart$queriesRespons3 = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons3[0]) != null ? _chart$queriesRespons2 : {};\n          const numericColumns = Array.isArray(colnames) && Array.isArray(coltypes) ?\n          colnames.\n          filter((colname, index) => coltypes[index] === GenericDataType.Numeric).\n          map((colname) => {var _verboseMap$colname;return {\n              value: colname,\n              label: (_verboseMap$colname = verboseMap[colname]) != null ? _verboseMap$colname : colname\n            };}) :\n          [];\n          const columnOptions = explore != null && (_explore$controls = explore.controls) != null && (_explore$controls$tim = _explore$controls.time_compare) != null && _explore$controls$tim.value ?\n          processComparisonColumns(numericColumns || [], ((_ensureIsArray$ = ensureIsArray(explore == null ? void 0 : (_explore$controls2 = explore.controls) == null ? void 0 : (_explore$controls2$ti = _explore$controls2.time_compare) == null ? void 0 : _explore$controls2$ti.value)[0]) == null ? void 0 : _ensureIsArray$.toString()) || '') :\n          numericColumns;\n          return {\n            removeIrrelevantConditions: chartStatus === 'success',\n            columnOptions,\n            verboseMap\n          };\n        }\n      }\n    }]]\n\n\n  },\n  {\n    ...sections.timeComparisonControls({\n      multi: false,\n      showCalculationType: false,\n      showFullChoices: false\n    }),\n    visibility: isAggMode\n  }],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns()\n  })\n};const _default =\nconfig;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getQueryMode, \"getQueryMode\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(isQueryMode, \"isQueryMode\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(isAggMode, \"isAggMode\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(isRawMode, \"isRawMode\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(validateAggControlValues, \"validateAggControlValues\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(queryMode, \"queryMode\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(allColumnsControl, \"allColumnsControl\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(percentMetricsControl, \"percentMetricsControl\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(processComparisonColumns, \"processComparisonColumns\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(config, \"config\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ensureIsArray","GenericDataType","isAdhocColumn","isPhysicalColumn","QueryMode","SMART_DATE_ID","t","ColumnOption","D3_TIME_FORMAT_OPTIONS","QueryModeLabel","sharedControls","defineSavedMetrics","getStandardizedControls","sections","PAGE_SIZE_OPTIONS","ColorSchemeEnum","jsx","_jsx","getQueryMode","controls","_controls$query_mode","_controls$all_columns","mode","query_mode","value","Aggregate","Raw","rawColumns","all_columns","hasRawColumns","length","isQueryMode","isAggMode","isRawMode","validateAggControlValues","values","areControlsEmpty","every","val","queryMode","type","label","default","options","mapStateToProps","rerender","allColumnsControl","groupby","description","multi","freeForm","allowAll","commaChoosesOption","optionRenderer","c","showType","column","valueRenderer","valueKey","datasource","controlState","columns","externalValidationErrors","visibility","resetOnHide","percentMetricsControl","metrics","_controls$groupby","_controls$metrics","savedMetrics","datasourceType","validators","processComparisonColumns","suffix","map","col","includes","flat","config","controlPanelSections","expanded","controlSetRows","name","override","state","_sharedControls$group","_originalMapStateToPr","_controls$metrics2","_controls$percent_met","originalMapStateToProps","newState","percent_metrics","time_grain_sqla","_controls$groupby2","dttmLookup","Object","fromEntries","option","column_name","is_dttm","selection","some","Boolean","form_data","_datasource$columns$","_datasource$columns","_controls$groupby3","_controls$percent_met2","hasOwnProperty","filter","filterable","selectedMetrics","metric","choices","order_by_choices","_controls$server_pagi","server_pagination","_controls$server_pagi2","renderTrigger","clearable","_controls$server_pagi3","_controls$time_compar","_isEmpty","time_compare","width","height","shouldMapStateToProps","explore","_","chart","_chart$queriesRespons","queryResponse","queriesResponse","_controls$time_compar2","Green","Red","_controls$time_compar3","_controls$comparison_","comparison_color_enabled","extraColorChoices","_explore$datasource","_explore$datasource2","_explore$datasource$c","_explore$datasource3","_chart$queriesRespons2","_chart$queriesRespons3","_explore$controls","_explore$controls$tim","_ensureIsArray$","_explore$controls2","_explore$controls2$ti","verboseMap","verbose_map","chartStatus","colnames","coltypes","numericColumns","Array","isArray","colname","index","Numeric","_verboseMap$colname","columnOptions","toString","removeIrrelevantConditions","timeComparisonControls","showCalculationType","showFullChoices","formDataOverrides","formData","popAllMetrics","popAllColumns","_default","reactHotLoader","reactHotLoaderGlobal","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ChartDataResponseResult,\n  ensureIsArray,\n  GenericDataType,\n  isAdhocColumn,\n  isPhysicalColumn,\n  QueryFormColumn,\n  QueryMode,\n  SMART_DATE_ID,\n  t,\n} from '@superset-ui/core';\nimport {\n  ColumnOption,\n  ControlConfig,\n  ControlPanelConfig,\n  ControlPanelsContainerProps,\n  ControlStateMapping,\n  D3_TIME_FORMAT_OPTIONS,\n  QueryModeLabel,\n  sharedControls,\n  ControlPanelState,\n  ControlState,\n  Dataset,\n  ColumnMeta,\n  defineSavedMetrics,\n  getStandardizedControls,\n  sections,\n} from '@superset-ui/chart-controls';\n\nimport { isEmpty } from 'lodash';\nimport { PAGE_SIZE_OPTIONS } from './consts';\nimport { ColorSchemeEnum } from './types';\n\nfunction getQueryMode(controls: ControlStateMapping): QueryMode {\n  const mode = controls?.query_mode?.value;\n  if (mode === QueryMode.Aggregate || mode === QueryMode.Raw) {\n    return mode as QueryMode;\n  }\n  const rawColumns = controls?.all_columns?.value as\n    | QueryFormColumn[]\n    | undefined;\n  const hasRawColumns = rawColumns && rawColumns.length > 0;\n  return hasRawColumns ? QueryMode.Raw : QueryMode.Aggregate;\n}\n\n/**\n * Visibility check\n */\nfunction isQueryMode(mode: QueryMode) {\n  return ({ controls }: Pick<ControlPanelsContainerProps, 'controls'>) =>\n    getQueryMode(controls) === mode;\n}\n\nconst isAggMode = isQueryMode(QueryMode.Aggregate);\nconst isRawMode = isQueryMode(QueryMode.Raw);\n\nconst validateAggControlValues = (\n  controls: ControlStateMapping,\n  values: any[],\n) => {\n  const areControlsEmpty = values.every(val => ensureIsArray(val).length === 0);\n  return areControlsEmpty && isAggMode({ controls })\n    ? [t('Group By, Metrics or Percentage Metrics must have a value')]\n    : [];\n};\n\nconst queryMode: ControlConfig<'RadioButtonControl'> = {\n  type: 'RadioButtonControl',\n  label: t('Query mode'),\n  default: null,\n  options: [\n    [QueryMode.Aggregate, QueryModeLabel[QueryMode.Aggregate]],\n    [QueryMode.Raw, QueryModeLabel[QueryMode.Raw]],\n  ],\n  mapStateToProps: ({ controls }) => ({ value: getQueryMode(controls) }),\n  rerender: ['all_columns', 'groupby', 'metrics', 'percent_metrics'],\n};\n\nconst allColumnsControl: typeof sharedControls.groupby = {\n  ...sharedControls.groupby,\n  label: t('Columns'),\n  description: t('Columns to display'),\n  multi: true,\n  freeForm: true,\n  allowAll: true,\n  commaChoosesOption: false,\n  optionRenderer: c => <ColumnOption showType column={c} />,\n  valueRenderer: c => <ColumnOption column={c} />,\n  valueKey: 'column_name',\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    options: datasource?.columns || [],\n    queryMode: getQueryMode(controls),\n    externalValidationErrors:\n      isRawMode({ controls }) && ensureIsArray(controlState?.value).length === 0\n        ? [t('must have a value')]\n        : [],\n  }),\n  visibility: isRawMode,\n  resetOnHide: false,\n};\n\nconst percentMetricsControl: typeof sharedControls.metrics = {\n  ...sharedControls.metrics,\n  label: t('Percentage metrics'),\n  description: t(\n    'Select one or many metrics to display, that will be displayed in the percentages of total. ' +\n      'Percentage metrics will be calculated only from data within the row limit. ' +\n      'You can use an aggregation function on a column or write custom SQL to create a percentage metric.',\n  ),\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    columns: datasource?.columns || [],\n    savedMetrics: defineSavedMetrics(datasource),\n    datasource,\n    datasourceType: datasource?.type,\n    queryMode: getQueryMode(controls),\n    externalValidationErrors: validateAggControlValues(controls, [\n      controls.groupby?.value,\n      controls.metrics?.value,\n      controlState?.value,\n    ]),\n  }),\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: [],\n};\n\nconst processComparisonColumns = (columns: any[], suffix: string) =>\n  columns\n    .map(col => {\n      if (!col.label.includes(suffix)) {\n        return [\n          {\n            label: `${t('Main')} ${col.label}`,\n            value: `${t('Main')} ${col.value}`,\n          },\n          {\n            label: `# ${col.label}`,\n            value: `# ${col.value}`,\n          },\n          {\n            label: `△ ${col.label}`,\n            value: `△ ${col.value}`,\n          },\n          {\n            label: `% ${col.label}`,\n            value: `% ${col.value}`,\n          },\n        ];\n      }\n      return [];\n    })\n    .flat();\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'query_mode',\n            config: queryMode,\n          },\n        ],\n        [\n          {\n            name: 'groupby',\n            override: {\n              visibility: isAggMode,\n              resetOnHide: false,\n              mapStateToProps: (\n                state: ControlPanelState,\n                controlState: ControlState,\n              ) => {\n                const { controls } = state;\n                const originalMapStateToProps =\n                  sharedControls?.groupby?.mapStateToProps;\n                const newState =\n                  originalMapStateToProps?.(state, controlState) ?? {};\n                newState.externalValidationErrors = validateAggControlValues(\n                  controls,\n                  [\n                    controls.metrics?.value,\n                    controls.percent_metrics?.value,\n                    controlState.value,\n                  ],\n                );\n\n                return newState;\n              },\n              rerender: ['metrics', 'percent_metrics'],\n            },\n          },\n        ],\n        [\n          {\n            name: 'time_grain_sqla',\n            config: {\n              ...sharedControls.time_grain_sqla,\n              visibility: ({ controls }) => {\n                const dttmLookup = Object.fromEntries(\n                  ensureIsArray(controls?.groupby?.options).map(option => [\n                    option.column_name,\n                    option.is_dttm,\n                  ]),\n                );\n\n                return ensureIsArray(controls?.groupby.value)\n                  .map(selection => {\n                    if (isAdhocColumn(selection)) {\n                      return true;\n                    }\n                    if (isPhysicalColumn(selection)) {\n                      return !!dttmLookup[selection];\n                    }\n                    return false;\n                  })\n                  .some(Boolean);\n              },\n            },\n          },\n          'temporal_columns_lookup',\n        ],\n        [\n          {\n            name: 'metrics',\n            override: {\n              validators: [],\n              visibility: isAggMode,\n              resetOnHide: false,\n              mapStateToProps: (\n                { controls, datasource, form_data }: ControlPanelState,\n                controlState: ControlState,\n              ) => ({\n                columns: datasource?.columns[0]?.hasOwnProperty('filterable')\n                  ? (datasource as Dataset)?.columns?.filter(\n                      (c: ColumnMeta) => c.filterable,\n                    )\n                  : datasource?.columns,\n                savedMetrics: defineSavedMetrics(datasource),\n                // current active adhoc metrics\n                selectedMetrics:\n                  form_data.metrics ||\n                  (form_data.metric ? [form_data.metric] : []),\n                datasource,\n                externalValidationErrors: validateAggControlValues(controls, [\n                  controls.groupby?.value,\n                  controls.percent_metrics?.value,\n                  controlState.value,\n                ]),\n              }),\n              rerender: ['groupby', 'percent_metrics'],\n            },\n          },\n          {\n            name: 'all_columns',\n            config: allColumnsControl,\n          },\n        ],\n        [\n          {\n            name: 'percent_metrics',\n            config: percentMetricsControl,\n          },\n        ],\n        ['adhoc_filters'],\n        [\n          {\n            name: 'timeseries_limit_metric',\n            override: {\n              visibility: isAggMode,\n              resetOnHide: false,\n            },\n          },\n          {\n            name: 'order_by_cols',\n            config: {\n              type: 'SelectControl',\n              label: t('Ordering'),\n              description: t('Order results by selected columns'),\n              multi: true,\n              default: [],\n              mapStateToProps: ({ datasource }) => ({\n                choices: datasource?.hasOwnProperty('order_by_choices')\n                  ? (datasource as Dataset)?.order_by_choices\n                  : datasource?.columns || [],\n              }),\n              visibility: isRawMode,\n              resetOnHide: false,\n            },\n          },\n        ],\n        [\n          {\n            name: 'server_pagination',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Server pagination'),\n              description: t(\n                'Enable server side pagination of results (experimental feature)',\n              ),\n              default: false,\n            },\n          },\n        ],\n        [\n          {\n            name: 'row_limit',\n            override: {\n              default: 1000,\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                !controls?.server_pagination?.value,\n            },\n          },\n          {\n            name: 'server_page_length',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Server Page Length'),\n              default: 10,\n              choices: PAGE_SIZE_OPTIONS,\n              description: t('Rows per page, 0 means no pagination'),\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                Boolean(controls?.server_pagination?.value),\n            },\n          },\n        ],\n        [\n          {\n            name: 'order_desc',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort descending'),\n              default: true,\n              description: t(\n                'If enabled, this control sorts the results/values descending, otherwise it sorts the results ascending.',\n              ),\n              visibility: isAggMode,\n              resetOnHide: false,\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_totals',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show summary'),\n              default: false,\n              description: t(\n                'Show total aggregations of selected metrics. Note that row limit does not apply to the result.',\n              ),\n              visibility: isAggMode,\n              resetOnHide: false,\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Options'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'table_timestamp_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Timestamp format'),\n              default: SMART_DATE_ID,\n              renderTrigger: true,\n              clearable: false,\n              choices: D3_TIME_FORMAT_OPTIONS,\n              description: t('D3 time format for datetime columns'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'page_length',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              renderTrigger: true,\n              label: t('Page length'),\n              default: null,\n              choices: PAGE_SIZE_OPTIONS,\n              description: t('Rows per page, 0 means no pagination'),\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                !controls?.server_pagination?.value,\n            },\n          },\n          null,\n        ],\n        [\n          {\n            name: 'include_search',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Search box'),\n              renderTrigger: true,\n              default: false,\n              description: t('Whether to include a client-side search box'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'allow_rearrange_columns',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Allow columns to be rearranged'),\n              renderTrigger: true,\n              default: false,\n              description: t(\n                \"Allow end user to drag-and-drop column headers to rearrange them. Note their changes won't persist for the next time they open the chart.\",\n              ),\n              visibility: ({ controls }) =>\n                isEmpty(controls?.time_compare?.value),\n            },\n          },\n        ],\n        [\n          {\n            name: 'allow_render_html',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Render columns in HTML format'),\n              renderTrigger: true,\n              default: true,\n              description: t('Render data in HTML format if applicable.'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'column_config',\n            config: {\n              type: 'ColumnConfigControl',\n              label: t('Customize columns'),\n              description: t('Further customize how to display each column'),\n              width: 400,\n              height: 320,\n              renderTrigger: true,\n              shouldMapStateToProps() {\n                return true;\n              },\n              mapStateToProps(explore, _, chart) {\n                return {\n                  queryResponse: chart?.queriesResponse?.[0] as\n                    | ChartDataResponseResult\n                    | undefined,\n                };\n              },\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Visual formatting'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'show_cell_bars',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show Cell bars'),\n              renderTrigger: true,\n              default: true,\n              description: t(\n                'Whether to display a bar chart background in table columns',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'align_pn',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Align +/-'),\n              renderTrigger: true,\n              default: false,\n              description: t(\n                'Whether to align background charts with both positive and negative values at 0',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'color_pn',\n            config: {\n              type: 'CheckboxControl',\n              label: t('add colors to cell bars for +/-'),\n              renderTrigger: true,\n              default: true,\n              description: t(\n                'Whether to colorize numeric values by whether they are positive or negative',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'comparison_color_enabled',\n            config: {\n              type: 'CheckboxControl',\n              label: t('basic conditional formatting'),\n              renderTrigger: true,\n              visibility: ({ controls }) =>\n                !isEmpty(controls?.time_compare?.value),\n              default: false,\n              description: t(\n                'This will be applied to the whole table. Arrows (↑ and ↓) will be added to ' +\n                  'main columns for increase and decrease. Basic conditional formatting can be ' +\n                  'overwritten by conditional formatting below.',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'comparison_color_scheme',\n            config: {\n              type: 'SelectControl',\n              label: t('color type'),\n              default: ColorSchemeEnum.Green,\n              renderTrigger: true,\n              choices: [\n                [ColorSchemeEnum.Green, 'Green for increase, red for decrease'],\n                [ColorSchemeEnum.Red, 'Red for increase, green for decrease'],\n              ],\n              visibility: ({ controls }) =>\n                !isEmpty(controls?.time_compare?.value) &&\n                Boolean(controls?.comparison_color_enabled?.value),\n              description: t(\n                'Adds color to the chart symbols based on the positive or ' +\n                  'negative change from the comparison value.',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'conditional_formatting',\n            config: {\n              type: 'ConditionalFormattingControl',\n              renderTrigger: true,\n              label: t('Custom Conditional Formatting'),\n              extraColorChoices: [\n                {\n                  value: ColorSchemeEnum.Green,\n                  label: t('Green for increase, red for decrease'),\n                },\n                {\n                  value: ColorSchemeEnum.Red,\n                  label: t('Red for increase, green for decrease'),\n                },\n              ],\n              description: t(\n                'Apply conditional color formatting to numeric columns',\n              ),\n              shouldMapStateToProps() {\n                return true;\n              },\n              mapStateToProps(explore, _, chart) {\n                const verboseMap = explore?.datasource?.hasOwnProperty(\n                  'verbose_map',\n                )\n                  ? (explore?.datasource as Dataset)?.verbose_map\n                  : explore?.datasource?.columns ?? {};\n                const chartStatus = chart?.chartStatus;\n                const { colnames, coltypes } =\n                  chart?.queriesResponse?.[0] ?? {};\n                const numericColumns =\n                  Array.isArray(colnames) && Array.isArray(coltypes)\n                    ? colnames\n                        .filter(\n                          (colname: string, index: number) =>\n                            coltypes[index] === GenericDataType.Numeric,\n                        )\n                        .map(colname => ({\n                          value: colname,\n                          label: verboseMap[colname] ?? colname,\n                        }))\n                    : [];\n                const columnOptions = explore?.controls?.time_compare?.value\n                  ? processComparisonColumns(\n                      numericColumns || [],\n                      ensureIsArray(\n                        explore?.controls?.time_compare?.value,\n                      )[0]?.toString() || '',\n                    )\n                  : numericColumns;\n\n                return {\n                  removeIrrelevantConditions: chartStatus === 'success',\n                  columnOptions,\n                  verboseMap,\n                };\n              },\n            },\n          },\n        ],\n      ],\n    },\n    {\n      ...sections.timeComparisonControls({\n        multi: false,\n        showCalculationType: false,\n        showFullChoices: false,\n      }),\n      visibility: isAggMode,\n    },\n  ],\n  formDataOverrides: formData => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns(),\n  }),\n};\n\nexport default config;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}