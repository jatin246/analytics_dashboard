{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport moment from 'moment';\nimport { css, ensureIsArray, fetchTimeRange, getTimeOffset, parseDttmToDate, t } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst MOMENT_FORMAT = 'YYYY-MM-DD';\nconst isTimeRangeEqual = (left, right) => _isEqual(left, right);\nconst isShiftEqual = (left, right) => _isEqual(left, right);\nconst oldChoices = {\n  r: 'inherit',\n  y: '1 year ago',\n  m: '1 month ago',\n  w: '1 week ago',\n  c: 'custom'\n};\nexport const ComparisonRangeLabel = ({ multi = true }) => {\n  const [labels, setLabels] = useState([]);\n  const currentTimeRangeFilters = useSelector((state) => state.explore.form_data.adhoc_filters.filter((adhoc_filter) => adhoc_filter.operator === 'TEMPORAL_RANGE'), isTimeRangeEqual);\n  const previousCustomFilter = useSelector((state) => {var _state$explore$form_d;return (_state$explore$form_d = state.explore.form_data.adhoc_custom) == null ? void 0 : _state$explore$form_d.filter((adhoc_filter) => adhoc_filter.operator === 'TEMPORAL_RANGE');}, isTimeRangeEqual);\n  const shifts = useSelector((state) => {\n    const formData = state.explore.form_data || {};\n    if (!(formData != null && formData.time_compare)) {\n      const previousTimeComparison = formData.time_comparison || '';\n      if (oldChoices.hasOwnProperty(previousTimeComparison)) {\n        const previousChoice = oldChoices[previousTimeComparison];\n        return [previousChoice];\n      }\n    }\n    return formData == null ? void 0 : formData.time_compare;\n  }, isShiftEqual);\n  const startDate = useSelector((state) => state.explore.form_data.start_date_offset);\n  useEffect(() => {\n    const shiftsArray = ensureIsArray(shifts);\n    if (_isEmpty(currentTimeRangeFilters) ||\n    _isEmpty(shiftsArray) && !startDate) {\n      setLabels([]);\n    } else\n    if (!_isEmpty(shifts) || startDate) {\n      let useStartDate = startDate;\n      if (!startDate && !_isEmpty(previousCustomFilter)) {var _previousCustomFilter;\n        useStartDate = (_previousCustomFilter = previousCustomFilter[0]) == null ? void 0 : _previousCustomFilter.comparator.split(' : ')[0];\n        useStartDate = moment(parseDttmToDate(useStartDate)).format(MOMENT_FORMAT);\n      }\n      const promises = currentTimeRangeFilters.map((filter) => {\n        const newShifts = getTimeOffset({\n          timeRangeFilter: filter,\n          shifts: shiftsArray,\n          startDate: useStartDate,\n          includeFutureOffsets: false // So we don't trigger requests for future dates\n        });\n        if (!_isEmpty(newShifts)) {\n          return fetchTimeRange(filter.comparator, filter.subject, ensureIsArray(newShifts));\n        }\n        return Promise.resolve({ value: '' });\n      });\n      Promise.all(promises).then((res) => {\n        // access the value property inside the res and set the labels with it in the state\n        setLabels(res.map((r) => {var _r$value;return (_r$value = r.value) != null ? _r$value : '';}));\n      });\n    }\n  }, [currentTimeRangeFilters, shifts, startDate]);\n  return labels.length ? _jsxs(_Fragment, { children: [\n    _jsx(ControlHeader, { label: t('Actual range for comparison') }),\n    labels.flat().map((label) => _jsx(_Fragment, { children:\n      _jsx(\"div\", { css: (theme) => css`\n              font-size: ${theme.typography.sizes.m}px;\n              color: ${theme.colors.grayscale.dark1};\n            `, children:\n        label }, label\n      ) }\n    ))] }\n  ) : null;\n};__signature__(ComparisonRangeLabel, \"useState{[labels, setLabels]([])}\\nuseSelector{currentTimeRangeFilters}\\nuseSelector{previousCustomFilter}\\nuseSelector{shifts}\\nuseSelector{startDate}\\nuseEffect{}\", () => [useSelector, useSelector, useSelector, useSelector]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(MOMENT_FORMAT, \"MOMENT_FORMAT\", \"/app/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");reactHotLoader.register(isTimeRangeEqual, \"isTimeRangeEqual\", \"/app/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");reactHotLoader.register(isShiftEqual, \"isShiftEqual\", \"/app/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");reactHotLoader.register(oldChoices, \"oldChoices\", \"/app/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");reactHotLoader.register(ComparisonRangeLabel, \"ComparisonRangeLabel\", \"/app/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","useState","useSelector","moment","css","ensureIsArray","fetchTimeRange","getTimeOffset","parseDttmToDate","t","ControlHeader","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","MOMENT_FORMAT","isTimeRangeEqual","left","right","_isEqual","isShiftEqual","oldChoices","r","y","m","w","c","ComparisonRangeLabel","multi","labels","setLabels","currentTimeRangeFilters","state","explore","form_data","adhoc_filters","filter","adhoc_filter","operator","previousCustomFilter","_state$explore$form_d","adhoc_custom","shifts","formData","time_compare","previousTimeComparison","time_comparison","hasOwnProperty","previousChoice","startDate","start_date_offset","shiftsArray","_isEmpty","useStartDate","_previousCustomFilter","comparator","split","format","promises","map","newShifts","timeRangeFilter","includeFutureOffsets","subject","Promise","resolve","value","all","then","res","_r$value","length","children","label","flat","theme","typography","sizes","colors","grayscale","dark1","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { isEmpty, isEqual } from 'lodash';\nimport moment from 'moment';\nimport {\n  BinaryAdhocFilter,\n  css,\n  ensureIsArray,\n  fetchTimeRange,\n  getTimeOffset,\n  parseDttmToDate,\n  SimpleAdhocFilter,\n  t,\n} from '@superset-ui/core';\nimport ControlHeader, {\n  ControlHeaderProps,\n} from 'src/explore/components/ControlHeader';\nimport { RootState } from 'src/views/store';\n\nconst MOMENT_FORMAT = 'YYYY-MM-DD';\n\nconst isTimeRangeEqual = (\n  left: BinaryAdhocFilter[],\n  right: BinaryAdhocFilter[],\n) => isEqual(left, right);\n\nconst isShiftEqual = (left: string[], right: string[]) => isEqual(left, right);\n\ntype ComparisonRangeLabelProps = ControlHeaderProps & {\n  multi?: boolean;\n};\n\nconst oldChoices = {\n  r: 'inherit',\n  y: '1 year ago',\n  m: '1 month ago',\n  w: '1 week ago',\n  c: 'custom',\n};\n\nexport const ComparisonRangeLabel = ({\n  multi = true,\n}: ComparisonRangeLabelProps) => {\n  const [labels, setLabels] = useState<string[]>([]);\n  const currentTimeRangeFilters = useSelector<RootState, BinaryAdhocFilter[]>(\n    state =>\n      state.explore.form_data.adhoc_filters.filter(\n        (adhoc_filter: SimpleAdhocFilter) =>\n          adhoc_filter.operator === 'TEMPORAL_RANGE',\n      ),\n    isTimeRangeEqual,\n  );\n  const previousCustomFilter = useSelector<RootState, BinaryAdhocFilter[]>(\n    state =>\n      state.explore.form_data.adhoc_custom?.filter(\n        (adhoc_filter: SimpleAdhocFilter) =>\n          adhoc_filter.operator === 'TEMPORAL_RANGE',\n      ),\n    isTimeRangeEqual,\n  );\n  const shifts = useSelector<RootState, string[]>(state => {\n    const formData = state.explore.form_data || {};\n    if (!formData?.time_compare) {\n      const previousTimeComparison = formData.time_comparison || '';\n      if (oldChoices.hasOwnProperty(previousTimeComparison)) {\n        const previousChoice = oldChoices[previousTimeComparison];\n        return [previousChoice];\n      }\n    }\n    return formData?.time_compare;\n  }, isShiftEqual);\n  const startDate = useSelector<RootState, string>(\n    state => state.explore.form_data.start_date_offset,\n  );\n\n  useEffect(() => {\n    const shiftsArray = ensureIsArray(shifts);\n    if (\n      isEmpty(currentTimeRangeFilters) ||\n      (isEmpty(shiftsArray) && !startDate)\n    ) {\n      setLabels([]);\n    } else if (!isEmpty(shifts) || startDate) {\n      let useStartDate = startDate;\n      if (!startDate && !isEmpty(previousCustomFilter)) {\n        useStartDate = previousCustomFilter[0]?.comparator.split(' : ')[0];\n        useStartDate = moment(parseDttmToDate(useStartDate)).format(\n          MOMENT_FORMAT,\n        );\n      }\n      const promises = currentTimeRangeFilters.map(filter => {\n        const newShifts = getTimeOffset({\n          timeRangeFilter: filter,\n          shifts: shiftsArray,\n          startDate: useStartDate,\n          includeFutureOffsets: false, // So we don't trigger requests for future dates\n        });\n\n        if (!isEmpty(newShifts)) {\n          return fetchTimeRange(\n            filter.comparator,\n            filter.subject,\n            ensureIsArray(newShifts),\n          );\n        }\n        return Promise.resolve({ value: '' });\n      });\n      Promise.all(promises).then(res => {\n        // access the value property inside the res and set the labels with it in the state\n        setLabels(res.map(r => r.value ?? ''));\n      });\n    }\n  }, [currentTimeRangeFilters, shifts, startDate]);\n\n  return labels.length ? (\n    <>\n      <ControlHeader label={t('Actual range for comparison')} />\n      {labels.flat().map(label => (\n        <>\n          <div\n            css={theme => css`\n              font-size: ${theme.typography.sizes.m}px;\n              color: ${theme.colors.grayscale.dark1};\n            `}\n            key={label}\n          >\n            {label}\n          </div>\n        </>\n      ))}\n    </>\n  ) : null;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}