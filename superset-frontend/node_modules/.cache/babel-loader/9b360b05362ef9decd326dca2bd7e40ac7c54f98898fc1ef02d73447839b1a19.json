{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _isEmpty from \"lodash/isEmpty\";import _isBoolean from \"lodash/isBoolean\";import _throttle from \"lodash/throttle\";import _debounce from \"lodash/debounce\";var _bootstrapData$common, _bootstrapData$common2;(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport { useState, useEffect, useMemo, useRef, useCallback } from 'react';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { CSSTransition } from 'react-transition-group';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport Split from 'react-split';\nimport { css, FeatureFlag, isFeatureEnabled, styled, t, useTheme, getExtensionsRegistry } from '@superset-ui/core';\n\nimport Modal from 'src/components/Modal';\nimport Mousetrap from 'mousetrap';\nimport Button from 'src/components/Button';\nimport Timer from 'src/components/Timer';\nimport ResizableSidebar from 'src/components/ResizableSidebar';\nimport { AntdDropdown, AntdSwitch, Skeleton } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { Menu } from 'src/components/Menu';\nimport Icons from 'src/components/Icons';\nimport { detectOS } from 'src/utils/common';\nimport { addNewQueryEditor, CtasEnum, estimateQueryCost, persistEditorHeight, postStopQuery, queryEditorSetAutorun, queryEditorSetSql, queryEditorSetCursorPosition, queryEditorSetAndSaveSql, queryEditorSetTemplateParams, runQueryFromSqlEditor, saveQuery, addSavedQueryToTabState, scheduleQuery, setActiveSouthPaneTab, updateSavedQuery, formatQuery, fetchQueryEditor } from 'src/SqlLab/actions/sqlLab';\nimport { STATE_TYPE_MAP, SQL_EDITOR_GUTTER_HEIGHT, SQL_EDITOR_GUTTER_MARGIN, SQL_TOOLBAR_HEIGHT, SQL_EDITOR_LEFTBAR_WIDTH, SQL_EDITOR_PADDING, INITIAL_NORTH_PERCENT, INITIAL_SOUTH_PERCENT, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS, WINDOW_RESIZE_THROTTLE_MS } from 'src/SqlLab/constants';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport Alert from 'src/components/Alert';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport useLogAction from 'src/logger/useLogAction';\nimport { LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS, LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS, LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST, LOG_ACTIONS_SQLLAB_FORMAT_SQL, LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE, LOG_ACTIONS_SQLLAB_RUN_QUERY, LOG_ACTIONS_SQLLAB_STOP_QUERY, Logger } from 'src/logger/LogUtils';\nimport TemplateParamsEditor from '../TemplateParamsEditor';\nimport SouthPane from '../SouthPane';\nimport SaveQuery from '../SaveQuery';\nimport ScheduleQueryButton from '../ScheduleQueryButton';\nimport EstimateQueryCostButton from '../EstimateQueryCostButton';\nimport ShareSqlLabQuery from '../ShareSqlLabQuery';\nimport SqlEditorLeftBar from '../SqlEditorLeftBar';\nimport AceEditorWrapper from '../AceEditorWrapper';\nimport RunQueryActionButton from '../RunQueryActionButton';\nimport QueryLimitSelect from '../QueryLimitSelect';\nimport KeyboardShortcutButton, { KEY_MAP, KeyboardShortcut } from '../KeyboardShortcutButton';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst bootstrapData = getBootstrapData();\nconst scheduledQueriesConf = bootstrapData == null ? void 0 : (_bootstrapData$common = bootstrapData.common) == null ? void 0 : (_bootstrapData$common2 = _bootstrapData$common.conf) == null ? void 0 : _bootstrapData$common2.SCHEDULED_QUERIES;\nconst StyledToolbar = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-top: 0;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n\n  form {\n    margin-block-end: 0;\n  }\n\n  .leftItems,\n  .rightItems {\n    display: flex;\n    align-items: center;\n    & > span {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n      display: inline-block;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n\n  .limitDropdown {\n    white-space: nowrap;\n  }\n`;\nconst StyledSidebar = styled.div`\n  flex: 0 0 ${({ width }) => width}px;\n  width: ${({ width }) => width}px;\n  padding: ${({ theme, hide }) => hide ? 0 : theme.gridUnit * 2.5}px;\n  border-right: 1px solid\n    ${({ theme, hide }) => hide ? 'transparent' : theme.colors.grayscale.light2};\n`;\nconst StyledSqlEditor = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n\n    .schemaPane {\n      transition: transform ${theme.transitionTiming}s ease-in-out;\n    }\n\n    .queryPane {\n      flex: 1 1 auto;\n      padding: ${theme.gridUnit * 2}px;\n      overflow-y: auto;\n      overflow-x: scroll;\n    }\n\n    .schemaPane-enter-done,\n    .schemaPane-exit {\n      transform: translateX(0);\n      z-index: 7;\n    }\n\n    .schemaPane-exit-active {\n      transform: translateX(-120%);\n    }\n\n    .schemaPane-enter-active {\n      transform: translateX(0);\n      max-width: ${theme.gridUnit * 75}px;\n    }\n\n    .schemaPane-enter,\n    .schemaPane-exit-done {\n      max-width: 0;\n      transform: translateX(-120%);\n      overflow: hidden;\n    }\n\n    .schemaPane-exit-done + .queryPane {\n      margin-left: 0;\n    }\n\n    .gutter {\n      border-top: 1px solid ${theme.colors.grayscale.light2};\n      border-bottom: 1px solid ${theme.colors.grayscale.light2};\n      width: 3%;\n      margin: ${SQL_EDITOR_GUTTER_MARGIN}px 47%;\n    }\n\n    .gutter.gutter-vertical {\n      cursor: row-resize;\n    }\n  `}\n`;\nconst extensionsRegistry = getExtensionsRegistry();\nconst elementStyle = (dimension, elementSize, gutterSize) => ({\n  [dimension]: `calc(${elementSize}% - ${gutterSize + SQL_EDITOR_GUTTER_MARGIN}px)`\n});var _ref = process.env.NODE_ENV === \"production\" ? { name: \"1eoy87d\", styles: \"display:flex;justify-content:space-between\" } : { name: \"1egglng-renderDropdown\", styles: \"display:flex;justify-content:space-between;label:renderDropdown;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref2 = process.env.NODE_ENV === \"production\" ? { name: \"1eoy87d\", styles: \"display:flex;justify-content:space-between\" } : { name: \"1egglng-renderDropdown\", styles: \"display:flex;justify-content:space-between;label:renderDropdown;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nconst SqlEditor = ({ queryEditor, defaultQueryLimit, maxRow, displayLimit, saveQueryWarning, scheduleQueryWarning }) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const { database, latestQuery, hideLeftBar, currentQueryEditorId, hasSqlStatement } = useSelector(({ sqlLab: { unsavedQueryEditor, databases, queries, tabHistory } }) => {var _queryEditor$sql;\n    let { dbId, latestQueryId, hideLeftBar } = queryEditor;\n    if ((unsavedQueryEditor == null ? void 0 : unsavedQueryEditor.id) === queryEditor.id) {\n      dbId = unsavedQueryEditor.dbId || dbId;\n      latestQueryId = unsavedQueryEditor.latestQueryId || latestQueryId;\n      hideLeftBar = _isBoolean(unsavedQueryEditor.hideLeftBar) ?\n      unsavedQueryEditor.hideLeftBar :\n      hideLeftBar;\n    }\n    return {\n      hasSqlStatement: Boolean(((_queryEditor$sql = queryEditor.sql) == null ? void 0 : _queryEditor$sql.trim().length) > 0),\n      database: databases[dbId || ''],\n      latestQuery: queries[latestQueryId || ''],\n      hideLeftBar,\n      currentQueryEditorId: tabHistory.slice(-1)[0]\n    };\n  }, shallowEqual);\n  const logAction = useLogAction({ queryEditorId: queryEditor.id });\n  const isActive = currentQueryEditorId === queryEditor.id;\n  const [height, setHeight] = useState(0);\n  const [autorun, setAutorun] = useState(queryEditor.autorun);\n  const [ctas, setCtas] = useState('');\n  const [northPercent, setNorthPercent] = useState(queryEditor.northPercent || INITIAL_NORTH_PERCENT);\n  const [southPercent, setSouthPercent] = useState(queryEditor.southPercent || INITIAL_SOUTH_PERCENT);\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState(getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true));\n  const [renderHTMLEnabled, setRenderHTMLEnabled] = useState(getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, false));\n  const [showCreateAsModal, setShowCreateAsModal] = useState(false);\n  const [createAs, setCreateAs] = useState('');\n  const showEmptyState = useMemo(() => !database || _isEmpty(database), [database]);\n  const sqlEditorRef = useRef(null);\n  const northPaneRef = useRef(null);\n  const SqlFormExtension = extensionsRegistry.get('sqleditor.extension.form');\n  const startQuery = useCallback((ctasArg = false, ctas_method = CtasEnum.Table) => {\n    if (!database) {\n      return;\n    }\n    dispatch(runQueryFromSqlEditor(database, queryEditor, defaultQueryLimit, ctasArg ? ctas : '', ctasArg, ctas_method));\n    dispatch(setActiveSouthPaneTab('Results'));\n  }, [ctas, database, defaultQueryLimit, dispatch, queryEditor]);\n  const formatCurrentQuery = useCallback((useShortcut) => {\n    logAction(LOG_ACTIONS_SQLLAB_FORMAT_SQL, {\n      shortcut: Boolean(useShortcut)\n    });\n    dispatch(formatQuery(queryEditor));\n  }, [dispatch, queryEditor, logAction]);\n  const stopQuery = useCallback(() => {\n    if (latestQuery && ['running', 'pending'].indexOf(latestQuery.state) >= 0) {\n      dispatch(postStopQuery(latestQuery));\n    }\n    return false;\n  }, [dispatch, latestQuery]);\n  const runQuery = () => {\n    if (database) {\n      startQuery();\n    }\n  };\n  useEffect(() => {\n    if (autorun) {\n      setAutorun(false);\n      dispatch(queryEditorSetAutorun(queryEditor, false));\n      startQuery();\n    }\n  }, [autorun, dispatch, queryEditor, startQuery]);\n  // One layer of abstraction for easy spying in unit tests\n  const getSqlEditorHeight = () => sqlEditorRef.current ?\n  sqlEditorRef.current.clientHeight - SQL_EDITOR_PADDING * 2 :\n  0;\n  const getHotkeyConfig = useCallback(() => {\n    // Get the user's OS\n    const userOS = detectOS();\n    return [\n    {\n      name: 'runQuery1',\n      key: KeyboardShortcut.CtrlR,\n      descr: KEY_MAP[KeyboardShortcut.CtrlR],\n      func: () => {\n        if (queryEditor.sql.trim() !== '') {\n          logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n          startQuery();\n        }\n      }\n    },\n    {\n      name: 'runQuery2',\n      key: KeyboardShortcut.CtrlEnter,\n      descr: KEY_MAP[KeyboardShortcut.CtrlEnter],\n      func: () => {\n        if (queryEditor.sql.trim() !== '') {\n          logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n          startQuery();\n        }\n      }\n    },\n    {\n      name: 'newTab',\n      ...(userOS === 'Windows' ?\n      {\n        key: KeyboardShortcut.CtrlQ,\n        descr: KEY_MAP[KeyboardShortcut.CtrlQ]\n      } :\n      {\n        key: KeyboardShortcut.CtrlT,\n        descr: KEY_MAP[KeyboardShortcut.CtrlT]\n      }),\n      func: () => {\n        Logger.markTimeOrigin();\n        dispatch(addNewQueryEditor());\n      }\n    },\n    {\n      name: 'stopQuery',\n      ...(userOS === 'MacOS' ?\n      {\n        key: KeyboardShortcut.CtrlX,\n        descr: KEY_MAP[KeyboardShortcut.CtrlX]\n      } :\n      {\n        key: KeyboardShortcut.CtrlE,\n        descr: KEY_MAP[KeyboardShortcut.CtrlE]\n      }),\n      func: () => {\n        logAction(LOG_ACTIONS_SQLLAB_STOP_QUERY, { shortcut: true });\n        stopQuery();\n      }\n    },\n    {\n      name: 'formatQuery',\n      key: KeyboardShortcut.CtrlShiftF,\n      descr: KEY_MAP[KeyboardShortcut.CtrlShiftF],\n      func: () => {\n        formatCurrentQuery(true);\n      }\n    }];\n\n  }, [dispatch, queryEditor.sql, startQuery, stopQuery, formatCurrentQuery]);\n  const hotkeys = useMemo(() => {\n    // Get all hotkeys including ace editor hotkeys\n    // Get the user's OS\n    const userOS = detectOS();\n    const base = [\n    ...getHotkeyConfig(),\n    {\n      name: 'runQuery3',\n      key: KeyboardShortcut.CtrlShiftEnter,\n      descr: KEY_MAP[KeyboardShortcut.CtrlShiftEnter],\n      func: (editor) => {var _editor$find, _editor$find2, _start, _start2, _start3, _start4, _start5;\n        if (!editor.getValue().trim()) {\n          return;\n        }\n        const session = editor.getSession();\n        const cursorPosition = editor.getCursorPosition();\n        const totalLine = session.getLength();\n        const currentRow = editor.getFirstVisibleRow();\n        let end = (_editor$find = editor.find(';', {\n          backwards: false,\n          skipCurrent: true\n        })) == null ? void 0 : _editor$find.end;\n        if (!end || end.row < cursorPosition.row) {\n          end = {\n            row: totalLine + 1,\n            column: 0\n          };\n        }\n        let start = (_editor$find2 = editor.find(';', {\n          backwards: true,\n          skipCurrent: true\n        })) == null ? void 0 : _editor$find2.end;\n        let currentLine = (_start = start) == null ? void 0 : _start.row;\n        if (!currentLine ||\n        currentLine > cursorPosition.row ||\n        currentLine === cursorPosition.row &&\n        (((_start2 = start) == null ? void 0 : _start2.column) || 0) > cursorPosition.column) {\n          currentLine = 0;\n        }\n        let content = currentLine === ((_start3 = start) == null ? void 0 : _start3.row) ?\n        session.getLine(currentLine).slice(start.column).trim() :\n        session.getLine(currentLine).trim();\n        while (!content && currentLine < totalLine) {\n          currentLine += 1;\n          content = session.getLine(currentLine).trim();\n        }\n        if (currentLine !== ((_start4 = start) == null ? void 0 : _start4.row)) {\n          start = { row: currentLine, column: 0 };\n        }\n        editor.selection.setSelectionRange({\n          start: (_start5 = start) != null ? _start5 : { row: 0, column: 0 },\n          end\n        });\n        startQuery();\n        editor.selection.clearSelection();\n        editor.moveCursorToPosition(cursorPosition);\n        editor.scrollToRow(currentRow);\n      }\n    }];\n\n    if (userOS === 'MacOS') {\n      base.push({\n        name: 'previousLine',\n        key: KeyboardShortcut.CtrlP,\n        descr: KEY_MAP[KeyboardShortcut.CtrlP],\n        func: (editor) => {\n          editor.navigateUp();\n        }\n      });\n    }\n    return base;\n  }, [getHotkeyConfig, startQuery]);\n  const onBeforeUnload = useEffectEvent((event) => {var _database$extra_json;\n    if (database != null && (_database$extra_json = database.extra_json) != null && _database$extra_json.cancel_query_on_windows_unload &&\n    (latestQuery == null ? void 0 : latestQuery.state) === 'running') {\n      event.preventDefault();\n      stopQuery();\n    }\n  });\n  const shouldLoadQueryEditor = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n  !queryEditor.loaded;\n  const loadQueryEditor = useEffectEvent(() => {\n    const duration = Logger.getTimestamp();\n    logAction(LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE, {\n      duration,\n      queryEditorId: queryEditor.id,\n      inLocalStorage: Boolean(queryEditor.inLocalStorage),\n      hasLoaded: !shouldLoadQueryEditor\n    });\n    if (shouldLoadQueryEditor) {\n      dispatch(fetchQueryEditor(queryEditor, displayLimit));\n    }\n  });\n  useEffect(() => {\n    // We need to measure the height of the sql editor post render to figure the height of\n    // the south pane so it gets rendered properly\n    setHeight(getSqlEditorHeight());\n    const handleWindowResizeWithThrottle = _throttle(() => setHeight(getSqlEditorHeight()), WINDOW_RESIZE_THROTTLE_MS);\n    if (isActive) {\n      loadQueryEditor();\n      window.addEventListener('resize', handleWindowResizeWithThrottle);\n      window.addEventListener('beforeunload', onBeforeUnload);\n    }\n    return () => {\n      window.removeEventListener('resize', handleWindowResizeWithThrottle);\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n    // TODO: Remove useEffectEvent deps once https://github.com/facebook/react/pull/25881 is released\n  }, [onBeforeUnload, loadQueryEditor, isActive]);\n  useEffect(() => {\n    // setup hotkeys\n    const hotkeys = getHotkeyConfig();\n    if (isActive) {\n      // MouseTrap always override the same key\n      // Unbind (reset) will be called when App component unmount\n      hotkeys.forEach((keyConfig) => {\n        Mousetrap.bind([keyConfig.key], keyConfig.func);\n      });\n    }\n  }, [getHotkeyConfig, latestQuery, isActive]);\n  const onResizeStart = () => {\n    // Set the heights on the ace editor and the ace content area after drag starts\n    // to smooth out the visual transition to the new heights when drag ends\n    const editorEl = document.getElementsByClassName('ace_content')[0];\n    if (editorEl) {\n      editorEl.style.height = '100%';\n    }\n  };\n  const onResizeEnd = ([northPercent, southPercent]) => {var _northPaneRef$current;\n    setNorthPercent(northPercent);\n    setSouthPercent(southPercent);\n    if ((_northPaneRef$current = northPaneRef.current) != null && _northPaneRef$current.clientHeight) {\n      dispatch(persistEditorHeight(queryEditor, northPercent, southPercent));\n    }\n  };\n  const setQueryEditorAndSaveSql = useCallback((sql) => {\n    dispatch(queryEditorSetAndSaveSql(queryEditor, sql));\n  }, [dispatch, queryEditor]);\n  const setQueryEditorAndSaveSqlWithDebounce = useMemo(() => _debounce(setQueryEditorAndSaveSql, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS), [setQueryEditorAndSaveSql]);\n  const onSqlChanged = useEffectEvent((sql) => {\n    dispatch(queryEditorSetSql(queryEditor, sql));\n  });\n  // Return the heights for the ace editor and the south pane as an object\n  // given the height of the sql editor, north pane percent and south pane percent.\n  const getAceEditorAndSouthPaneHeights = (height, northPercent, southPercent) => ({\n    aceEditorHeight: height * northPercent / (theme.gridUnit * 25) - (\n    SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN) -\n    SQL_TOOLBAR_HEIGHT,\n    southPaneHeight: height * southPercent / (theme.gridUnit * 25) - (\n    SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN)\n  });\n  const getQueryCostEstimate = () => {\n    logAction(LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST, { shortcut: false });\n    if (database) {\n      dispatch(estimateQueryCost(queryEditor));\n    }\n  };\n  const handleToggleAutocompleteEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, !autocompleteEnabled);\n    setAutocompleteEnabled(!autocompleteEnabled);\n  };\n  const handleToggleRenderHTMLEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, !renderHTMLEnabled);\n    setRenderHTMLEnabled(!renderHTMLEnabled);\n  };\n  const createTableAs = () => {\n    startQuery(true, CtasEnum.Table);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n  const createViewAs = () => {\n    startQuery(true, CtasEnum.View);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n  const ctasChanged = (event) => {\n    setCtas(event.target.value);\n  };\n  const renderDropdown = () => {\n    const qe = queryEditor;\n    const successful = (latestQuery == null ? void 0 : latestQuery.state) === 'success';\n    const scheduleToolTip = successful ?\n    t('Schedule the query periodically') :\n    t('You must run the query successfully first');\n    return _jsxs(Menu, { css: /*#__PURE__*/_css({ width: theme.gridUnit * 50 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:renderDropdown;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), children: [\n      _jsxs(Menu.Item, { css: _ref, children: [\n        ' ',\n        _jsx(\"span\", { children: t('Render HTML') }), ' ',\n        _jsx(AntdSwitch, { checked: renderHTMLEnabled, onChange: handleToggleRenderHTMLEnabled }), ' '] }\n      ),\n      _jsxs(Menu.Item, { css: _ref2, children: [\n        ' ',\n        _jsx(\"span\", { children: t('Autocomplete') }), ' ',\n        _jsx(AntdSwitch, { checked: autocompleteEnabled, onChange: handleToggleAutocompleteEnabled }), ' '] }\n      ),\n      isFeatureEnabled(FeatureFlag.EnableTemplateProcessing) && _jsx(Menu.Item, { children:\n        _jsx(TemplateParamsEditor, { language: \"json\", onChange: (params) => {\n            dispatch(queryEditorSetTemplateParams(qe, params));\n          }, queryEditorId: qe.id }) }\n      ),\n      _jsx(Menu.Item, { onClick: () => formatCurrentQuery(), children:\n        t('Format SQL') }\n      ),\n      !_isEmpty(scheduledQueriesConf) && _jsx(Menu.Item, { children:\n        _jsx(ScheduleQueryButton, { defaultLabel: qe.name, sql: qe.sql, onSchedule: (query) => dispatch(scheduleQuery(query)), schema: qe.schema, dbId: qe.dbId, scheduleQueryWarning: scheduleQueryWarning, tooltip: scheduleToolTip, disabled: !successful }) }\n      ),\n      _jsx(Menu.Item, { children:\n        _jsx(KeyboardShortcutButton, { children:\n          t('Keyboard shortcuts') }\n        ) }\n      )] }\n    );\n  };\n  const onSaveQuery = async (query, clientId) => {\n    const savedQuery = await dispatch(saveQuery(query, clientId));\n    dispatch(addSavedQueryToTabState(queryEditor, savedQuery));\n  };\n  const renderEditorBottomBar = (hideActions) => {var _latestQuery$results;\n    const { allow_ctas: allowCTAS, allow_cvas: allowCVAS } = database || {};\n    const showMenu = allowCTAS || allowCVAS;\n    const runMenuBtn = _jsxs(Menu, { children: [\n      allowCTAS && _jsx(Menu.Item, { onClick: () => {\n          logAction(LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS, {\n            shortcut: false\n          });\n          setShowCreateAsModal(true);\n          setCreateAs(CtasEnum.Table);\n        }, children:\n        t('CREATE TABLE AS') }, \"1\"\n      ),\n      allowCVAS && _jsx(Menu.Item, { onClick: () => {\n          logAction(LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS, {\n            shortcut: false\n          });\n          setShowCreateAsModal(true);\n          setCreateAs(CtasEnum.View);\n        }, children:\n        t('CREATE VIEW AS') }, \"2\"\n      )] }\n    );\n    return _jsx(StyledToolbar, { className: \"sql-toolbar\", id: \"js-sql-toolbar\", children:\n      hideActions ? _jsx(Alert, { type: \"warning\", message: t('The database that was used to generate this query could not be found'), description: t('Choose one of the available databases on the left panel.'), closable: false }) : _jsxs(_Fragment, { children: [\n        _jsxs(\"div\", { className: \"leftItems\", children: [\n          _jsx(\"span\", { children:\n            _jsx(RunQueryActionButton, { allowAsync: (database == null ? void 0 : database.allow_run_async) === true, queryEditorId: queryEditor.id, queryState: latestQuery == null ? void 0 : latestQuery.state, runQuery: runQuery, stopQuery: stopQuery, overlayCreateAsMenu: showMenu ? runMenuBtn : null }) }\n          ),\n          isFeatureEnabled(FeatureFlag.EstimateQueryCost) && (\n          database == null ? void 0 : database.allows_cost_estimate) && _jsx(\"span\", { children:\n            _jsx(EstimateQueryCostButton, { getEstimate: getQueryCostEstimate, queryEditorId: queryEditor.id, tooltip: t('Estimate the cost before running a query') }) }\n          ),\n          _jsx(\"span\", { children:\n            _jsx(QueryLimitSelect, { queryEditorId: queryEditor.id, maxRow: maxRow, defaultQueryLimit: defaultQueryLimit }) }\n          ),\n          latestQuery && _jsx(Timer, { startTime: latestQuery.startDttm, endTime: latestQuery.endDttm, status: STATE_TYPE_MAP[latestQuery.state], isRunning: latestQuery.state === 'running' })] }\n        ),\n        _jsxs(\"div\", { className: \"rightItems\", children: [\n          _jsx(\"span\", { children:\n            _jsx(SaveQuery, { queryEditorId: queryEditor.id, columns: (latestQuery == null ? void 0 : (_latestQuery$results = latestQuery.results) == null ? void 0 : _latestQuery$results.columns) || [], onSave: onSaveQuery, onUpdate: (query, remoteId) => dispatch(updateSavedQuery(query, remoteId)), saveQueryWarning: saveQueryWarning, database: database }) }\n          ),\n          _jsx(\"span\", { children:\n            _jsx(ShareSqlLabQuery, { queryEditorId: queryEditor.id }) }\n          ),\n          _jsx(AntdDropdown, { overlay: renderDropdown(), trigger: ['click'], children:\n            _jsx(Icons.MoreHoriz, { iconColor: theme.colors.grayscale.base }) }\n          )] }\n        )] }\n      ) }\n    );\n  };\n  const handleCursorPositionChange = (newPosition) => {\n    dispatch(queryEditorSetCursorPosition(queryEditor, newPosition));\n  };\n  const queryPane = () => {\n    const { aceEditorHeight, southPaneHeight } = getAceEditorAndSouthPaneHeights(height, northPercent, southPercent);\n    return _jsxs(Split, { expandToMin: true, className: \"queryPane\", sizes: [northPercent, southPercent], elementStyle: elementStyle, minSize: 200, direction: \"vertical\", gutterSize: SQL_EDITOR_GUTTER_HEIGHT, onDragStart: onResizeStart, onDragEnd: onResizeEnd, children: [\n      _jsxs(\"div\", { ref: northPaneRef, className: \"north-pane\", children: [\n        SqlFormExtension && _jsx(SqlFormExtension, { queryEditorId: queryEditor.id, setQueryEditorAndSaveSqlWithDebounce: setQueryEditorAndSaveSqlWithDebounce, startQuery: startQuery }),\n        _jsx(AceEditorWrapper, { autocomplete: autocompleteEnabled, onBlur: onSqlChanged, onChange: onSqlChanged, queryEditorId: queryEditor.id, onCursorPositionChange: handleCursorPositionChange, height: `${aceEditorHeight}px`, hotkeys: hotkeys }),\n        renderEditorBottomBar(showEmptyState)] }\n      ),\n      _jsx(SouthPane, { queryEditorId: queryEditor.id, latestQueryId: latestQuery == null ? void 0 : latestQuery.id, height: southPaneHeight, displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit })] }\n    );\n  };\n  const createViewModalTitle = createAs === CtasEnum.View ? 'CREATE VIEW AS' : 'CREATE TABLE AS';\n  const createModalPlaceHolder = createAs === CtasEnum.View ?\n  t('Specify name to CREATE VIEW AS schema in: public') :\n  t('Specify name to CREATE TABLE AS schema in: public');\n  const leftBarStateClass = hideLeftBar ?\n  'schemaPane-exit-done' :\n  'schemaPane-enter-done';\n  return _jsxs(StyledSqlEditor, { ref: sqlEditorRef, className: \"SqlEditor\", children: [\n    _jsx(CSSTransition, { classNames: \"schemaPane\", in: !hideLeftBar, timeout: 300, children:\n      _jsx(ResizableSidebar, { id: `sqllab:${queryEditor.id}`, minWidth: SQL_EDITOR_LEFTBAR_WIDTH, initialWidth: SQL_EDITOR_LEFTBAR_WIDTH, enable: !hideLeftBar, children:\n        (adjustedWidth) => _jsx(StyledSidebar, { className: `schemaPane ${leftBarStateClass}`, width: adjustedWidth, hide: hideLeftBar, children:\n          _jsx(SqlEditorLeftBar, { database: database, queryEditorId: queryEditor.id }) }\n        ) }\n      ) }\n    ),\n    shouldLoadQueryEditor ? _jsx(\"div\", { \"data-test\": \"sqlEditor-loading\", css: css`\n            flex: 1;\n            padding: ${theme.gridUnit * 4}px;\n          `, children:\n      _jsx(Skeleton, { active: true }) }\n    ) : showEmptyState && !hasSqlStatement ? _jsx(EmptyStateBig, { image: \"vector.svg\", title: t('Select a database to write a query'), description: t('Choose one of the available databases from the panel on the left.') }) : queryPane(),\n    _jsxs(Modal, { show: showCreateAsModal, title: t(createViewModalTitle), onHide: () => setShowCreateAsModal(false), footer: _jsxs(_Fragment, { children: [\n        _jsx(Button, { onClick: () => setShowCreateAsModal(false), children:\n          t('Cancel') }\n        ),\n        createAs === CtasEnum.Table && _jsx(Button, { buttonStyle: \"primary\", disabled: ctas.length === 0, onClick: createTableAs, children:\n          t('Create') }\n        ),\n        createAs === CtasEnum.View && _jsx(Button, { buttonStyle: \"primary\", disabled: ctas.length === 0, onClick: createViewAs, children:\n          t('Create') }\n        )] }\n      ), children: [\n      _jsx(\"span\", { children: t('Name') }),\n      _jsx(Input, { placeholder: createModalPlaceHolder, onChange: ctasChanged })] }\n    )] }\n  );\n};__signature__(SqlEditor, \"useTheme{theme}\\nuseDispatch{dispatch}\\nuseSelector{{ database, latestQuery, hideLeftBar, currentQueryEditorId, hasSqlStatement, }}\\nuseLogAction{logAction}\\nuseState{[height, setHeight](0)}\\nuseState{[autorun, setAutorun](queryEditor.autorun)}\\nuseState{[ctas, setCtas]('')}\\nuseState{[northPercent, setNorthPercent](queryEditor.northPercent || INITIAL_NORTH_PERCENT)}\\nuseState{[southPercent, setSouthPercent](queryEditor.southPercent || INITIAL_SOUTH_PERCENT)}\\nuseState{[autocompleteEnabled, setAutocompleteEnabled](getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true))}\\nuseState{[renderHTMLEnabled, setRenderHTMLEnabled](getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, false))}\\nuseState{[showCreateAsModal, setShowCreateAsModal](false)}\\nuseState{[createAs, setCreateAs]('')}\\nuseMemo{showEmptyState}\\nuseRef{sqlEditorRef}\\nuseRef{northPaneRef}\\nuseCallback{startQuery}\\nuseCallback{formatCurrentQuery}\\nuseCallback{stopQuery}\\nuseEffect{}\\nuseCallback{getHotkeyConfig}\\nuseMemo{hotkeys}\\nuseEffectEvent{onBeforeUnload}\\nuseEffectEvent{loadQueryEditor}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{setQueryEditorAndSaveSql}\\nuseMemo{setQueryEditorAndSaveSqlWithDebounce}\\nuseEffectEvent{onSqlChanged}\", () => [useTheme, useDispatch, useSelector, useLogAction, useEffectEvent, useEffectEvent, useEffectEvent]);const _default =\nSqlEditor;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(bootstrapData, \"bootstrapData\", \"/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(scheduledQueriesConf, \"scheduledQueriesConf\", \"/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(StyledToolbar, \"StyledToolbar\", \"/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(StyledSidebar, \"StyledSidebar\", \"/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(StyledSqlEditor, \"StyledSqlEditor\", \"/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(extensionsRegistry, \"extensionsRegistry\", \"/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(elementStyle, \"elementStyle\", \"/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(SqlEditor, \"SqlEditor\", \"/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useEffect","useMemo","useRef","useCallback","useEffectEvent","CSSTransition","shallowEqual","useDispatch","useSelector","Split","css","FeatureFlag","isFeatureEnabled","styled","t","useTheme","getExtensionsRegistry","Modal","Mousetrap","Button","Timer","ResizableSidebar","AntdDropdown","AntdSwitch","Skeleton","Input","Menu","Icons","detectOS","addNewQueryEditor","CtasEnum","estimateQueryCost","persistEditorHeight","postStopQuery","queryEditorSetAutorun","queryEditorSetSql","queryEditorSetCursorPosition","queryEditorSetAndSaveSql","queryEditorSetTemplateParams","runQueryFromSqlEditor","saveQuery","addSavedQueryToTabState","scheduleQuery","setActiveSouthPaneTab","updateSavedQuery","formatQuery","fetchQueryEditor","STATE_TYPE_MAP","SQL_EDITOR_GUTTER_HEIGHT","SQL_EDITOR_GUTTER_MARGIN","SQL_TOOLBAR_HEIGHT","SQL_EDITOR_LEFTBAR_WIDTH","SQL_EDITOR_PADDING","INITIAL_NORTH_PERCENT","INITIAL_SOUTH_PERCENT","SET_QUERY_EDITOR_SQL_DEBOUNCE_MS","WINDOW_RESIZE_THROTTLE_MS","getItem","LocalStorageKeys","setItem","EmptyStateBig","Alert","getBootstrapData","useLogAction","LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS","LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS","LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST","LOG_ACTIONS_SQLLAB_FORMAT_SQL","LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE","LOG_ACTIONS_SQLLAB_RUN_QUERY","LOG_ACTIONS_SQLLAB_STOP_QUERY","Logger","TemplateParamsEditor","SouthPane","SaveQuery","ScheduleQueryButton","EstimateQueryCostButton","ShareSqlLabQuery","SqlEditorLeftBar","AceEditorWrapper","RunQueryActionButton","QueryLimitSelect","KeyboardShortcutButton","KEY_MAP","KeyboardShortcut","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","bootstrapData","scheduledQueriesConf","_bootstrapData$common","common","_bootstrapData$common2","conf","SCHEDULED_QUERIES","StyledToolbar","div","theme","gridUnit","colors","grayscale","light5","light2","StyledSidebar","width","hide","StyledSqlEditor","transitionTiming","extensionsRegistry","elementStyle","dimension","elementSize","gutterSize","_ref","process","env","NODE_ENV","name","styles","map","toString","_EMOTION_STRINGIFIED_CSS_ERROR__","_ref2","SqlEditor","queryEditor","defaultQueryLimit","maxRow","displayLimit","saveQueryWarning","scheduleQueryWarning","dispatch","database","latestQuery","hideLeftBar","currentQueryEditorId","hasSqlStatement","sqlLab","unsavedQueryEditor","databases","queries","tabHistory","_queryEditor$sql","dbId","latestQueryId","id","_isBoolean","Boolean","sql","trim","length","slice","logAction","queryEditorId","isActive","height","setHeight","autorun","setAutorun","ctas","setCtas","northPercent","setNorthPercent","southPercent","setSouthPercent","autocompleteEnabled","setAutocompleteEnabled","SqllabIsAutocompleteEnabled","renderHTMLEnabled","setRenderHTMLEnabled","SqllabIsRenderHtmlEnabled","showCreateAsModal","setShowCreateAsModal","createAs","setCreateAs","showEmptyState","_isEmpty","sqlEditorRef","northPaneRef","SqlFormExtension","get","startQuery","ctasArg","ctas_method","Table","formatCurrentQuery","useShortcut","shortcut","stopQuery","indexOf","state","runQuery","getSqlEditorHeight","current","clientHeight","getHotkeyConfig","userOS","key","CtrlR","descr","func","CtrlEnter","CtrlQ","CtrlT","markTimeOrigin","CtrlX","CtrlE","CtrlShiftF","hotkeys","base","CtrlShiftEnter","editor","_editor$find","_editor$find2","_start","_start2","_start3","_start4","_start5","getValue","session","getSession","cursorPosition","getCursorPosition","totalLine","getLength","currentRow","getFirstVisibleRow","end","find","backwards","skipCurrent","row","column","start","currentLine","content","getLine","selection","setSelectionRange","clearSelection","moveCursorToPosition","scrollToRow","push","CtrlP","navigateUp","onBeforeUnload","event","_database$extra_json","extra_json","cancel_query_on_windows_unload","preventDefault","shouldLoadQueryEditor","SqllabBackendPersistence","loaded","loadQueryEditor","duration","getTimestamp","inLocalStorage","hasLoaded","handleWindowResizeWithThrottle","_throttle","window","addEventListener","removeEventListener","forEach","keyConfig","bind","onResizeStart","editorEl","document","getElementsByClassName","style","onResizeEnd","_northPaneRef$current","setQueryEditorAndSaveSql","setQueryEditorAndSaveSqlWithDebounce","_debounce","onSqlChanged","getAceEditorAndSouthPaneHeights","aceEditorHeight","southPaneHeight","getQueryCostEstimate","handleToggleAutocompleteEnabled","handleToggleRenderHTMLEnabled","createTableAs","createViewAs","View","ctasChanged","target","value","renderDropdown","qe","successful","scheduleToolTip","_css","children","Item","checked","onChange","EnableTemplateProcessing","language","params","onClick","defaultLabel","onSchedule","query","schema","tooltip","disabled","onSaveQuery","clientId","savedQuery","renderEditorBottomBar","hideActions","_latestQuery$results","allow_ctas","allowCTAS","allow_cvas","allowCVAS","showMenu","runMenuBtn","className","type","message","description","closable","allowAsync","allow_run_async","queryState","overlayCreateAsMenu","EstimateQueryCost","allows_cost_estimate","getEstimate","startTime","startDttm","endTime","endDttm","status","isRunning","columns","results","onSave","onUpdate","remoteId","overlay","trigger","MoreHoriz","iconColor","handleCursorPositionChange","newPosition","queryPane","expandToMin","sizes","minSize","direction","onDragStart","onDragEnd","ref","autocomplete","onBlur","onCursorPositionChange","createViewModalTitle","createModalPlaceHolder","leftBarStateClass","classNames","in","timeout","minWidth","initialWidth","enable","adjustedWidth","active","image","title","show","onHide","footer","buttonStyle","placeholder","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport {\n  useState,\n  useEffect,\n  useMemo,\n  useRef,\n  useCallback,\n  ChangeEvent,\n  FC,\n} from 'react';\n\nimport type AceEditor from 'react-ace';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { CSSTransition } from 'react-transition-group';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport Split from 'react-split';\nimport {\n  css,\n  FeatureFlag,\n  isFeatureEnabled,\n  styled,\n  t,\n  useTheme,\n  getExtensionsRegistry,\n  QueryResponse,\n  Query,\n} from '@superset-ui/core';\nimport type {\n  QueryEditor,\n  SqlLabRootState,\n  CursorPosition,\n} from 'src/SqlLab/types';\nimport type { DatabaseObject } from 'src/features/databases/types';\nimport { debounce, throttle, isBoolean, isEmpty } from 'lodash';\nimport Modal from 'src/components/Modal';\nimport Mousetrap from 'mousetrap';\nimport Button from 'src/components/Button';\nimport Timer from 'src/components/Timer';\nimport ResizableSidebar from 'src/components/ResizableSidebar';\nimport { AntdDropdown, AntdSwitch, Skeleton } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { Menu } from 'src/components/Menu';\nimport Icons from 'src/components/Icons';\nimport { detectOS } from 'src/utils/common';\nimport {\n  addNewQueryEditor,\n  CtasEnum,\n  estimateQueryCost,\n  persistEditorHeight,\n  postStopQuery,\n  queryEditorSetAutorun,\n  queryEditorSetSql,\n  queryEditorSetCursorPosition,\n  queryEditorSetAndSaveSql,\n  queryEditorSetTemplateParams,\n  runQueryFromSqlEditor,\n  saveQuery,\n  addSavedQueryToTabState,\n  scheduleQuery,\n  setActiveSouthPaneTab,\n  updateSavedQuery,\n  formatQuery,\n  fetchQueryEditor,\n} from 'src/SqlLab/actions/sqlLab';\nimport {\n  STATE_TYPE_MAP,\n  SQL_EDITOR_GUTTER_HEIGHT,\n  SQL_EDITOR_GUTTER_MARGIN,\n  SQL_TOOLBAR_HEIGHT,\n  SQL_EDITOR_LEFTBAR_WIDTH,\n  SQL_EDITOR_PADDING,\n  INITIAL_NORTH_PERCENT,\n  INITIAL_SOUTH_PERCENT,\n  SET_QUERY_EDITOR_SQL_DEBOUNCE_MS,\n  WINDOW_RESIZE_THROTTLE_MS,\n} from 'src/SqlLab/constants';\nimport {\n  getItem,\n  LocalStorageKeys,\n  setItem,\n} from 'src/utils/localStorageHelpers';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport Alert from 'src/components/Alert';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport useLogAction from 'src/logger/useLogAction';\nimport {\n  LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS,\n  LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS,\n  LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST,\n  LOG_ACTIONS_SQLLAB_FORMAT_SQL,\n  LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE,\n  LOG_ACTIONS_SQLLAB_RUN_QUERY,\n  LOG_ACTIONS_SQLLAB_STOP_QUERY,\n  Logger,\n} from 'src/logger/LogUtils';\nimport TemplateParamsEditor from '../TemplateParamsEditor';\nimport SouthPane from '../SouthPane';\nimport SaveQuery, { QueryPayload } from '../SaveQuery';\nimport ScheduleQueryButton from '../ScheduleQueryButton';\nimport EstimateQueryCostButton from '../EstimateQueryCostButton';\nimport ShareSqlLabQuery from '../ShareSqlLabQuery';\nimport SqlEditorLeftBar from '../SqlEditorLeftBar';\nimport AceEditorWrapper from '../AceEditorWrapper';\nimport RunQueryActionButton from '../RunQueryActionButton';\nimport QueryLimitSelect from '../QueryLimitSelect';\nimport KeyboardShortcutButton, {\n  KEY_MAP,\n  KeyboardShortcut,\n} from '../KeyboardShortcutButton';\n\nconst bootstrapData = getBootstrapData();\nconst scheduledQueriesConf = bootstrapData?.common?.conf?.SCHEDULED_QUERIES;\n\nconst StyledToolbar = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-top: 0;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n\n  form {\n    margin-block-end: 0;\n  }\n\n  .leftItems,\n  .rightItems {\n    display: flex;\n    align-items: center;\n    & > span {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n      display: inline-block;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n\n  .limitDropdown {\n    white-space: nowrap;\n  }\n`;\n\nconst StyledSidebar = styled.div<{ width: number; hide: boolean | undefined }>`\n  flex: 0 0 ${({ width }) => width}px;\n  width: ${({ width }) => width}px;\n  padding: ${({ theme, hide }) => (hide ? 0 : theme.gridUnit * 2.5)}px;\n  border-right: 1px solid\n    ${({ theme, hide }) =>\n      hide ? 'transparent' : theme.colors.grayscale.light2};\n`;\n\nconst StyledSqlEditor = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n\n    .schemaPane {\n      transition: transform ${theme.transitionTiming}s ease-in-out;\n    }\n\n    .queryPane {\n      flex: 1 1 auto;\n      padding: ${theme.gridUnit * 2}px;\n      overflow-y: auto;\n      overflow-x: scroll;\n    }\n\n    .schemaPane-enter-done,\n    .schemaPane-exit {\n      transform: translateX(0);\n      z-index: 7;\n    }\n\n    .schemaPane-exit-active {\n      transform: translateX(-120%);\n    }\n\n    .schemaPane-enter-active {\n      transform: translateX(0);\n      max-width: ${theme.gridUnit * 75}px;\n    }\n\n    .schemaPane-enter,\n    .schemaPane-exit-done {\n      max-width: 0;\n      transform: translateX(-120%);\n      overflow: hidden;\n    }\n\n    .schemaPane-exit-done + .queryPane {\n      margin-left: 0;\n    }\n\n    .gutter {\n      border-top: 1px solid ${theme.colors.grayscale.light2};\n      border-bottom: 1px solid ${theme.colors.grayscale.light2};\n      width: 3%;\n      margin: ${SQL_EDITOR_GUTTER_MARGIN}px 47%;\n    }\n\n    .gutter.gutter-vertical {\n      cursor: row-resize;\n    }\n  `}\n`;\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nexport type Props = {\n  queryEditor: QueryEditor;\n  defaultQueryLimit: number;\n  maxRow: number;\n  displayLimit: number;\n  saveQueryWarning: string | null;\n  scheduleQueryWarning: string | null;\n};\n\nconst elementStyle = (\n  dimension: string,\n  elementSize: number,\n  gutterSize: number,\n) => ({\n  [dimension]: `calc(${elementSize}% - ${\n    gutterSize + SQL_EDITOR_GUTTER_MARGIN\n  }px)`,\n});\n\nconst SqlEditor: FC<Props> = ({\n  queryEditor,\n  defaultQueryLimit,\n  maxRow,\n  displayLimit,\n  saveQueryWarning,\n  scheduleQueryWarning,\n}) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n\n  const {\n    database,\n    latestQuery,\n    hideLeftBar,\n    currentQueryEditorId,\n    hasSqlStatement,\n  } = useSelector<\n    SqlLabRootState,\n    {\n      database?: DatabaseObject;\n      latestQuery?: QueryResponse;\n      hideLeftBar?: boolean;\n      currentQueryEditorId: QueryEditor['id'];\n      hasSqlStatement: boolean;\n    }\n  >(({ sqlLab: { unsavedQueryEditor, databases, queries, tabHistory } }) => {\n    let { dbId, latestQueryId, hideLeftBar } = queryEditor;\n    if (unsavedQueryEditor?.id === queryEditor.id) {\n      dbId = unsavedQueryEditor.dbId || dbId;\n      latestQueryId = unsavedQueryEditor.latestQueryId || latestQueryId;\n      hideLeftBar = isBoolean(unsavedQueryEditor.hideLeftBar)\n        ? unsavedQueryEditor.hideLeftBar\n        : hideLeftBar;\n    }\n    return {\n      hasSqlStatement: Boolean(queryEditor.sql?.trim().length > 0),\n      database: databases[dbId || ''],\n      latestQuery: queries[latestQueryId || ''],\n      hideLeftBar,\n      currentQueryEditorId: tabHistory.slice(-1)[0],\n    };\n  }, shallowEqual);\n\n  const logAction = useLogAction({ queryEditorId: queryEditor.id });\n  const isActive = currentQueryEditorId === queryEditor.id;\n  const [height, setHeight] = useState(0);\n  const [autorun, setAutorun] = useState(queryEditor.autorun);\n  const [ctas, setCtas] = useState('');\n  const [northPercent, setNorthPercent] = useState(\n    queryEditor.northPercent || INITIAL_NORTH_PERCENT,\n  );\n  const [southPercent, setSouthPercent] = useState(\n    queryEditor.southPercent || INITIAL_SOUTH_PERCENT,\n  );\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState(\n    getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true),\n  );\n  const [renderHTMLEnabled, setRenderHTMLEnabled] = useState(\n    getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, false),\n  );\n  const [showCreateAsModal, setShowCreateAsModal] = useState(false);\n  const [createAs, setCreateAs] = useState('');\n  const showEmptyState = useMemo(\n    () => !database || isEmpty(database),\n    [database],\n  );\n\n  const sqlEditorRef = useRef<HTMLDivElement>(null);\n  const northPaneRef = useRef<HTMLDivElement>(null);\n\n  const SqlFormExtension = extensionsRegistry.get('sqleditor.extension.form');\n\n  const startQuery = useCallback(\n    (ctasArg = false, ctas_method = CtasEnum.Table) => {\n      if (!database) {\n        return;\n      }\n\n      dispatch(\n        runQueryFromSqlEditor(\n          database,\n          queryEditor,\n          defaultQueryLimit,\n          ctasArg ? ctas : '',\n          ctasArg,\n          ctas_method,\n        ),\n      );\n      dispatch(setActiveSouthPaneTab('Results'));\n    },\n    [ctas, database, defaultQueryLimit, dispatch, queryEditor],\n  );\n\n  const formatCurrentQuery = useCallback(\n    (useShortcut?: boolean) => {\n      logAction(LOG_ACTIONS_SQLLAB_FORMAT_SQL, {\n        shortcut: Boolean(useShortcut),\n      });\n      dispatch(formatQuery(queryEditor));\n    },\n    [dispatch, queryEditor, logAction],\n  );\n\n  const stopQuery = useCallback(() => {\n    if (latestQuery && ['running', 'pending'].indexOf(latestQuery.state) >= 0) {\n      dispatch(postStopQuery(latestQuery));\n    }\n    return false;\n  }, [dispatch, latestQuery]);\n\n  const runQuery = () => {\n    if (database) {\n      startQuery();\n    }\n  };\n\n  useEffect(() => {\n    if (autorun) {\n      setAutorun(false);\n      dispatch(queryEditorSetAutorun(queryEditor, false));\n      startQuery();\n    }\n  }, [autorun, dispatch, queryEditor, startQuery]);\n\n  // One layer of abstraction for easy spying in unit tests\n  const getSqlEditorHeight = () =>\n    sqlEditorRef.current\n      ? sqlEditorRef.current.clientHeight - SQL_EDITOR_PADDING * 2\n      : 0;\n\n  const getHotkeyConfig = useCallback(() => {\n    // Get the user's OS\n    const userOS = detectOS();\n    return [\n      {\n        name: 'runQuery1',\n        key: KeyboardShortcut.CtrlR,\n        descr: KEY_MAP[KeyboardShortcut.CtrlR],\n        func: () => {\n          if (queryEditor.sql.trim() !== '') {\n            logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n            startQuery();\n          }\n        },\n      },\n      {\n        name: 'runQuery2',\n        key: KeyboardShortcut.CtrlEnter,\n        descr: KEY_MAP[KeyboardShortcut.CtrlEnter],\n        func: () => {\n          if (queryEditor.sql.trim() !== '') {\n            logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n            startQuery();\n          }\n        },\n      },\n      {\n        name: 'newTab',\n        ...(userOS === 'Windows'\n          ? {\n              key: KeyboardShortcut.CtrlQ,\n              descr: KEY_MAP[KeyboardShortcut.CtrlQ],\n            }\n          : {\n              key: KeyboardShortcut.CtrlT,\n              descr: KEY_MAP[KeyboardShortcut.CtrlT],\n            }),\n        func: () => {\n          Logger.markTimeOrigin();\n          dispatch(addNewQueryEditor());\n        },\n      },\n      {\n        name: 'stopQuery',\n        ...(userOS === 'MacOS'\n          ? {\n              key: KeyboardShortcut.CtrlX,\n              descr: KEY_MAP[KeyboardShortcut.CtrlX],\n            }\n          : {\n              key: KeyboardShortcut.CtrlE,\n              descr: KEY_MAP[KeyboardShortcut.CtrlE],\n            }),\n        func: () => {\n          logAction(LOG_ACTIONS_SQLLAB_STOP_QUERY, { shortcut: true });\n          stopQuery();\n        },\n      },\n      {\n        name: 'formatQuery',\n        key: KeyboardShortcut.CtrlShiftF,\n        descr: KEY_MAP[KeyboardShortcut.CtrlShiftF],\n        func: () => {\n          formatCurrentQuery(true);\n        },\n      },\n    ];\n  }, [dispatch, queryEditor.sql, startQuery, stopQuery, formatCurrentQuery]);\n\n  const hotkeys = useMemo(() => {\n    // Get all hotkeys including ace editor hotkeys\n    // Get the user's OS\n    const userOS = detectOS();\n    const base = [\n      ...getHotkeyConfig(),\n      {\n        name: 'runQuery3',\n        key: KeyboardShortcut.CtrlShiftEnter,\n        descr: KEY_MAP[KeyboardShortcut.CtrlShiftEnter],\n        func: (editor: AceEditor['editor']) => {\n          if (!editor.getValue().trim()) {\n            return;\n          }\n          const session = editor.getSession();\n          const cursorPosition = editor.getCursorPosition();\n          const totalLine = session.getLength();\n          const currentRow = editor.getFirstVisibleRow();\n          let end = editor.find(';', {\n            backwards: false,\n            skipCurrent: true,\n          })?.end;\n          if (!end || end.row < cursorPosition.row) {\n            end = {\n              row: totalLine + 1,\n              column: 0,\n            };\n          }\n          let start = editor.find(';', {\n            backwards: true,\n            skipCurrent: true,\n          })?.end;\n          let currentLine = start?.row;\n          if (\n            !currentLine ||\n            currentLine > cursorPosition.row ||\n            (currentLine === cursorPosition.row &&\n              (start?.column || 0) > cursorPosition.column)\n          ) {\n            currentLine = 0;\n          }\n          let content =\n            currentLine === start?.row\n              ? session.getLine(currentLine).slice(start.column).trim()\n              : session.getLine(currentLine).trim();\n          while (!content && currentLine < totalLine) {\n            currentLine += 1;\n            content = session.getLine(currentLine).trim();\n          }\n          if (currentLine !== start?.row) {\n            start = { row: currentLine, column: 0 };\n          }\n          editor.selection.setSelectionRange({\n            start: start ?? { row: 0, column: 0 },\n            end,\n          });\n          startQuery();\n          editor.selection.clearSelection();\n          editor.moveCursorToPosition(cursorPosition);\n          editor.scrollToRow(currentRow);\n        },\n      },\n    ];\n    if (userOS === 'MacOS') {\n      base.push({\n        name: 'previousLine',\n        key: KeyboardShortcut.CtrlP,\n        descr: KEY_MAP[KeyboardShortcut.CtrlP],\n        func: editor => {\n          editor.navigateUp();\n        },\n      });\n    }\n\n    return base;\n  }, [getHotkeyConfig, startQuery]);\n\n  const onBeforeUnload = useEffectEvent(event => {\n    if (\n      database?.extra_json?.cancel_query_on_windows_unload &&\n      latestQuery?.state === 'running'\n    ) {\n      event.preventDefault();\n      stopQuery();\n    }\n  });\n\n  const shouldLoadQueryEditor =\n    isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n    !queryEditor.loaded;\n\n  const loadQueryEditor = useEffectEvent(() => {\n    const duration = Logger.getTimestamp();\n    logAction(LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE, {\n      duration,\n      queryEditorId: queryEditor.id,\n      inLocalStorage: Boolean(queryEditor.inLocalStorage),\n      hasLoaded: !shouldLoadQueryEditor,\n    });\n    if (shouldLoadQueryEditor) {\n      dispatch(fetchQueryEditor(queryEditor, displayLimit));\n    }\n  });\n\n  useEffect(() => {\n    // We need to measure the height of the sql editor post render to figure the height of\n    // the south pane so it gets rendered properly\n    setHeight(getSqlEditorHeight());\n    const handleWindowResizeWithThrottle = throttle(\n      () => setHeight(getSqlEditorHeight()),\n      WINDOW_RESIZE_THROTTLE_MS,\n    );\n    if (isActive) {\n      loadQueryEditor();\n      window.addEventListener('resize', handleWindowResizeWithThrottle);\n      window.addEventListener('beforeunload', onBeforeUnload);\n    }\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResizeWithThrottle);\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n    // TODO: Remove useEffectEvent deps once https://github.com/facebook/react/pull/25881 is released\n  }, [onBeforeUnload, loadQueryEditor, isActive]);\n\n  useEffect(() => {\n    // setup hotkeys\n    const hotkeys = getHotkeyConfig();\n    if (isActive) {\n      // MouseTrap always override the same key\n      // Unbind (reset) will be called when App component unmount\n      hotkeys.forEach(keyConfig => {\n        Mousetrap.bind([keyConfig.key], keyConfig.func);\n      });\n    }\n  }, [getHotkeyConfig, latestQuery, isActive]);\n\n  const onResizeStart = () => {\n    // Set the heights on the ace editor and the ace content area after drag starts\n    // to smooth out the visual transition to the new heights when drag ends\n    const editorEl = document.getElementsByClassName(\n      'ace_content',\n    )[0] as HTMLElement;\n    if (editorEl) {\n      editorEl.style.height = '100%';\n    }\n  };\n\n  const onResizeEnd = ([northPercent, southPercent]: number[]) => {\n    setNorthPercent(northPercent);\n    setSouthPercent(southPercent);\n\n    if (northPaneRef.current?.clientHeight) {\n      dispatch(persistEditorHeight(queryEditor, northPercent, southPercent));\n    }\n  };\n\n  const setQueryEditorAndSaveSql = useCallback(\n    sql => {\n      dispatch(queryEditorSetAndSaveSql(queryEditor, sql));\n    },\n    [dispatch, queryEditor],\n  );\n\n  const setQueryEditorAndSaveSqlWithDebounce = useMemo(\n    () => debounce(setQueryEditorAndSaveSql, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS),\n    [setQueryEditorAndSaveSql],\n  );\n\n  const onSqlChanged = useEffectEvent((sql: string) => {\n    dispatch(queryEditorSetSql(queryEditor, sql));\n  });\n\n  // Return the heights for the ace editor and the south pane as an object\n  // given the height of the sql editor, north pane percent and south pane percent.\n  const getAceEditorAndSouthPaneHeights = (\n    height: number,\n    northPercent: number,\n    southPercent: number,\n  ) => ({\n    aceEditorHeight:\n      (height * northPercent) / (theme.gridUnit * 25) -\n      (SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN) -\n      SQL_TOOLBAR_HEIGHT,\n    southPaneHeight:\n      (height * southPercent) / (theme.gridUnit * 25) -\n      (SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN),\n  });\n\n  const getQueryCostEstimate = () => {\n    logAction(LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST, { shortcut: false });\n    if (database) {\n      dispatch(estimateQueryCost(queryEditor));\n    }\n  };\n\n  const handleToggleAutocompleteEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, !autocompleteEnabled);\n    setAutocompleteEnabled(!autocompleteEnabled);\n  };\n\n  const handleToggleRenderHTMLEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, !renderHTMLEnabled);\n    setRenderHTMLEnabled(!renderHTMLEnabled);\n  };\n\n  const createTableAs = () => {\n    startQuery(true, CtasEnum.Table);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n\n  const createViewAs = () => {\n    startQuery(true, CtasEnum.View);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n\n  const ctasChanged = (event: ChangeEvent<HTMLInputElement>) => {\n    setCtas(event.target.value);\n  };\n\n  const renderDropdown = () => {\n    const qe = queryEditor;\n    const successful = latestQuery?.state === 'success';\n    const scheduleToolTip = successful\n      ? t('Schedule the query periodically')\n      : t('You must run the query successfully first');\n    return (\n      <Menu css={{ width: theme.gridUnit * 50 }}>\n        <Menu.Item css={{ display: 'flex', justifyContent: 'space-between' }}>\n          {' '}\n          <span>{t('Render HTML')}</span>{' '}\n          <AntdSwitch\n            checked={renderHTMLEnabled}\n            onChange={handleToggleRenderHTMLEnabled}\n          />{' '}\n        </Menu.Item>\n        <Menu.Item css={{ display: 'flex', justifyContent: 'space-between' }}>\n          {' '}\n          <span>{t('Autocomplete')}</span>{' '}\n          <AntdSwitch\n            checked={autocompleteEnabled}\n            onChange={handleToggleAutocompleteEnabled}\n          />{' '}\n        </Menu.Item>\n        {isFeatureEnabled(FeatureFlag.EnableTemplateProcessing) && (\n          <Menu.Item>\n            <TemplateParamsEditor\n              language=\"json\"\n              onChange={params => {\n                dispatch(queryEditorSetTemplateParams(qe, params));\n              }}\n              queryEditorId={qe.id}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Item onClick={() => formatCurrentQuery()}>\n          {t('Format SQL')}\n        </Menu.Item>\n        {!isEmpty(scheduledQueriesConf) && (\n          <Menu.Item>\n            <ScheduleQueryButton\n              defaultLabel={qe.name}\n              sql={qe.sql}\n              onSchedule={(query: Query) => dispatch(scheduleQuery(query))}\n              schema={qe.schema}\n              dbId={qe.dbId}\n              scheduleQueryWarning={scheduleQueryWarning}\n              tooltip={scheduleToolTip}\n              disabled={!successful}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Item>\n          <KeyboardShortcutButton>\n            {t('Keyboard shortcuts')}\n          </KeyboardShortcutButton>\n        </Menu.Item>\n      </Menu>\n    );\n  };\n\n  const onSaveQuery = async (query: QueryPayload, clientId: string) => {\n    const savedQuery = await dispatch(saveQuery(query, clientId));\n    dispatch(addSavedQueryToTabState(queryEditor, savedQuery));\n  };\n\n  const renderEditorBottomBar = (hideActions: boolean) => {\n    const { allow_ctas: allowCTAS, allow_cvas: allowCVAS } = database || {};\n\n    const showMenu = allowCTAS || allowCVAS;\n    const runMenuBtn = (\n      <Menu>\n        {allowCTAS && (\n          <Menu.Item\n            onClick={() => {\n              logAction(LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS, {\n                shortcut: false,\n              });\n              setShowCreateAsModal(true);\n              setCreateAs(CtasEnum.Table);\n            }}\n            key=\"1\"\n          >\n            {t('CREATE TABLE AS')}\n          </Menu.Item>\n        )}\n        {allowCVAS && (\n          <Menu.Item\n            onClick={() => {\n              logAction(LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS, {\n                shortcut: false,\n              });\n              setShowCreateAsModal(true);\n              setCreateAs(CtasEnum.View);\n            }}\n            key=\"2\"\n          >\n            {t('CREATE VIEW AS')}\n          </Menu.Item>\n        )}\n      </Menu>\n    );\n\n    return (\n      <StyledToolbar className=\"sql-toolbar\" id=\"js-sql-toolbar\">\n        {hideActions ? (\n          <Alert\n            type=\"warning\"\n            message={t(\n              'The database that was used to generate this query could not be found',\n            )}\n            description={t(\n              'Choose one of the available databases on the left panel.',\n            )}\n            closable={false}\n          />\n        ) : (\n          <>\n            <div className=\"leftItems\">\n              <span>\n                <RunQueryActionButton\n                  allowAsync={database?.allow_run_async === true}\n                  queryEditorId={queryEditor.id}\n                  queryState={latestQuery?.state}\n                  runQuery={runQuery}\n                  stopQuery={stopQuery}\n                  overlayCreateAsMenu={showMenu ? runMenuBtn : null}\n                />\n              </span>\n              {isFeatureEnabled(FeatureFlag.EstimateQueryCost) &&\n                database?.allows_cost_estimate && (\n                  <span>\n                    <EstimateQueryCostButton\n                      getEstimate={getQueryCostEstimate}\n                      queryEditorId={queryEditor.id}\n                      tooltip={t('Estimate the cost before running a query')}\n                    />\n                  </span>\n                )}\n              <span>\n                <QueryLimitSelect\n                  queryEditorId={queryEditor.id}\n                  maxRow={maxRow}\n                  defaultQueryLimit={defaultQueryLimit}\n                />\n              </span>\n              {latestQuery && (\n                <Timer\n                  startTime={latestQuery.startDttm}\n                  endTime={latestQuery.endDttm}\n                  status={STATE_TYPE_MAP[latestQuery.state]}\n                  isRunning={latestQuery.state === 'running'}\n                />\n              )}\n            </div>\n            <div className=\"rightItems\">\n              <span>\n                <SaveQuery\n                  queryEditorId={queryEditor.id}\n                  columns={latestQuery?.results?.columns || []}\n                  onSave={onSaveQuery}\n                  onUpdate={(query, remoteId) =>\n                    dispatch(updateSavedQuery(query, remoteId))\n                  }\n                  saveQueryWarning={saveQueryWarning}\n                  database={database}\n                />\n              </span>\n              <span>\n                <ShareSqlLabQuery queryEditorId={queryEditor.id} />\n              </span>\n              <AntdDropdown overlay={renderDropdown()} trigger={['click']}>\n                <Icons.MoreHoriz iconColor={theme.colors.grayscale.base} />\n              </AntdDropdown>\n            </div>\n          </>\n        )}\n      </StyledToolbar>\n    );\n  };\n\n  const handleCursorPositionChange = (newPosition: CursorPosition) => {\n    dispatch(queryEditorSetCursorPosition(queryEditor, newPosition));\n  };\n\n  const queryPane = () => {\n    const { aceEditorHeight, southPaneHeight } =\n      getAceEditorAndSouthPaneHeights(height, northPercent, southPercent);\n    return (\n      <Split\n        expandToMin\n        className=\"queryPane\"\n        sizes={[northPercent, southPercent]}\n        elementStyle={elementStyle}\n        minSize={200}\n        direction=\"vertical\"\n        gutterSize={SQL_EDITOR_GUTTER_HEIGHT}\n        onDragStart={onResizeStart}\n        onDragEnd={onResizeEnd}\n      >\n        <div ref={northPaneRef} className=\"north-pane\">\n          {SqlFormExtension && (\n            <SqlFormExtension\n              queryEditorId={queryEditor.id}\n              setQueryEditorAndSaveSqlWithDebounce={\n                setQueryEditorAndSaveSqlWithDebounce\n              }\n              startQuery={startQuery}\n            />\n          )}\n          <AceEditorWrapper\n            autocomplete={autocompleteEnabled}\n            onBlur={onSqlChanged}\n            onChange={onSqlChanged}\n            queryEditorId={queryEditor.id}\n            onCursorPositionChange={handleCursorPositionChange}\n            height={`${aceEditorHeight}px`}\n            hotkeys={hotkeys}\n          />\n          {renderEditorBottomBar(showEmptyState)}\n        </div>\n        <SouthPane\n          queryEditorId={queryEditor.id}\n          latestQueryId={latestQuery?.id}\n          height={southPaneHeight}\n          displayLimit={displayLimit}\n          defaultQueryLimit={defaultQueryLimit}\n        />\n      </Split>\n    );\n  };\n\n  const createViewModalTitle =\n    createAs === CtasEnum.View ? 'CREATE VIEW AS' : 'CREATE TABLE AS';\n\n  const createModalPlaceHolder =\n    createAs === CtasEnum.View\n      ? t('Specify name to CREATE VIEW AS schema in: public')\n      : t('Specify name to CREATE TABLE AS schema in: public');\n\n  const leftBarStateClass = hideLeftBar\n    ? 'schemaPane-exit-done'\n    : 'schemaPane-enter-done';\n  return (\n    <StyledSqlEditor ref={sqlEditorRef} className=\"SqlEditor\">\n      <CSSTransition classNames=\"schemaPane\" in={!hideLeftBar} timeout={300}>\n        <ResizableSidebar\n          id={`sqllab:${queryEditor.id}`}\n          minWidth={SQL_EDITOR_LEFTBAR_WIDTH}\n          initialWidth={SQL_EDITOR_LEFTBAR_WIDTH}\n          enable={!hideLeftBar}\n        >\n          {adjustedWidth => (\n            <StyledSidebar\n              className={`schemaPane ${leftBarStateClass}`}\n              width={adjustedWidth}\n              hide={hideLeftBar}\n            >\n              <SqlEditorLeftBar\n                database={database}\n                queryEditorId={queryEditor.id}\n              />\n            </StyledSidebar>\n          )}\n        </ResizableSidebar>\n      </CSSTransition>\n      {shouldLoadQueryEditor ? (\n        <div\n          data-test=\"sqlEditor-loading\"\n          css={css`\n            flex: 1;\n            padding: ${theme.gridUnit * 4}px;\n          `}\n        >\n          <Skeleton active />\n        </div>\n      ) : showEmptyState && !hasSqlStatement ? (\n        <EmptyStateBig\n          image=\"vector.svg\"\n          title={t('Select a database to write a query')}\n          description={t(\n            'Choose one of the available databases from the panel on the left.',\n          )}\n        />\n      ) : (\n        queryPane()\n      )}\n      <Modal\n        show={showCreateAsModal}\n        title={t(createViewModalTitle)}\n        onHide={() => setShowCreateAsModal(false)}\n        footer={\n          <>\n            <Button onClick={() => setShowCreateAsModal(false)}>\n              {t('Cancel')}\n            </Button>\n            {createAs === CtasEnum.Table && (\n              <Button\n                buttonStyle=\"primary\"\n                disabled={ctas.length === 0}\n                onClick={createTableAs}\n              >\n                {t('Create')}\n              </Button>\n            )}\n            {createAs === CtasEnum.View && (\n              <Button\n                buttonStyle=\"primary\"\n                disabled={ctas.length === 0}\n                onClick={createViewAs}\n              >\n                {t('Create')}\n              </Button>\n            )}\n          </>\n        }\n      >\n        <span>{t('Name')}</span>\n        <Input placeholder={createModalPlaceHolder} onChange={ctasChanged} />\n      </Modal>\n    </StyledSqlEditor>\n  );\n};\n\nexport default SqlEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}