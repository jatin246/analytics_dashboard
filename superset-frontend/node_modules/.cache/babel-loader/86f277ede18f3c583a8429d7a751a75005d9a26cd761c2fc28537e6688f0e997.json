{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isValidElement } from 'react';\nimport { sharedControls, sharedControlComponents } from '../shared-controls';\nexport function expandControlType(controlType) {\n  if (typeof controlType === 'string' &&\n  controlType in sharedControlComponents) {\n    return sharedControlComponents[controlType];\n  }\n  return controlType;\n}\n/**\n * Expand a shorthand control config item to full config in the format of\n *   {\n *     name: ...,\n *     config: {\n *        type: ...,\n *        ...\n *     }\n *   }\n */\nexport function expandControlConfig(control, controlOverrides = {}) {\n  // one of the named shared controls\n  if (typeof control === 'string' && control in sharedControls) {\n    const name = control;\n    return {\n      name,\n      config: {\n        ...sharedControls[name],\n        ...controlOverrides[name]\n      }\n    };\n  }\n  // JSX/React element or NULL\n  if (!control || typeof control === 'string' || /*#__PURE__*/isValidElement(control)) {\n    return control;\n  }\n  // already fully expanded control config, e.g.\n  // {\n  //   name: 'metric',\n  //   config: {\n  //     type: 'SelectControl' | SelectComponent\n  //   }\n  // }\n  if ('name' in control && 'config' in control) {\n    return {\n      ...control,\n      config: {\n        ...control.config,\n        type: expandControlType(control.config.type)\n      }\n    };\n  }\n  // apply overrides with shared controls\n  if ('override' in control && control.name in sharedControls) {\n    const { name, override } = control;\n    return {\n      name,\n      config: {\n        ...sharedControls[name],\n        ...override\n      }\n    };\n  }\n  return null;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(expandControlType, \"expandControlType\", \"/app/superset-frontend/packages/superset-ui-chart-controls/src/utils/expandControlConfig.tsx\");reactHotLoader.register(expandControlConfig, \"expandControlConfig\", \"/app/superset-frontend/packages/superset-ui-chart-controls/src/utils/expandControlConfig.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isValidElement","sharedControls","sharedControlComponents","expandControlType","controlType","expandControlConfig","control","controlOverrides","name","config","type","override","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/packages/superset-ui-chart-controls/src/utils/expandControlConfig.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isValidElement, ReactElement } from 'react';\nimport { sharedControls, sharedControlComponents } from '../shared-controls';\nimport {\n  ControlType,\n  ControlSetItem,\n  ExpandedControlItem,\n  ControlOverrides,\n} from '../types';\n\nexport function expandControlType(controlType: ControlType) {\n  if (\n    typeof controlType === 'string' &&\n    controlType in sharedControlComponents\n  ) {\n    return sharedControlComponents[\n      controlType as keyof typeof sharedControlComponents\n    ];\n  }\n  return controlType;\n}\n\n/**\n * Expand a shorthand control config item to full config in the format of\n *   {\n *     name: ...,\n *     config: {\n *        type: ...,\n *        ...\n *     }\n *   }\n */\nexport function expandControlConfig(\n  control: ControlSetItem,\n  controlOverrides: ControlOverrides = {},\n): ExpandedControlItem {\n  // one of the named shared controls\n  if (typeof control === 'string' && control in sharedControls) {\n    const name = control;\n    return {\n      name,\n      config: {\n        ...sharedControls[name],\n        ...controlOverrides[name],\n      },\n    };\n  }\n  // JSX/React element or NULL\n  if (!control || typeof control === 'string' || isValidElement(control)) {\n    return control as ReactElement;\n  }\n  // already fully expanded control config, e.g.\n  // {\n  //   name: 'metric',\n  //   config: {\n  //     type: 'SelectControl' | SelectComponent\n  //   }\n  // }\n  if ('name' in control && 'config' in control) {\n    return {\n      ...control,\n      config: {\n        ...control.config,\n        type: expandControlType(control.config.type as ControlType),\n      },\n    };\n  }\n  // apply overrides with shared controls\n  if ('override' in control && control.name in sharedControls) {\n    const { name, override } = control;\n    return {\n      name,\n      config: {\n        ...sharedControls[name],\n        ...override,\n      },\n    };\n  }\n  return null;\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,cAAc,QAAsB,OAAO;AACpD,SAASC,cAAc,EAAEC,uBAAuB,QAAQ,oBAAoB;AAQ5E,OAAM,SAAUC,iBAAiBA,CAACC,WAAwB;EACxD,IACE,OAAOA,WAAW,KAAK,QAAQ;EAC/BA,WAAW,IAAIF,uBAAuB,EACtC;IACA,OAAOA,uBAAuB,CAC5BE,WAAmD,CACpD;;EAEH,OAAOA,WAAW;AACpB;AAEA;;;;;;;;;;AAUA,OAAM,SAAUC,mBAAmBA,CACjCC,OAAuB,EACvBC,gBAAA,GAAqC,EAAE;EAEvC;EACA,IAAI,OAAOD,OAAO,KAAK,QAAQ,IAAIA,OAAO,IAAIL,cAAc,EAAE;IAC5D,MAAMO,IAAI,GAAGF,OAAO;IACpB,OAAO;MACLE,IAAI;MACJC,MAAM,EAAE;QACN,GAAGR,cAAc,CAACO,IAAI,CAAC;QACvB,GAAGD,gBAAgB,CAACC,IAAI;;KAE3B;;EAEH;EACA,IAAI,CAACF,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,iBAAIN,cAAc,CAACM,OAAO,CAAC,EAAE;IACtE,OAAOA,OAAuB;;EAEhC;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAI,MAAM,IAAIA,OAAO,IAAI,QAAQ,IAAIA,OAAO,EAAE;IAC5C,OAAO;MACL,GAAGA,OAAO;MACVG,MAAM,EAAE;QACN,GAAGH,OAAO,CAACG,MAAM;QACjBC,IAAI,EAAEP,iBAAiB,CAACG,OAAO,CAACG,MAAM,CAACC,IAAmB;;KAE7D;;EAEH;EACA,IAAI,UAAU,IAAIJ,OAAO,IAAIA,OAAO,CAACE,IAAI,IAAIP,cAAc,EAAE;IAC3D,MAAM,EAAEO,IAAI,EAAEG,QAAQ,EAAE,GAAGL,OAAO;IAClC,OAAO;MACLE,IAAI;MACJC,MAAM,EAAE;QACN,GAAGR,cAAc,CAACO,IAAI,CAAC;QACvB,GAAGG;;KAEN;;EAEH,OAAO,IAAI;AACb,CAAC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CArEeb,iBAAiB,uHAAAS,cAAA,CAAAI,QAAA,CAsBjBX,mBAAmB,iJAAAY,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}