{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Fragment, useMemo, useCallback, createRef } from 'react';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport ReactDiffViewer from 'react-diff-viewer-continued';\nimport { useInView } from 'react-intersection-observer';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { saveDashboardRequest, setOverrideConfirm } from 'src/dashboard/actions/dashboardState';\nimport { t, styled } from '@superset-ui/core';\nimport { SAVE_TYPE_OVERWRITE_CONFIRMED } from 'src/dashboard/util/constants';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst STICKY_HEADER_TOP = 16;\nconst STICKY_HEADER_HEIGHT = 32;\nconst StyledTitle = styled.h2`\n  ${({ theme }) => `\n     color:  ${theme.colors.grayscale.dark1}\n   `}\n`;\nconst StyledEditor = styled.div`\n  ${({ theme }) => `\n     table {\n       border: 1px ${theme.colors.grayscale.light2} solid;\n     }\n     pre {\n       font-size: 11px;\n       padding: 0px;\n       background-color: transparent;\n       border: 0px;\n       line-height: 110%;\n     }\n   `}\n`;\nconst StackableHeader = styled(Button)`\n  ${({ theme, top }) => `\n     position: sticky;\n     top: ${top}px;\n     background-color: ${theme.colors.grayscale.light5};\n     margin: 0px;\n     padding: 8px 4px;\n     z-index: 1;\n     border: 0px;\n     border-radius: 0px;\n     width: 100%;\n     justify-content: flex-start;\n     border-bottom: 1px ${theme.colors.grayscale.light1} solid;\n     &::before {\n       display: inline-block;\n       position: relative;\n       opacity: 1;\n       content: \"\\\\00BB\";\n     }\n   `}\n`;\nconst StyledBottom = styled.div`\n  ${({ inView }) => `\n     margin: 8px auto;\n     text-align: center;\n     opacity: ${inView ? 0 : 1};\n  `}\n`;\nconst OverrideConfirmModal = ({ overwriteConfirmMetadata }) => {\n  const [bottomRef, hasReviewed] = useInView({ triggerOnce: true });\n  const dispatch = useDispatch();\n  const onHide = useCallback(() => dispatch(setOverrideConfirm(undefined)), [dispatch]);\n  const anchors = useMemo(() => overwriteConfirmMetadata ?\n  overwriteConfirmMetadata.overwriteConfirmItems.map(() => /*#__PURE__*/createRef()) :\n  [], [overwriteConfirmMetadata]);\n  const onAnchorClicked = useCallback((index) => {var _anchors$index, _anchors$index$curren;\n    (_anchors$index = anchors[index]) == null ? void 0 : (_anchors$index$curren = _anchors$index.current) == null ? void 0 : _anchors$index$curren.scrollIntoView({ behavior: 'smooth' });\n  }, [anchors]);\n  const onConfirmOverwrite = useCallback(() => {\n    if (overwriteConfirmMetadata) {\n      dispatch(saveDashboardRequest(overwriteConfirmMetadata.data, overwriteConfirmMetadata.dashboardId, SAVE_TYPE_OVERWRITE_CONFIRMED));\n    }\n  }, [dispatch, overwriteConfirmMetadata]);\n  return _jsx(Modal, { responsive: true, maxWidth: \"1024px\", height: \"50vh\", show: Boolean(overwriteConfirmMetadata), title: t('Confirm overwrite'), footer: _jsxs(_Fragment, { children: [\n      t('Scroll down to the bottom to enable overwriting changes. '),\n      _jsx(Button, { htmlType: \"button\", buttonSize: \"small\", onClick: onHide, \"data-test\": \"override-confirm-modal-cancel-button\", cta: true, children:\n        t('No') }\n      ),\n      _jsx(Button, { \"data-test\": \"overwrite-confirm-save-button\", htmlType: \"button\", buttonSize: \"small\", cta: true, buttonStyle: \"primary\", onClick: onConfirmOverwrite, disabled: !hasReviewed, children:\n        t('Yes, overwrite changes') }\n      )] }\n    ), onHide: onHide, children:\n    overwriteConfirmMetadata && _jsxs(_Fragment, { children: [\n      _jsx(StyledTitle, { children:\n        t('Are you sure you intend to overwrite the following values?') }\n      ),\n      _jsxs(StyledEditor, { children: [\n        overwriteConfirmMetadata.overwriteConfirmItems.map(({ keyPath, oldValue, newValue }, index) => _jsxs(Fragment, { children: [\n          _jsx(\"div\", { ref: anchors[index] }),\n          _jsx(StackableHeader, { top: index * STICKY_HEADER_HEIGHT - STICKY_HEADER_TOP, buttonStyle: \"tertiary\", onClick: () => onAnchorClicked(index), children:\n            keyPath }\n          ),\n          _jsx(ReactDiffViewer, { oldValue: oldValue, newValue: newValue, leftTitle: t('Last Updated %s by %s', moment.utc(overwriteConfirmMetadata.updatedAt).calendar(), overwriteConfirmMetadata.updatedBy), rightTitle: \"new value\" })] }, keyPath\n        )),\n        _jsx(StyledBottom, { ref: bottomRef, inView: hasReviewed, children:\n\n          _jsx(Button, { htmlType: \"button\", buttonSize: \"small\", cta: true, buttonStyle: \"primary\", onClick: onConfirmOverwrite, children:\n            t('Yes, overwrite changes') }\n          ) }\n        )] }\n      )] }\n    ) }\n  );\n};__signature__(OverrideConfirmModal, \"useInView{[bottomRef, hasReviewed]}\\nuseDispatch{dispatch}\\nuseCallback{onHide}\\nuseMemo{anchors}\\nuseCallback{onAnchorClicked}\\nuseCallback{onConfirmOverwrite}\", () => [useInView, useDispatch]);const _default =\nOverrideConfirmModal;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(STICKY_HEADER_TOP, \"STICKY_HEADER_TOP\", \"/app/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx\");reactHotLoader.register(STICKY_HEADER_HEIGHT, \"STICKY_HEADER_HEIGHT\", \"/app/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx\");reactHotLoader.register(StyledTitle, \"StyledTitle\", \"/app/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx\");reactHotLoader.register(StyledEditor, \"StyledEditor\", \"/app/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx\");reactHotLoader.register(StackableHeader, \"StackableHeader\", \"/app/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx\");reactHotLoader.register(StyledBottom, \"StyledBottom\", \"/app/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx\");reactHotLoader.register(OverrideConfirmModal, \"OverrideConfirmModal\", \"/app/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["Fragment","useMemo","useCallback","createRef","moment","useDispatch","ReactDiffViewer","useInView","Modal","Button","saveDashboardRequest","setOverrideConfirm","t","styled","SAVE_TYPE_OVERWRITE_CONFIRMED","jsx","_jsx","_Fragment","jsxs","_jsxs","STICKY_HEADER_TOP","STICKY_HEADER_HEIGHT","StyledTitle","h2","theme","colors","grayscale","dark1","StyledEditor","div","light2","StackableHeader","top","light5","light1","StyledBottom","inView","OverrideConfirmModal","overwriteConfirmMetadata","bottomRef","hasReviewed","triggerOnce","dispatch","onHide","undefined","anchors","overwriteConfirmItems","map","onAnchorClicked","index","_anchors$index","_anchors$index$curren","current","scrollIntoView","behavior","onConfirmOverwrite","data","dashboardId","responsive","maxWidth","height","show","Boolean","title","footer","children","htmlType","buttonSize","onClick","cta","buttonStyle","disabled","keyPath","oldValue","newValue","ref","leftTitle","utc","updatedAt","calendar","updatedBy","rightTitle","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Fragment, useMemo, useCallback, RefObject, createRef } from 'react';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport ReactDiffViewer from 'react-diff-viewer-continued';\nimport { useInView } from 'react-intersection-observer';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { DashboardState } from 'src/dashboard/types';\nimport {\n  saveDashboardRequest,\n  setOverrideConfirm,\n} from 'src/dashboard/actions/dashboardState';\nimport { t, styled } from '@superset-ui/core';\nimport { SAVE_TYPE_OVERWRITE_CONFIRMED } from 'src/dashboard/util/constants';\n\nconst STICKY_HEADER_TOP = 16;\nconst STICKY_HEADER_HEIGHT = 32;\n\nconst StyledTitle = styled.h2`\n  ${({ theme }) => `\n     color:  ${theme.colors.grayscale.dark1}\n   `}\n`;\n\nconst StyledEditor = styled.div`\n  ${({ theme }) => `\n     table {\n       border: 1px ${theme.colors.grayscale.light2} solid;\n     }\n     pre {\n       font-size: 11px;\n       padding: 0px;\n       background-color: transparent;\n       border: 0px;\n       line-height: 110%;\n     }\n   `}\n`;\n\nconst StackableHeader = styled(Button)<{ top: number }>`\n  ${({ theme, top }) => `\n     position: sticky;\n     top: ${top}px;\n     background-color: ${theme.colors.grayscale.light5};\n     margin: 0px;\n     padding: 8px 4px;\n     z-index: 1;\n     border: 0px;\n     border-radius: 0px;\n     width: 100%;\n     justify-content: flex-start;\n     border-bottom: 1px ${theme.colors.grayscale.light1} solid;\n     &::before {\n       display: inline-block;\n       position: relative;\n       opacity: 1;\n       content: \"\\\\00BB\";\n     }\n   `}\n`;\n\nconst StyledBottom = styled.div<{ inView: boolean }>`\n  ${({ inView }) => `\n     margin: 8px auto;\n     text-align: center;\n     opacity: ${inView ? 0 : 1};\n  `}\n`;\n\ntype Props = {\n  overwriteConfirmMetadata: DashboardState['overwriteConfirmMetadata'];\n};\n\nconst OverrideConfirmModal = ({ overwriteConfirmMetadata }: Props) => {\n  const [bottomRef, hasReviewed] = useInView({ triggerOnce: true });\n  const dispatch = useDispatch();\n  const onHide = useCallback(\n    () => dispatch(setOverrideConfirm(undefined)),\n    [dispatch],\n  );\n  const anchors = useMemo<RefObject<HTMLDivElement>[]>(\n    () =>\n      overwriteConfirmMetadata\n        ? overwriteConfirmMetadata.overwriteConfirmItems.map(() =>\n            createRef<HTMLDivElement>(),\n          )\n        : [],\n    [overwriteConfirmMetadata],\n  );\n  const onAnchorClicked = useCallback(\n    (index: number) => {\n      anchors[index]?.current?.scrollIntoView({ behavior: 'smooth' });\n    },\n    [anchors],\n  );\n  const onConfirmOverwrite = useCallback(() => {\n    if (overwriteConfirmMetadata) {\n      dispatch(\n        saveDashboardRequest(\n          overwriteConfirmMetadata.data,\n          overwriteConfirmMetadata.dashboardId,\n          SAVE_TYPE_OVERWRITE_CONFIRMED,\n        ),\n      );\n    }\n  }, [dispatch, overwriteConfirmMetadata]);\n\n  return (\n    <Modal\n      responsive\n      maxWidth=\"1024px\"\n      height=\"50vh\"\n      show={Boolean(overwriteConfirmMetadata)}\n      title={t('Confirm overwrite')}\n      footer={\n        <>\n          {t('Scroll down to the bottom to enable overwriting changes. ')}\n          <Button\n            htmlType=\"button\"\n            buttonSize=\"small\"\n            onClick={onHide}\n            data-test=\"override-confirm-modal-cancel-button\"\n            cta\n          >\n            {t('No')}\n          </Button>\n          <Button\n            data-test=\"overwrite-confirm-save-button\"\n            htmlType=\"button\"\n            buttonSize=\"small\"\n            cta\n            buttonStyle=\"primary\"\n            onClick={onConfirmOverwrite}\n            disabled={!hasReviewed}\n          >\n            {t('Yes, overwrite changes')}\n          </Button>\n        </>\n      }\n      onHide={onHide}\n    >\n      {overwriteConfirmMetadata && (\n        <>\n          <StyledTitle>\n            {t('Are you sure you intend to overwrite the following values?')}\n          </StyledTitle>\n          <StyledEditor>\n            {overwriteConfirmMetadata.overwriteConfirmItems.map(\n              ({ keyPath, oldValue, newValue }, index) => (\n                <Fragment key={keyPath}>\n                  <div ref={anchors[index]} />\n                  <StackableHeader\n                    top={index * STICKY_HEADER_HEIGHT - STICKY_HEADER_TOP}\n                    buttonStyle=\"tertiary\"\n                    onClick={() => onAnchorClicked(index)}\n                  >\n                    {keyPath}\n                  </StackableHeader>\n                  <ReactDiffViewer\n                    oldValue={oldValue}\n                    newValue={newValue}\n                    leftTitle={t(\n                      'Last Updated %s by %s',\n                      moment.utc(overwriteConfirmMetadata.updatedAt).calendar(),\n                      overwriteConfirmMetadata.updatedBy,\n                    )}\n                    rightTitle=\"new value\"\n                  />\n                </Fragment>\n              ),\n            )}\n            <StyledBottom ref={bottomRef} inView={hasReviewed}>\n              {/* Add submit button at the bottom in case of intersection-observer fallback */}\n              <Button\n                htmlType=\"button\"\n                buttonSize=\"small\"\n                cta\n                buttonStyle=\"primary\"\n                onClick={onConfirmOverwrite}\n              >\n                {t('Yes, overwrite changes')}\n              </Button>\n            </StyledBottom>\n          </StyledEditor>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default OverrideConfirmModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}