{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useCallback, useMemo, useState } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport querystring from 'query-string';\nimport { queryEditorSetDb, addTable, removeTables, collapseTable, expandTable, queryEditorSetCatalog, queryEditorSetSchema, setDatabases, addDangerToast, resetState } from 'src/SqlLab/actions/sqlLab';\nimport Button from 'src/components/Button';\nimport { t, styled, css } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport Icons from 'src/components/Icons';\nimport { TableSelectorMultiple } from 'src/components/TableSelector';\nimport { IconTooltip } from 'src/components/IconTooltip';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { emptyStateComponent } from 'src/components/EmptyState';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport TableElement from '../TableElement';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledScrollbarContainer = styled.div`\n  flex: 1 1 auto;\n  overflow: auto;\n`;\nconst collapseStyles = (theme) => css`\n  .ant-collapse-item {\n    margin-bottom: ${theme.gridUnit * 3}px;\n  }\n  .ant-collapse-header {\n    padding: 0px !important;\n    display: flex;\n    align-items: center;\n  }\n  .ant-collapse-content-box {\n    padding: 0px ${theme.gridUnit * 4}px 0px 0px !important;\n  }\n  .ant-collapse-arrow {\n    padding: 0 !important;\n    bottom: ${theme.gridUnit}px !important;\n    right: ${theme.gridUnit * 4}px !important;\n    color: ${theme.colors.primary.dark1} !important;\n    &:hover {\n      color: ${theme.colors.primary.dark2} !important;\n    }\n  }\n`;\nconst LeftBarStyles = styled.div`\n  ${({ theme }) => css`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.grayscale.light4};\n      margin: ${theme.gridUnit * 4}px 0;\n    }\n  `}\n`;\nconst SqlEditorLeftBar = ({ database, queryEditorId, height = 500 }) => {\n  const tables = useSelector(({ sqlLab }) => sqlLab.tables.filter((table) => table.queryEditorId === queryEditorId), shallowEqual);\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, [\n  'dbId',\n  'catalog',\n  'schema']\n  );\n  const [emptyResultsWithSearch, setEmptyResultsWithSearch] = useState(false);\n  const [userSelectedDb, setUserSelected] = useState(null);\n  const { catalog, schema } = queryEditor;\n  useEffect(() => {\n    const bool = querystring.parse(window.location.search).db;\n    const userSelected = getItem(LocalStorageKeys.Database, null);\n    if (bool && userSelected) {\n      setUserSelected(userSelected);\n      setItem(LocalStorageKeys.Database, null);\n    } else\n    if (database) {\n      setUserSelected(database);\n    }\n  }, [database]);\n  const onEmptyResults = useCallback((searchText) => {\n    setEmptyResultsWithSearch(!!searchText);\n  }, []);\n  const onDbChange = ({ id: dbId }) => {\n    dispatch(queryEditorSetDb(queryEditor, dbId));\n  };\n  const selectedTableNames = useMemo(() => (tables == null ? void 0 : tables.map((table) => table.name)) || [], [tables]);\n  const onTablesChange = (tableNames, catalogName, schemaName) => {\n    if (!schemaName) {\n      return;\n    }\n    const currentTables = [...tables];\n    const tablesToAdd = tableNames.filter((name) => {\n      const index = currentTables.findIndex((table) => table.name === name);\n      if (index >= 0) {\n        currentTables.splice(index, 1);\n        return false;\n      }\n      return true;\n    });\n    tablesToAdd.forEach((tableName) => {\n      dispatch(addTable(queryEditor, tableName, catalogName, schemaName));\n    });\n    dispatch(removeTables(currentTables));\n  };\n  const onToggleTable = (updatedTables) => {\n    tables.forEach((table) => {\n      if (!updatedTables.includes(table.id.toString()) && table.expanded) {\n        dispatch(collapseTable(table));\n      } else\n      if (updatedTables.includes(table.id.toString()) &&\n      !table.expanded) {\n        dispatch(expandTable(table));\n      }\n    });\n  };\n  const renderExpandIconWithTooltip = ({ isActive }) => _jsx(IconTooltip, { css: css`\n        transform: rotate(90deg);\n      `, \"aria-label\": \"Collapse\", tooltip: isActive ? t('Collapse table preview') : t('Expand table preview'), children:\n    _jsx(Icons.RightOutlined, { iconSize: \"s\", css: css`\n          transform: ${isActive ? 'rotateY(180deg)' : ''};\n        ` }) }\n  );\n  const shouldShowReset = window.location.search === '?reset=1';\n  const tableMetaDataHeight = height - 130; // 130 is the height of the selects above\n  const handleCatalogChange = useCallback((catalog) => {\n    if (queryEditor) {\n      dispatch(queryEditorSetCatalog(queryEditor, catalog));\n    }\n  }, [dispatch, queryEditor]);\n  const handleSchemaChange = useCallback((schema) => {\n    if (queryEditor) {\n      dispatch(queryEditorSetSchema(queryEditor, schema));\n    }\n  }, [dispatch, queryEditor]);\n  const handleDbList = useCallback((result) => {\n    dispatch(setDatabases(result));\n  }, [dispatch]);\n  const handleError = useCallback((message) => {\n    dispatch(addDangerToast(message));\n  }, [dispatch]);\n  const handleResetState = useCallback(() => {\n    dispatch(resetState());\n  }, [dispatch]);\n  return _jsxs(LeftBarStyles, { \"data-test\": \"sql-editor-left-bar\", children: [\n    _jsx(TableSelectorMultiple, { onEmptyResults: onEmptyResults, emptyState: emptyStateComponent(emptyResultsWithSearch), database: userSelectedDb, getDbList: handleDbList, handleError: handleError, onDbChange: onDbChange, onCatalogChange: handleCatalogChange, catalog: catalog, onSchemaChange: handleSchemaChange, schema: schema, onTableSelectChange: onTablesChange, tableValue: selectedTableNames, sqlLabMode: true }),\n    _jsx(\"div\", { className: \"divider\" }),\n    _jsx(StyledScrollbarContainer, { children:\n      _jsx(\"div\", { css: css`\n            height: ${tableMetaDataHeight}px;\n          `, children:\n        _jsx(Collapse, { activeKey: tables.\n          filter(({ expanded }) => expanded).\n          map(({ id }) => id), css: collapseStyles, expandIconPosition: \"right\", ghost: true, onChange: onToggleTable, expandIcon: renderExpandIconWithTooltip, children:\n          tables.map((table) => _jsx(TableElement, { table: table }, table.id)) }\n        ) }\n      ) }\n    ),\n    shouldShowReset && _jsxs(Button, { buttonSize: \"small\", buttonStyle: \"danger\", onClick: handleResetState, children: [\n      _jsx(\"i\", { className: \"fa fa-bomb\" }), \" \", t('Reset state')] }\n    )] }\n  );\n};__signature__(SqlEditorLeftBar, \"useSelector{tables}\\nuseDispatch{dispatch}\\nuseQueryEditor{queryEditor}\\nuseState{[emptyResultsWithSearch, setEmptyResultsWithSearch](false)}\\nuseState{[userSelectedDb, setUserSelected](null)}\\nuseEffect{}\\nuseCallback{onEmptyResults}\\nuseMemo{selectedTableNames}\\nuseCallback{handleCatalogChange}\\nuseCallback{handleSchemaChange}\\nuseCallback{handleDbList}\\nuseCallback{handleError}\\nuseCallback{handleResetState}\", () => [useSelector, useDispatch, useQueryEditor]);const _default =\nSqlEditorLeftBar;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledScrollbarContainer, \"StyledScrollbarContainer\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");reactHotLoader.register(collapseStyles, \"collapseStyles\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");reactHotLoader.register(LeftBarStyles, \"LeftBarStyles\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");reactHotLoader.register(SqlEditorLeftBar, \"SqlEditorLeftBar\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","useCallback","useMemo","useState","shallowEqual","useDispatch","useSelector","querystring","queryEditorSetDb","addTable","removeTables","collapseTable","expandTable","queryEditorSetCatalog","queryEditorSetSchema","setDatabases","addDangerToast","resetState","Button","t","styled","css","Collapse","Icons","TableSelectorMultiple","IconTooltip","useQueryEditor","emptyStateComponent","getItem","LocalStorageKeys","setItem","TableElement","jsx","_jsx","jsxs","_jsxs","StyledScrollbarContainer","div","collapseStyles","theme","gridUnit","colors","primary","dark1","dark2","LeftBarStyles","grayscale","light4","SqlEditorLeftBar","database","queryEditorId","height","tables","sqlLab","filter","table","dispatch","queryEditor","emptyResultsWithSearch","setEmptyResultsWithSearch","userSelectedDb","setUserSelected","catalog","schema","bool","parse","window","location","search","db","userSelected","Database","onEmptyResults","searchText","onDbChange","id","dbId","selectedTableNames","map","name","onTablesChange","tableNames","catalogName","schemaName","currentTables","tablesToAdd","index","findIndex","splice","forEach","tableName","onToggleTable","updatedTables","includes","toString","expanded","renderExpandIconWithTooltip","isActive","tooltip","children","RightOutlined","iconSize","shouldShowReset","tableMetaDataHeight","handleCatalogChange","handleSchemaChange","handleDbList","result","handleError","message","handleResetState","emptyState","getDbList","onCatalogChange","onSchemaChange","onTableSelectChange","tableValue","sqlLabMode","className","activeKey","expandIconPosition","ghost","onChange","expandIcon","buttonSize","buttonStyle","onClick","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useCallback, useMemo, useState } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport querystring from 'query-string';\n\nimport { SqlLabRootState, Table } from 'src/SqlLab/types';\nimport {\n  queryEditorSetDb,\n  addTable,\n  removeTables,\n  collapseTable,\n  expandTable,\n  queryEditorSetCatalog,\n  queryEditorSetSchema,\n  setDatabases,\n  addDangerToast,\n  resetState,\n} from 'src/SqlLab/actions/sqlLab';\nimport Button from 'src/components/Button';\nimport { t, styled, css, SupersetTheme } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport Icons from 'src/components/Icons';\nimport { TableSelectorMultiple } from 'src/components/TableSelector';\nimport { IconTooltip } from 'src/components/IconTooltip';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport type { DatabaseObject } from 'src/components/DatabaseSelector';\nimport { emptyStateComponent } from 'src/components/EmptyState';\nimport {\n  getItem,\n  LocalStorageKeys,\n  setItem,\n} from 'src/utils/localStorageHelpers';\nimport TableElement from '../TableElement';\n\nexport interface SqlEditorLeftBarProps {\n  queryEditorId: string;\n  height?: number;\n  database?: DatabaseObject;\n}\n\nconst StyledScrollbarContainer = styled.div`\n  flex: 1 1 auto;\n  overflow: auto;\n`;\n\nconst collapseStyles = (theme: SupersetTheme) => css`\n  .ant-collapse-item {\n    margin-bottom: ${theme.gridUnit * 3}px;\n  }\n  .ant-collapse-header {\n    padding: 0px !important;\n    display: flex;\n    align-items: center;\n  }\n  .ant-collapse-content-box {\n    padding: 0px ${theme.gridUnit * 4}px 0px 0px !important;\n  }\n  .ant-collapse-arrow {\n    padding: 0 !important;\n    bottom: ${theme.gridUnit}px !important;\n    right: ${theme.gridUnit * 4}px !important;\n    color: ${theme.colors.primary.dark1} !important;\n    &:hover {\n      color: ${theme.colors.primary.dark2} !important;\n    }\n  }\n`;\n\nconst LeftBarStyles = styled.div`\n  ${({ theme }) => css`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.grayscale.light4};\n      margin: ${theme.gridUnit * 4}px 0;\n    }\n  `}\n`;\n\nconst SqlEditorLeftBar = ({\n  database,\n  queryEditorId,\n  height = 500,\n}: SqlEditorLeftBarProps) => {\n  const tables = useSelector<SqlLabRootState, Table[]>(\n    ({ sqlLab }) =>\n      sqlLab.tables.filter(table => table.queryEditorId === queryEditorId),\n    shallowEqual,\n  );\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, [\n    'dbId',\n    'catalog',\n    'schema',\n  ]);\n\n  const [emptyResultsWithSearch, setEmptyResultsWithSearch] = useState(false);\n  const [userSelectedDb, setUserSelected] = useState<DatabaseObject | null>(\n    null,\n  );\n  const { catalog, schema } = queryEditor;\n\n  useEffect(() => {\n    const bool = querystring.parse(window.location.search).db;\n    const userSelected = getItem(\n      LocalStorageKeys.Database,\n      null,\n    ) as DatabaseObject | null;\n\n    if (bool && userSelected) {\n      setUserSelected(userSelected);\n      setItem(LocalStorageKeys.Database, null);\n    } else if (database) {\n      setUserSelected(database);\n    }\n  }, [database]);\n\n  const onEmptyResults = useCallback((searchText?: string) => {\n    setEmptyResultsWithSearch(!!searchText);\n  }, []);\n\n  const onDbChange = ({ id: dbId }: { id: number }) => {\n    dispatch(queryEditorSetDb(queryEditor, dbId));\n  };\n\n  const selectedTableNames = useMemo(\n    () => tables?.map(table => table.name) || [],\n    [tables],\n  );\n\n  const onTablesChange = (\n    tableNames: string[],\n    catalogName: string | null,\n    schemaName: string,\n  ) => {\n    if (!schemaName) {\n      return;\n    }\n\n    const currentTables = [...tables];\n    const tablesToAdd = tableNames.filter(name => {\n      const index = currentTables.findIndex(table => table.name === name);\n      if (index >= 0) {\n        currentTables.splice(index, 1);\n        return false;\n      }\n\n      return true;\n    });\n\n    tablesToAdd.forEach(tableName => {\n      dispatch(addTable(queryEditor, tableName, catalogName, schemaName));\n    });\n\n    dispatch(removeTables(currentTables));\n  };\n\n  const onToggleTable = (updatedTables: string[]) => {\n    tables.forEach(table => {\n      if (!updatedTables.includes(table.id.toString()) && table.expanded) {\n        dispatch(collapseTable(table));\n      } else if (\n        updatedTables.includes(table.id.toString()) &&\n        !table.expanded\n      ) {\n        dispatch(expandTable(table));\n      }\n    });\n  };\n\n  const renderExpandIconWithTooltip = ({ isActive }: { isActive: boolean }) => (\n    <IconTooltip\n      css={css`\n        transform: rotate(90deg);\n      `}\n      aria-label=\"Collapse\"\n      tooltip={\n        isActive ? t('Collapse table preview') : t('Expand table preview')\n      }\n    >\n      <Icons.RightOutlined\n        iconSize=\"s\"\n        css={css`\n          transform: ${isActive ? 'rotateY(180deg)' : ''};\n        `}\n      />\n    </IconTooltip>\n  );\n\n  const shouldShowReset = window.location.search === '?reset=1';\n  const tableMetaDataHeight = height - 130; // 130 is the height of the selects above\n\n  const handleCatalogChange = useCallback(\n    (catalog: string | null) => {\n      if (queryEditor) {\n        dispatch(queryEditorSetCatalog(queryEditor, catalog));\n      }\n    },\n    [dispatch, queryEditor],\n  );\n\n  const handleSchemaChange = useCallback(\n    (schema: string) => {\n      if (queryEditor) {\n        dispatch(queryEditorSetSchema(queryEditor, schema));\n      }\n    },\n    [dispatch, queryEditor],\n  );\n\n  const handleDbList = useCallback(\n    (result: DatabaseObject) => {\n      dispatch(setDatabases(result));\n    },\n    [dispatch],\n  );\n\n  const handleError = useCallback(\n    (message: string) => {\n      dispatch(addDangerToast(message));\n    },\n    [dispatch],\n  );\n\n  const handleResetState = useCallback(() => {\n    dispatch(resetState());\n  }, [dispatch]);\n\n  return (\n    <LeftBarStyles data-test=\"sql-editor-left-bar\">\n      <TableSelectorMultiple\n        onEmptyResults={onEmptyResults}\n        emptyState={emptyStateComponent(emptyResultsWithSearch)}\n        database={userSelectedDb}\n        getDbList={handleDbList}\n        handleError={handleError}\n        onDbChange={onDbChange}\n        onCatalogChange={handleCatalogChange}\n        catalog={catalog}\n        onSchemaChange={handleSchemaChange}\n        schema={schema}\n        onTableSelectChange={onTablesChange}\n        tableValue={selectedTableNames}\n        sqlLabMode\n      />\n      <div className=\"divider\" />\n      <StyledScrollbarContainer>\n        <div\n          css={css`\n            height: ${tableMetaDataHeight}px;\n          `}\n        >\n          <Collapse\n            activeKey={tables\n              .filter(({ expanded }) => expanded)\n              .map(({ id }) => id)}\n            css={collapseStyles}\n            expandIconPosition=\"right\"\n            ghost\n            onChange={onToggleTable}\n            expandIcon={renderExpandIconWithTooltip}\n          >\n            {tables.map(table => (\n              <TableElement table={table} key={table.id} />\n            ))}\n          </Collapse>\n        </div>\n      </StyledScrollbarContainer>\n      {shouldShowReset && (\n        <Button\n          buttonSize=\"small\"\n          buttonStyle=\"danger\"\n          onClick={handleResetState}\n        >\n          <i className=\"fa fa-bomb\" /> {t('Reset state')}\n        </Button>\n      )}\n    </LeftBarStyles>\n  );\n};\n\nexport default SqlEditorLeftBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}