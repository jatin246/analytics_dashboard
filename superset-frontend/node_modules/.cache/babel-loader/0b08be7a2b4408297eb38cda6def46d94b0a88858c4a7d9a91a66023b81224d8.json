{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ensureIsArray, t, useTheme, usePrevious } from '@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport Icons from 'src/components/Icons';\nimport {\n  AddIconButton,\n  AddControlLabel,\n  HeaderContainer,\n  LabelsContainer } from\n'src/explore/components/controls/OptionControls';\nimport columnType from './columnType';\nimport MetricDefinitionValue from './MetricDefinitionValue';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';\nimport adhocMetricType from './adhocMetricType';\nimport AdhocMetricPopoverTrigger from './AdhocMetricPopoverTrigger';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([\n  PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, adhocMetricType])),\n  PropTypes.oneOfType([PropTypes.string, adhocMetricType])]\n  ),\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  isLoading: PropTypes.bool,\n  multi: PropTypes.bool,\n  clearable: PropTypes.bool,\n  datasource: PropTypes.object\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  clearable: true,\n  savedMetrics: [],\n  columns: []\n};\n\nfunction getOptionsForSavedMetrics(\nsavedMetrics,\ncurrentMetricValues,\ncurrentMetric)\n{var _savedMetrics$filter;\n  return (_savedMetrics$filter =\n  savedMetrics == null ? void 0 : savedMetrics.filter((savedMetric) =>\n  Array.isArray(currentMetricValues) ?\n  !currentMetricValues.includes(savedMetric.metric_name) ||\n  savedMetric.metric_name === currentMetric :\n  savedMetric\n  )) != null ? _savedMetrics$filter : [];\n\n}\n\nfunction isDictionaryForAdhocMetric(value) {\n  return value && !(value instanceof AdhocMetric) && value.expressionType;\n}\n\n// adhoc metrics are stored as dictionaries in URL params. We convert them back into the\n// AdhocMetric class for typechecking, consistency and instance method access.\nfunction coerceAdhocMetrics(value) {\n  if (!value) {\n    return [];\n  }\n  if (!Array.isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return value.map((val) => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n}\n\nconst emptySavedMetric = { metric_name: '', expression: '' };\n\n// TODO: use typeguards to distinguish saved metrics from adhoc metrics\nconst getMetricsMatchingCurrentDataset = (value, columns, savedMetrics) =>\nensureIsArray(value).filter((metric) => {\n  if (typeof metric === 'string' || metric.metric_name) {\n    return savedMetrics == null ? void 0 : savedMetrics.some(\n      (savedMetric) =>\n      savedMetric.metric_name === metric ||\n      savedMetric.metric_name === metric.metric_name\n    );\n  }\n  return columns == null ? void 0 : columns.some(\n    (column) =>\n    !metric.column || metric.column.column_name === column.column_name\n  );\n});\n\nconst MetricsControl = ({\n  onChange,\n  multi,\n  value: propsValue,\n  columns,\n  savedMetrics,\n  datasource,\n  ...props\n}) => {\n  const [value, setValue] = useState(coerceAdhocMetrics(propsValue));\n  const theme = useTheme();\n  const prevColumns = usePrevious(columns);\n  const prevSavedMetrics = usePrevious(savedMetrics);\n\n  const handleChange = useCallback(\n    (opts) => {\n      // if clear out options\n      if (opts === null) {\n        onChange(null);\n        return;\n      }\n\n      const transformedOpts = ensureIsArray(opts);\n      const optionValues = transformedOpts.\n      map((option) => {\n        // pre-defined metric\n        if (option.metric_name) {\n          return option.metric_name;\n        }\n        return option;\n      }).\n      filter((option) => option);\n      onChange(multi ? optionValues : optionValues[0]);\n    },\n    [multi, onChange]\n  );\n\n  const onNewMetric = useCallback(\n    (newMetric) => {\n      const newValue = [...value, newMetric];\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, value]\n  );\n\n  const onMetricEdit = useCallback(\n    (changedMetric, oldMetric) => {\n      const newValue = value.map((val) => {\n        if (\n        // compare saved metrics\n        val === oldMetric.metric_name ||\n        // compare adhoc metrics\n        typeof val.optionName !== 'undefined' ?\n        val.optionName === oldMetric.optionName :\n        false)\n        {\n          return changedMetric;\n        }\n        return val;\n      });\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, value]\n  );\n\n  const onRemoveMetric = useCallback(\n    (index) => {\n      if (!Array.isArray(value)) {\n        return;\n      }\n      const valuesCopy = [...value];\n      valuesCopy.splice(index, 1);\n      setValue(valuesCopy);\n      handleChange(valuesCopy);\n    },\n    [handleChange, value]\n  );\n\n  const moveLabel = useCallback(\n    (dragIndex, hoverIndex) => {\n      const newValues = [...value];\n      [newValues[hoverIndex], newValues[dragIndex]] = [\n      newValues[dragIndex],\n      newValues[hoverIndex]];\n\n      setValue(newValues);\n    },\n    [value]\n  );\n\n  const isAddNewMetricDisabled = useCallback(\n    () => !multi && value.length > 0,\n    [multi, value.length]\n  );\n\n  const savedMetricOptions = useMemo(\n    () => getOptionsForSavedMetrics(savedMetrics, propsValue, null),\n    [propsValue, savedMetrics]\n  );\n\n  const newAdhocMetric = useMemo(() => new AdhocMetric({}), [value]);\n  const addNewMetricPopoverTrigger = useCallback(\n    (trigger) => {\n      if (isAddNewMetricDisabled()) {\n        return trigger;\n      }\n      return (\n        _jsx(AdhocMetricPopoverTrigger, {\n          adhocMetric: newAdhocMetric,\n          onMetricEdit: onNewMetric,\n          columns: columns,\n          savedMetricsOptions: savedMetricOptions,\n          savedMetric: emptySavedMetric,\n          datasource: datasource,\n          isNew: true, children:\n\n          trigger }\n        ));\n\n    },\n    [\n    columns,\n    datasource,\n    isAddNewMetricDisabled,\n    newAdhocMetric,\n    onNewMetric,\n    savedMetricOptions]\n\n  );\n\n  useEffect(() => {\n    // Remove selected custom metrics that do not exist in the dataset anymore\n    // Remove selected adhoc metrics that use columns which do not exist in the dataset anymore\n    if (\n    propsValue && (\n    !_isEqual(prevColumns, columns) ||\n    !_isEqual(prevSavedMetrics, savedMetrics)))\n    {\n      const matchingMetrics = getMetricsMatchingCurrentDataset(\n        propsValue,\n        columns,\n        savedMetrics\n      );\n      if (!_isEqual(matchingMetrics, propsValue)) {\n        handleChange(matchingMetrics);\n      }\n    }\n  }, [columns, handleChange, savedMetrics]);\n\n  useEffect(() => {\n    setValue(coerceAdhocMetrics(propsValue));\n  }, [propsValue]);\n\n  const onDropLabel = useCallback(\n    () => handleChange(value),\n    [handleChange, value]\n  );\n\n  const valueRenderer = useCallback(\n    (option, index) =>\n    _jsx(MetricDefinitionValue, {\n\n      index: index,\n      option: option,\n      onMetricEdit: onMetricEdit,\n      onRemoveMetric: onRemoveMetric,\n      columns: columns,\n      datasource: datasource,\n      savedMetrics: savedMetrics,\n      savedMetricsOptions: getOptionsForSavedMetrics(\n        savedMetrics,\n        value,\n        value == null ? void 0 : value[index]\n      ),\n      onMoveLabel: moveLabel,\n      onDropLabel: onDropLabel,\n      multi: multi }, index\n    ),\n\n    [\n    columns,\n    datasource,\n    moveLabel,\n    multi,\n    onDropLabel,\n    onMetricEdit,\n    onRemoveMetric,\n    savedMetrics,\n    value]\n\n  );\n\n  return (\n    _jsxs(\"div\", { className: \"metrics-select\", children: [\n      _jsxs(HeaderContainer, { children: [\n        _jsx(ControlHeader, { ...props }),\n        addNewMetricPopoverTrigger(\n          _jsx(AddIconButton, {\n            disabled: isAddNewMetricDisabled(),\n            \"data-test\": \"add-metric-button\", children:\n\n            _jsx(Icons.PlusLarge, {\n              iconSize: \"s\",\n              iconColor: theme.colors.grayscale.light5 }\n            ) }\n          )\n        )] }\n      ),\n      _jsx(LabelsContainer, { children:\n        value.length > 0 ?\n        value.map((value, index) => valueRenderer(value, index)) :\n        addNewMetricPopoverTrigger(\n          _jsxs(AddControlLabel, { children: [\n            _jsx(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1 }),\n            t('Add metric')] }\n          )\n        ) }\n      )] }\n    ));\n\n};__signature__(MetricsControl, \"useState{[value, setValue](coerceAdhocMetrics(propsValue))}\\nuseTheme{theme}\\nusePrevious{prevColumns}\\nusePrevious{prevSavedMetrics}\\nuseCallback{handleChange}\\nuseCallback{onNewMetric}\\nuseCallback{onMetricEdit}\\nuseCallback{onRemoveMetric}\\nuseCallback{moveLabel}\\nuseCallback{isAddNewMetricDisabled}\\nuseMemo{savedMetricOptions}\\nuseMemo{newAdhocMetric}\\nuseCallback{addNewMetricPopoverTrigger}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{onDropLabel}\\nuseCallback{valueRenderer}\", () => [useTheme, usePrevious, usePrevious]);\n\nMetricsControl.propTypes = propTypes;\nMetricsControl.defaultProps = defaultProps;const _default =\n\nMetricsControl;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(getOptionsForSavedMetrics, \"getOptionsForSavedMetrics\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(isDictionaryForAdhocMetric, \"isDictionaryForAdhocMetric\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(coerceAdhocMetrics, \"coerceAdhocMetrics\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(emptySavedMetric, \"emptySavedMetric\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(getMetricsMatchingCurrentDataset, \"getMetricsMatchingCurrentDataset\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(MetricsControl, \"MetricsControl\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","PropTypes","ensureIsArray","t","useTheme","usePrevious","ControlHeader","Icons","AddIconButton","AddControlLabel","HeaderContainer","LabelsContainer","columnType","MetricDefinitionValue","AdhocMetric","savedMetricType","adhocMetricType","AdhocMetricPopoverTrigger","jsx","_jsx","jsxs","_jsxs","propTypes","name","string","isRequired","onChange","func","value","oneOfType","arrayOf","columns","savedMetrics","isLoading","bool","multi","clearable","datasource","object","defaultProps","getOptionsForSavedMetrics","currentMetricValues","currentMetric","_savedMetrics$filter","filter","savedMetric","Array","isArray","includes","metric_name","isDictionaryForAdhocMetric","expressionType","coerceAdhocMetrics","map","val","emptySavedMetric","expression","getMetricsMatchingCurrentDataset","metric","some","column","column_name","MetricsControl","propsValue","props","setValue","theme","prevColumns","prevSavedMetrics","handleChange","opts","transformedOpts","optionValues","option","onNewMetric","newMetric","newValue","onMetricEdit","changedMetric","oldMetric","optionName","onRemoveMetric","index","valuesCopy","splice","moveLabel","dragIndex","hoverIndex","newValues","isAddNewMetricDisabled","length","savedMetricOptions","newAdhocMetric","addNewMetricPopoverTrigger","trigger","adhocMetric","savedMetricsOptions","isNew","children","_isEqual","matchingMetrics","onDropLabel","valueRenderer","onMoveLabel","className","disabled","PlusLarge","iconSize","iconColor","colors","grayscale","light5","PlusSmall","light1","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ensureIsArray, t, useTheme, usePrevious } from '@superset-ui/core';\nimport { isEqual } from 'lodash';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport Icons from 'src/components/Icons';\nimport {\n  AddIconButton,\n  AddControlLabel,\n  HeaderContainer,\n  LabelsContainer,\n} from 'src/explore/components/controls/OptionControls';\nimport columnType from './columnType';\nimport MetricDefinitionValue from './MetricDefinitionValue';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';\nimport adhocMetricType from './adhocMetricType';\nimport AdhocMetricPopoverTrigger from './AdhocMetricPopoverTrigger';\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, adhocMetricType])),\n    PropTypes.oneOfType([PropTypes.string, adhocMetricType]),\n  ]),\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  isLoading: PropTypes.bool,\n  multi: PropTypes.bool,\n  clearable: PropTypes.bool,\n  datasource: PropTypes.object,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  clearable: true,\n  savedMetrics: [],\n  columns: [],\n};\n\nfunction getOptionsForSavedMetrics(\n  savedMetrics,\n  currentMetricValues,\n  currentMetric,\n) {\n  return (\n    savedMetrics?.filter(savedMetric =>\n      Array.isArray(currentMetricValues)\n        ? !currentMetricValues.includes(savedMetric.metric_name) ||\n          savedMetric.metric_name === currentMetric\n        : savedMetric,\n    ) ?? []\n  );\n}\n\nfunction isDictionaryForAdhocMetric(value) {\n  return value && !(value instanceof AdhocMetric) && value.expressionType;\n}\n\n// adhoc metrics are stored as dictionaries in URL params. We convert them back into the\n// AdhocMetric class for typechecking, consistency and instance method access.\nfunction coerceAdhocMetrics(value) {\n  if (!value) {\n    return [];\n  }\n  if (!Array.isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return value.map(val => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n}\n\nconst emptySavedMetric = { metric_name: '', expression: '' };\n\n// TODO: use typeguards to distinguish saved metrics from adhoc metrics\nconst getMetricsMatchingCurrentDataset = (value, columns, savedMetrics) =>\n  ensureIsArray(value).filter(metric => {\n    if (typeof metric === 'string' || metric.metric_name) {\n      return savedMetrics?.some(\n        savedMetric =>\n          savedMetric.metric_name === metric ||\n          savedMetric.metric_name === metric.metric_name,\n      );\n    }\n    return columns?.some(\n      column =>\n        !metric.column || metric.column.column_name === column.column_name,\n    );\n  });\n\nconst MetricsControl = ({\n  onChange,\n  multi,\n  value: propsValue,\n  columns,\n  savedMetrics,\n  datasource,\n  ...props\n}) => {\n  const [value, setValue] = useState(coerceAdhocMetrics(propsValue));\n  const theme = useTheme();\n  const prevColumns = usePrevious(columns);\n  const prevSavedMetrics = usePrevious(savedMetrics);\n\n  const handleChange = useCallback(\n    opts => {\n      // if clear out options\n      if (opts === null) {\n        onChange(null);\n        return;\n      }\n\n      const transformedOpts = ensureIsArray(opts);\n      const optionValues = transformedOpts\n        .map(option => {\n          // pre-defined metric\n          if (option.metric_name) {\n            return option.metric_name;\n          }\n          return option;\n        })\n        .filter(option => option);\n      onChange(multi ? optionValues : optionValues[0]);\n    },\n    [multi, onChange],\n  );\n\n  const onNewMetric = useCallback(\n    newMetric => {\n      const newValue = [...value, newMetric];\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, value],\n  );\n\n  const onMetricEdit = useCallback(\n    (changedMetric, oldMetric) => {\n      const newValue = value.map(val => {\n        if (\n          // compare saved metrics\n          val === oldMetric.metric_name ||\n          // compare adhoc metrics\n          typeof val.optionName !== 'undefined'\n            ? val.optionName === oldMetric.optionName\n            : false\n        ) {\n          return changedMetric;\n        }\n        return val;\n      });\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, value],\n  );\n\n  const onRemoveMetric = useCallback(\n    index => {\n      if (!Array.isArray(value)) {\n        return;\n      }\n      const valuesCopy = [...value];\n      valuesCopy.splice(index, 1);\n      setValue(valuesCopy);\n      handleChange(valuesCopy);\n    },\n    [handleChange, value],\n  );\n\n  const moveLabel = useCallback(\n    (dragIndex, hoverIndex) => {\n      const newValues = [...value];\n      [newValues[hoverIndex], newValues[dragIndex]] = [\n        newValues[dragIndex],\n        newValues[hoverIndex],\n      ];\n      setValue(newValues);\n    },\n    [value],\n  );\n\n  const isAddNewMetricDisabled = useCallback(\n    () => !multi && value.length > 0,\n    [multi, value.length],\n  );\n\n  const savedMetricOptions = useMemo(\n    () => getOptionsForSavedMetrics(savedMetrics, propsValue, null),\n    [propsValue, savedMetrics],\n  );\n\n  const newAdhocMetric = useMemo(() => new AdhocMetric({}), [value]);\n  const addNewMetricPopoverTrigger = useCallback(\n    trigger => {\n      if (isAddNewMetricDisabled()) {\n        return trigger;\n      }\n      return (\n        <AdhocMetricPopoverTrigger\n          adhocMetric={newAdhocMetric}\n          onMetricEdit={onNewMetric}\n          columns={columns}\n          savedMetricsOptions={savedMetricOptions}\n          savedMetric={emptySavedMetric}\n          datasource={datasource}\n          isNew\n        >\n          {trigger}\n        </AdhocMetricPopoverTrigger>\n      );\n    },\n    [\n      columns,\n      datasource,\n      isAddNewMetricDisabled,\n      newAdhocMetric,\n      onNewMetric,\n      savedMetricOptions,\n    ],\n  );\n\n  useEffect(() => {\n    // Remove selected custom metrics that do not exist in the dataset anymore\n    // Remove selected adhoc metrics that use columns which do not exist in the dataset anymore\n    if (\n      propsValue &&\n      (!isEqual(prevColumns, columns) ||\n        !isEqual(prevSavedMetrics, savedMetrics))\n    ) {\n      const matchingMetrics = getMetricsMatchingCurrentDataset(\n        propsValue,\n        columns,\n        savedMetrics,\n      );\n      if (!isEqual(matchingMetrics, propsValue)) {\n        handleChange(matchingMetrics);\n      }\n    }\n  }, [columns, handleChange, savedMetrics]);\n\n  useEffect(() => {\n    setValue(coerceAdhocMetrics(propsValue));\n  }, [propsValue]);\n\n  const onDropLabel = useCallback(\n    () => handleChange(value),\n    [handleChange, value],\n  );\n\n  const valueRenderer = useCallback(\n    (option, index) => (\n      <MetricDefinitionValue\n        key={index}\n        index={index}\n        option={option}\n        onMetricEdit={onMetricEdit}\n        onRemoveMetric={onRemoveMetric}\n        columns={columns}\n        datasource={datasource}\n        savedMetrics={savedMetrics}\n        savedMetricsOptions={getOptionsForSavedMetrics(\n          savedMetrics,\n          value,\n          value?.[index],\n        )}\n        onMoveLabel={moveLabel}\n        onDropLabel={onDropLabel}\n        multi={multi}\n      />\n    ),\n    [\n      columns,\n      datasource,\n      moveLabel,\n      multi,\n      onDropLabel,\n      onMetricEdit,\n      onRemoveMetric,\n      savedMetrics,\n      value,\n    ],\n  );\n\n  return (\n    <div className=\"metrics-select\">\n      <HeaderContainer>\n        <ControlHeader {...props} />\n        {addNewMetricPopoverTrigger(\n          <AddIconButton\n            disabled={isAddNewMetricDisabled()}\n            data-test=\"add-metric-button\"\n          >\n            <Icons.PlusLarge\n              iconSize=\"s\"\n              iconColor={theme.colors.grayscale.light5}\n            />\n          </AddIconButton>,\n        )}\n      </HeaderContainer>\n      <LabelsContainer>\n        {value.length > 0\n          ? value.map((value, index) => valueRenderer(value, index))\n          : addNewMetricPopoverTrigger(\n              <AddControlLabel>\n                <Icons.PlusSmall iconColor={theme.colors.grayscale.light1} />\n                {t('Add metric')}\n              </AddControlLabel>,\n            )}\n      </LabelsContainer>\n    </div>\n  );\n};\n\nMetricsControl.propTypes = propTypes;\nMetricsControl.defaultProps = defaultProps;\n\nexport default MetricsControl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}