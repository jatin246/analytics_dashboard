{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable react/jsx-sort-default-props */\nimport { PureComponent } from 'react';\nimport { t } from '@superset-ui/core';\nimport { createSelector } from 'reselect';\nimport getChartComponentRegistry from '../registries/ChartComponentRegistrySingleton';\nimport getChartTransformPropsRegistry from '../registries/ChartTransformPropsRegistrySingleton';\nimport ChartProps from '../models/ChartProps';\nimport createLoadableRenderer from './createLoadableRenderer';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction IDENTITY(x) {\n  return x;\n}\nconst EMPTY = () => null;\nconst defaultProps = {\n  id: '',\n  className: '',\n  preTransformProps: IDENTITY,\n  overrideTransformProps: undefined,\n  postTransformProps: IDENTITY,\n  onRenderSuccess() {},\n  onRenderFailure() {}\n};\nconst BLANK_CHART_PROPS = new ChartProps();\nexport default class SuperChartCore extends PureComponent {constructor(...args) {super(...args);\n    /**\n     * The HTML element that wraps all chart content\n     */this.\n    container = void 0;\n    /**\n     * memoized function so it will not recompute\n     * and return previous value\n     * unless one of\n     * - preTransformProps\n     * - transformProps\n     * - postTransformProps\n     * - chartProps\n     * is changed.\n     */this.\n    processChartProps = createSelector([\n    (input) => input.chartProps,\n    (input) => input.preTransformProps,\n    (input) => input.transformProps,\n    (input) => input.postTransformProps],\n    (chartProps, pre = IDENTITY, transform = IDENTITY, post = IDENTITY) => post(transform(pre(chartProps))));\n    /**\n     * memoized function so it will not recompute\n     * and return previous value\n     * unless one of\n     * - chartType\n     * - overrideTransformProps\n     * is changed.\n     */this.\n    createLoadableRenderer = createSelector([\n    (input) => input.chartType,\n    (input) => input.overrideTransformProps],\n    (chartType, overrideTransformProps) => {\n      if (chartType) {\n        const Renderer = createLoadableRenderer({\n          loader: {\n            Chart: () => getChartComponentRegistry().getAsPromise(chartType),\n            transformProps: overrideTransformProps ?\n            () => Promise.resolve(overrideTransformProps) :\n            () => getChartTransformPropsRegistry().getAsPromise(chartType)\n          },\n          loading: (loadingProps) => this.renderLoading(loadingProps, chartType),\n          render: this.renderChart\n        });\n        // Trigger preloading.\n        Renderer.preload();\n        return Renderer;\n      }\n      return EMPTY;\n    });this.\n\n    renderChart = (loaded, props) => {\n      const { Chart, transformProps } = loaded;\n      const { chartProps, preTransformProps, postTransformProps } = props;\n      return _jsx(Chart, { ...this.processChartProps({\n          chartProps,\n          preTransformProps,\n          transformProps,\n          postTransformProps\n        }) });\n    };this.\n    renderLoading = (loadingProps, chartType) => {\n      const { error } = loadingProps;\n      if (error) {\n        return _jsxs(\"div\", { className: \"alert alert-warning\", role: \"alert\", children: [\n          _jsx(\"strong\", { children: t('ERROR') }), \"\\xA0\",\n          _jsxs(\"code\", { children: [\"chartType=\\\"\", chartType, \"\\\"\"] }), \" \\u2014\",\n          error.toString()] }\n        );\n      }\n      return null;\n    };this.\n    setRef = (container) => {\n      this.container = container;\n    };}\n  render() {\n    const { id, className, preTransformProps, postTransformProps, chartProps = BLANK_CHART_PROPS, onRenderSuccess, onRenderFailure } = this.props;\n    // Create LoadableRenderer and start preloading\n    // the lazy-loaded Chart components\n    const Renderer = this.createLoadableRenderer(this.props);\n    // Do not render if chartProps is set to null.\n    // but the pre-loading has been started in this.createLoadableRenderer\n    // to prepare for rendering once chartProps becomes available.\n    if (chartProps === null) {\n      return null;\n    }\n    const containerProps = {};\n    if (id) {\n      containerProps.id = id;\n    }\n    if (className) {\n      containerProps.className = className;\n    }\n    return _jsx(\"div\", { ...containerProps, ref: this.setRef, children:\n      _jsx(Renderer, { preTransformProps: preTransformProps, postTransformProps: postTransformProps, chartProps: chartProps, onRenderSuccess: onRenderSuccess, onRenderFailure: onRenderFailure }) }\n    );\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}SuperChartCore.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(IDENTITY, \"IDENTITY\", \"/app/superset-frontend/packages/superset-ui-core/src/chart/components/SuperChartCore.tsx\");reactHotLoader.register(EMPTY, \"EMPTY\", \"/app/superset-frontend/packages/superset-ui-core/src/chart/components/SuperChartCore.tsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/packages/superset-ui-core/src/chart/components/SuperChartCore.tsx\");reactHotLoader.register(BLANK_CHART_PROPS, \"BLANK_CHART_PROPS\", \"/app/superset-frontend/packages/superset-ui-core/src/chart/components/SuperChartCore.tsx\");reactHotLoader.register(SuperChartCore, \"SuperChartCore\", \"/app/superset-frontend/packages/superset-ui-core/src/chart/components/SuperChartCore.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["PureComponent","t","createSelector","getChartComponentRegistry","getChartTransformPropsRegistry","ChartProps","createLoadableRenderer","jsx","_jsx","jsxs","_jsxs","IDENTITY","x","EMPTY","defaultProps","id","className","preTransformProps","overrideTransformProps","undefined","postTransformProps","onRenderSuccess","onRenderFailure","BLANK_CHART_PROPS","SuperChartCore","constructor","args","container","processChartProps","input","chartProps","transformProps","pre","transform","post","chartType","Renderer","loader","Chart","getAsPromise","Promise","resolve","loading","loadingProps","renderLoading","render","renderChart","preload","loaded","props","error","role","children","toString","setRef","containerProps","ref","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/packages/superset-ui-core/src/chart/components/SuperChartCore.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable react/jsx-sort-default-props */\nimport { PureComponent } from 'react';\nimport { t } from '@superset-ui/core';\nimport { createSelector } from 'reselect';\nimport getChartComponentRegistry from '../registries/ChartComponentRegistrySingleton';\nimport getChartTransformPropsRegistry from '../registries/ChartTransformPropsRegistrySingleton';\nimport ChartProps from '../models/ChartProps';\nimport createLoadableRenderer from './createLoadableRenderer';\nimport { ChartType } from '../models/ChartPlugin';\nimport {\n  PreTransformProps,\n  TransformProps,\n  PostTransformProps,\n} from '../types/TransformFunction';\nimport { HandlerFunction } from '../types/Base';\n\nfunction IDENTITY<T>(x: T) {\n  return x;\n}\n\nconst EMPTY = () => null;\n\nconst defaultProps = {\n  id: '',\n  className: '',\n  preTransformProps: IDENTITY,\n  overrideTransformProps: undefined,\n  postTransformProps: IDENTITY,\n  onRenderSuccess() {},\n  onRenderFailure() {},\n};\n\ninterface LoadingProps {\n  error: { toString(): string };\n}\n\ninterface LoadedModules {\n  Chart: ChartType;\n  transformProps: TransformProps;\n}\n\ninterface RenderProps {\n  chartProps: ChartProps;\n  preTransformProps?: PreTransformProps;\n  postTransformProps?: PostTransformProps;\n}\n\nconst BLANK_CHART_PROPS = new ChartProps();\n\nexport type Props = {\n  id?: string;\n  className?: string;\n  chartProps?: ChartProps | null;\n  chartType: string;\n  preTransformProps?: PreTransformProps;\n  overrideTransformProps?: TransformProps;\n  postTransformProps?: PostTransformProps;\n  onRenderSuccess?: HandlerFunction;\n  onRenderFailure?: HandlerFunction;\n};\n\nexport default class SuperChartCore extends PureComponent<Props, {}> {\n  /**\n   * The HTML element that wraps all chart content\n   */\n  container?: HTMLElement | null;\n\n  /**\n   * memoized function so it will not recompute\n   * and return previous value\n   * unless one of\n   * - preTransformProps\n   * - transformProps\n   * - postTransformProps\n   * - chartProps\n   * is changed.\n   */\n  processChartProps = createSelector(\n    [\n      (input: {\n        chartProps: ChartProps;\n        preTransformProps?: PreTransformProps;\n        transformProps?: TransformProps;\n        postTransformProps?: PostTransformProps;\n      }) => input.chartProps,\n      input => input.preTransformProps,\n      input => input.transformProps,\n      input => input.postTransformProps,\n    ],\n    (chartProps, pre = IDENTITY, transform = IDENTITY, post = IDENTITY) =>\n      post(transform(pre(chartProps))),\n  );\n\n  /**\n   * memoized function so it will not recompute\n   * and return previous value\n   * unless one of\n   * - chartType\n   * - overrideTransformProps\n   * is changed.\n   */\n  private createLoadableRenderer = createSelector(\n    [\n      (input: { chartType: string; overrideTransformProps?: TransformProps }) =>\n        input.chartType,\n      input => input.overrideTransformProps,\n    ],\n    (chartType, overrideTransformProps) => {\n      if (chartType) {\n        const Renderer = createLoadableRenderer({\n          loader: {\n            Chart: () => getChartComponentRegistry().getAsPromise(chartType),\n            transformProps: overrideTransformProps\n              ? () => Promise.resolve(overrideTransformProps)\n              : () => getChartTransformPropsRegistry().getAsPromise(chartType),\n          },\n          loading: (loadingProps: LoadingProps) =>\n            this.renderLoading(loadingProps, chartType),\n          render: this.renderChart,\n        });\n\n        // Trigger preloading.\n        Renderer.preload();\n\n        return Renderer;\n      }\n\n      return EMPTY;\n    },\n  );\n\n  static defaultProps = defaultProps;\n\n  private renderChart = (loaded: LoadedModules, props: RenderProps) => {\n    const { Chart, transformProps } = loaded;\n    const { chartProps, preTransformProps, postTransformProps } = props;\n\n    return (\n      <Chart\n        {...this.processChartProps({\n          chartProps,\n          preTransformProps,\n          transformProps,\n          postTransformProps,\n        })}\n      />\n    );\n  };\n\n  private renderLoading = (loadingProps: LoadingProps, chartType: string) => {\n    const { error } = loadingProps;\n\n    if (error) {\n      return (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          <strong>{t('ERROR')}</strong>&nbsp;\n          <code>chartType=&quot;{chartType}&quot;</code> &mdash;\n          {error.toString()}\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  private setRef = (container: HTMLElement | null) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      id,\n      className,\n      preTransformProps,\n      postTransformProps,\n      chartProps = BLANK_CHART_PROPS,\n      onRenderSuccess,\n      onRenderFailure,\n    } = this.props;\n\n    // Create LoadableRenderer and start preloading\n    // the lazy-loaded Chart components\n    const Renderer = this.createLoadableRenderer(this.props);\n\n    // Do not render if chartProps is set to null.\n    // but the pre-loading has been started in this.createLoadableRenderer\n    // to prepare for rendering once chartProps becomes available.\n    if (chartProps === null) {\n      return null;\n    }\n\n    const containerProps: {\n      id?: string;\n      className?: string;\n    } = {};\n    if (id) {\n      containerProps.id = id;\n    }\n    if (className) {\n      containerProps.className = className;\n    }\n\n    return (\n      <div {...containerProps} ref={this.setRef}>\n        <Renderer\n          preTransformProps={preTransformProps}\n          postTransformProps={postTransformProps}\n          chartProps={chartProps}\n          onRenderSuccess={onRenderSuccess}\n          onRenderFailure={onRenderFailure}\n        />\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}