{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { t, isAdhocColumn } from '@superset-ui/core';\nimport { isColumnMeta } from '@superset-ui/chart-controls';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport ColumnSelectPopover from './ColumnSelectPopover';\nimport { DndColumnSelectPopoverTitle } from './DndColumnSelectPopoverTitle';\nimport ControlPopover from '../ControlPopover/ControlPopover';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst defaultPopoverLabel = t('My column');\nconst editableTitleTab = 'sqlExpression';\nconst ColumnSelectPopoverTrigger = ({ columns, editedColumn, onColumnEdit, isControlledComponent, children, isTemporal, disabledTabs, ...props }) => {\n  // @ts-ignore\n  const datasource = useSelector((state) => state.explore.datasource);\n  const [popoverLabel, setPopoverLabel] = useState(defaultPopoverLabel);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [isTitleEditDisabled, setIsTitleEditDisabled] = useState(true);\n  const [hasCustomLabel, setHasCustomLabel] = useState(false);\n  const [showDatasetModal, setDatasetModal] = useState(false);\n  let initialPopoverLabel = defaultPopoverLabel;\n  if (editedColumn && isColumnMeta(editedColumn)) {\n    initialPopoverLabel = editedColumn.verbose_name || editedColumn.column_name;\n  } else\n  if (editedColumn && isAdhocColumn(editedColumn)) {\n    initialPopoverLabel = editedColumn.label || defaultPopoverLabel;\n  }\n  useEffect(() => {\n    setPopoverLabel(initialPopoverLabel);\n  }, [initialPopoverLabel, popoverVisible]);\n  const togglePopover = useCallback((visible) => {\n    setPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n  const { visible, handleTogglePopover, handleClosePopover } = isControlledComponent ?\n  {\n    visible: props.visible,\n    handleTogglePopover: props.togglePopover,\n    handleClosePopover: props.closePopover\n  } :\n  {\n    visible: popoverVisible,\n    handleTogglePopover: togglePopover,\n    handleClosePopover: closePopover\n  };\n  const getCurrentTab = useCallback((tab) => {\n    setIsTitleEditDisabled(tab !== editableTitleTab);\n  }, []);\n  const overlayContent = useMemo(() => _jsx(ExplorePopoverContent, { children:\n    _jsx(ColumnSelectPopover, { editedColumn: editedColumn, columns: columns, setDatasetModal: setDatasetModal, onClose: handleClosePopover, onChange: onColumnEdit, hasCustomLabel: hasCustomLabel, label: popoverLabel, setLabel: setPopoverLabel, getCurrentTab: getCurrentTab, isTemporal: isTemporal, disabledTabs: disabledTabs }) }\n  ), [\n  columns,\n  editedColumn,\n  getCurrentTab,\n  hasCustomLabel,\n  handleClosePopover,\n  isTemporal,\n  onColumnEdit,\n  popoverLabel,\n  disabledTabs]\n  );\n  const onLabelChange = useCallback((e) => {\n    setPopoverLabel(e.target.value);\n    setHasCustomLabel(true);\n  }, [setPopoverLabel, setHasCustomLabel]);\n  const popoverTitle = useMemo(() => _jsx(DndColumnSelectPopoverTitle, { title: popoverLabel, onChange: onLabelChange, isEditDisabled: isTitleEditDisabled, hasCustomLabel: hasCustomLabel }), [hasCustomLabel, isTitleEditDisabled, onLabelChange, popoverLabel]);\n  return _jsxs(_Fragment, { children: [\n    showDatasetModal && _jsx(SaveDatasetModal, { visible: showDatasetModal, onHide: () => setDatasetModal(false), buttonTextOnSave: t('Save'), buttonTextOnOverwrite: t('Overwrite'), modalDescription: t('Save this query as a virtual dataset to continue exploring'), datasource: datasource }),\n    _jsx(ControlPopover, { trigger: \"click\", content: overlayContent, defaultVisible: visible, visible: visible, onVisibleChange: handleTogglePopover, title: popoverTitle, destroyTooltipOnHide: true, children:\n      children }\n    )] }\n  );\n};__signature__(ColumnSelectPopoverTrigger, \"useSelector{datasource}\\nuseState{[popoverLabel, setPopoverLabel](defaultPopoverLabel)}\\nuseState{[popoverVisible, setPopoverVisible](false)}\\nuseState{[isTitleEditDisabled, setIsTitleEditDisabled](true)}\\nuseState{[hasCustomLabel, setHasCustomLabel](false)}\\nuseState{[showDatasetModal, setDatasetModal](false)}\\nuseEffect{}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseCallback{getCurrentTab}\\nuseMemo{overlayContent}\\nuseCallback{onLabelChange}\\nuseMemo{popoverTitle}\", () => [useSelector]);const _default =\nColumnSelectPopoverTrigger;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(defaultPopoverLabel, \"defaultPopoverLabel\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");reactHotLoader.register(editableTitleTab, \"editableTitleTab\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");reactHotLoader.register(ColumnSelectPopoverTrigger, \"ColumnSelectPopoverTrigger\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","useSelector","t","isAdhocColumn","isColumnMeta","ExplorePopoverContent","SaveDatasetModal","ColumnSelectPopover","DndColumnSelectPopoverTitle","ControlPopover","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","defaultPopoverLabel","editableTitleTab","ColumnSelectPopoverTrigger","columns","editedColumn","onColumnEdit","isControlledComponent","children","isTemporal","disabledTabs","props","datasource","state","explore","popoverLabel","setPopoverLabel","popoverVisible","setPopoverVisible","isTitleEditDisabled","setIsTitleEditDisabled","hasCustomLabel","setHasCustomLabel","showDatasetModal","setDatasetModal","initialPopoverLabel","verbose_name","column_name","label","togglePopover","visible","closePopover","handleTogglePopover","handleClosePopover","getCurrentTab","tab","overlayContent","onClose","onChange","setLabel","onLabelChange","e","target","value","popoverTitle","title","isEditDisabled","onHide","buttonTextOnSave","buttonTextOnOverwrite","modalDescription","trigger","content","defaultVisible","onVisibleChange","destroyTooltipOnHide","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState, ReactNode } from 'react';\n\nimport { useSelector } from 'react-redux';\nimport { AdhocColumn, t, isAdhocColumn } from '@superset-ui/core';\nimport { ColumnMeta, isColumnMeta } from '@superset-ui/chart-controls';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport ColumnSelectPopover from './ColumnSelectPopover';\nimport { DndColumnSelectPopoverTitle } from './DndColumnSelectPopoverTitle';\nimport ControlPopover from '../ControlPopover/ControlPopover';\n\ninterface ColumnSelectPopoverTriggerProps {\n  columns: ColumnMeta[];\n  editedColumn?: ColumnMeta | AdhocColumn;\n  onColumnEdit: (editedColumn: ColumnMeta | AdhocColumn) => void;\n  isControlledComponent?: boolean;\n  visible?: boolean;\n  togglePopover?: (visible: boolean) => void;\n  closePopover?: () => void;\n  children: ReactNode;\n  isTemporal?: boolean;\n  disabledTabs?: Set<string>;\n}\n\nconst defaultPopoverLabel = t('My column');\nconst editableTitleTab = 'sqlExpression';\n\nconst ColumnSelectPopoverTrigger = ({\n  columns,\n  editedColumn,\n  onColumnEdit,\n  isControlledComponent,\n  children,\n  isTemporal,\n  disabledTabs,\n  ...props\n}: ColumnSelectPopoverTriggerProps) => {\n  // @ts-ignore\n  const datasource = useSelector(state => state.explore.datasource);\n  const [popoverLabel, setPopoverLabel] = useState(defaultPopoverLabel);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [isTitleEditDisabled, setIsTitleEditDisabled] = useState(true);\n  const [hasCustomLabel, setHasCustomLabel] = useState(false);\n  const [showDatasetModal, setDatasetModal] = useState(false);\n\n  let initialPopoverLabel = defaultPopoverLabel;\n  if (editedColumn && isColumnMeta(editedColumn)) {\n    initialPopoverLabel = editedColumn.verbose_name || editedColumn.column_name;\n  } else if (editedColumn && isAdhocColumn(editedColumn)) {\n    initialPopoverLabel = editedColumn.label || defaultPopoverLabel;\n  }\n\n  useEffect(() => {\n    setPopoverLabel(initialPopoverLabel);\n  }, [initialPopoverLabel, popoverVisible]);\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n\n  const { visible, handleTogglePopover, handleClosePopover } =\n    isControlledComponent\n      ? {\n          visible: props.visible,\n          handleTogglePopover: props.togglePopover!,\n          handleClosePopover: props.closePopover!,\n        }\n      : {\n          visible: popoverVisible,\n          handleTogglePopover: togglePopover,\n          handleClosePopover: closePopover,\n        };\n\n  const getCurrentTab = useCallback((tab: string) => {\n    setIsTitleEditDisabled(tab !== editableTitleTab);\n  }, []);\n\n  const overlayContent = useMemo(\n    () => (\n      <ExplorePopoverContent>\n        <ColumnSelectPopover\n          editedColumn={editedColumn}\n          columns={columns}\n          setDatasetModal={setDatasetModal}\n          onClose={handleClosePopover}\n          onChange={onColumnEdit}\n          hasCustomLabel={hasCustomLabel}\n          label={popoverLabel}\n          setLabel={setPopoverLabel}\n          getCurrentTab={getCurrentTab}\n          isTemporal={isTemporal}\n          disabledTabs={disabledTabs}\n        />\n      </ExplorePopoverContent>\n    ),\n    [\n      columns,\n      editedColumn,\n      getCurrentTab,\n      hasCustomLabel,\n      handleClosePopover,\n      isTemporal,\n      onColumnEdit,\n      popoverLabel,\n      disabledTabs,\n    ],\n  );\n\n  const onLabelChange = useCallback(\n    (e: any) => {\n      setPopoverLabel(e.target.value);\n      setHasCustomLabel(true);\n    },\n    [setPopoverLabel, setHasCustomLabel],\n  );\n\n  const popoverTitle = useMemo(\n    () => (\n      <DndColumnSelectPopoverTitle\n        title={popoverLabel}\n        onChange={onLabelChange}\n        isEditDisabled={isTitleEditDisabled}\n        hasCustomLabel={hasCustomLabel}\n      />\n    ),\n    [hasCustomLabel, isTitleEditDisabled, onLabelChange, popoverLabel],\n  );\n\n  return (\n    <>\n      {showDatasetModal && (\n        <SaveDatasetModal\n          visible={showDatasetModal}\n          onHide={() => setDatasetModal(false)}\n          buttonTextOnSave={t('Save')}\n          buttonTextOnOverwrite={t('Overwrite')}\n          modalDescription={t(\n            'Save this query as a virtual dataset to continue exploring',\n          )}\n          datasource={datasource}\n        />\n      )}\n      <ControlPopover\n        trigger=\"click\"\n        content={overlayContent}\n        defaultVisible={visible}\n        visible={visible}\n        onVisibleChange={handleTogglePopover}\n        title={popoverTitle}\n        destroyTooltipOnHide\n      >\n        {children}\n      </ControlPopover>\n    </>\n  );\n};\n\nexport default ColumnSelectPopoverTrigger;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}