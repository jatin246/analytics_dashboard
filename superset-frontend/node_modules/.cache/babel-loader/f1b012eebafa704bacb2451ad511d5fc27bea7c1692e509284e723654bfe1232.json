{"ast":null,"code":"import _last from \"lodash/last\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { logging, t, SupersetClient } from '@superset-ui/core';\nimport { Menu } from 'src/components/Menu';\nimport { LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE, LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF } from 'src/logger/LogUtils';\nimport { useSelector } from 'react-redux';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\n\nimport { DownloadScreenshotFormat } from './types';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst RETRY_INTERVAL = 3000;\nconst MAX_RETRIES = 30;\nexport default function DownloadScreenshot({ text, logEvent, dashboardId, format, ...rest }) {\n  const anchor = useSelector((state) => _last(state.dashboardState.activeTabs) || undefined);\n  const { addDangerToast, addSuccessToast, addInfoToast } = useToasts();\n  const onDownloadScreenshot = () => {\n    let retries = 0;\n    // this function checks if the image is ready\n    const checkImageReady = (imageUrl) => fetch(`${imageUrl}?download_format=${format}`).\n    then((response) => {\n      if (response.status === 404) {\n        throw new Error('Image not ready');\n      }\n      return response.blob();\n    }).\n    then((blob) => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `screenshot.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    });\n    // this is the functions that handles the retries\n    const fetchImageWithRetry = (imageUrl) => {\n      checkImageReady(imageUrl).\n      then(() => {\n        addSuccessToast(t('The screenshot is now being downloaded.'));\n      }).\n      catch((error) => {\n        // we check how many retries have been made\n        if (retries < MAX_RETRIES) {\n          retries += 1;\n          addInfoToast(t('The screenshot is being generated. Please, do not leave the page.'), {\n            noDuplicate: true\n          });\n          setTimeout(() => fetchImageWithRetry(imageUrl), RETRY_INTERVAL);\n        } else\n        {\n          addDangerToast(t('The screenshot could not be downloaded. Please, try again later.'));\n          logging.error(error);\n        }\n      });\n    };\n    SupersetClient.post({\n      endpoint: `/api/v1/dashboard/${dashboardId}/cache_dashboard_screenshot`,\n      jsonPayload: {\n        anchor\n      }\n    }).\n    then(({ json }) => {\n      const imageUrl = json == null ? void 0 : json.image_url;\n      if (!imageUrl) {\n        throw new Error('No image URL in response');\n      }\n      addInfoToast(t('The screenshot is being generated. Please, do not leave the page.'));\n      fetchImageWithRetry(imageUrl);\n    }).\n    catch((error) => {\n      logging.error(error);\n      addDangerToast(t('The screenshot could not be downloaded. Please, try again later.'));\n    }).\n    finally(() => {\n      logEvent == null ? void 0 : logEvent(format === DownloadScreenshotFormat.PNG ?\n      LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE :\n      LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF);\n    });\n  };\n  return _jsx(Menu.Item, { ...rest, children:\n    _jsx(\"div\", { onClick: onDownloadScreenshot, role: \"button\", tabIndex: 0, children:\n      text }\n    ) }, format\n  );\n}__signature__(DownloadScreenshot, \"useSelector{anchor}\\nuseToasts{{ addDangerToast, addSuccessToast, addInfoToast }}\", () => [useSelector, useToasts]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RETRY_INTERVAL, \"RETRY_INTERVAL\", \"/app/superset-frontend/src/dashboard/components/menu/DownloadMenuItems/DownloadScreenshot.tsx\");reactHotLoader.register(MAX_RETRIES, \"MAX_RETRIES\", \"/app/superset-frontend/src/dashboard/components/menu/DownloadMenuItems/DownloadScreenshot.tsx\");reactHotLoader.register(DownloadScreenshot, \"DownloadScreenshot\", \"/app/superset-frontend/src/dashboard/components/menu/DownloadMenuItems/DownloadScreenshot.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["logging","t","SupersetClient","Menu","LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE","LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF","useSelector","useToasts","DownloadScreenshotFormat","jsx","_jsx","RETRY_INTERVAL","MAX_RETRIES","DownloadScreenshot","text","logEvent","dashboardId","format","rest","anchor","state","_last","dashboardState","activeTabs","undefined","addDangerToast","addSuccessToast","addInfoToast","onDownloadScreenshot","retries","checkImageReady","imageUrl","fetch","then","response","status","Error","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","fetchImageWithRetry","catch","error","noDuplicate","setTimeout","post","endpoint","jsonPayload","json","image_url","finally","PNG","Item","children","onClick","role","tabIndex","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/dashboard/components/menu/DownloadMenuItems/DownloadScreenshot.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { logging, t, SupersetClient } from '@superset-ui/core';\nimport { Menu } from 'src/components/Menu';\nimport {\n  LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE,\n  LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF,\n} from 'src/logger/LogUtils';\nimport { RootState } from 'src/dashboard/types';\nimport { useSelector } from 'react-redux';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { last } from 'lodash';\nimport { DownloadScreenshotFormat } from './types';\n\nconst RETRY_INTERVAL = 3000;\nconst MAX_RETRIES = 30;\n\nexport default function DownloadScreenshot({\n  text,\n  logEvent,\n  dashboardId,\n  format,\n  ...rest\n}: {\n  text: string;\n  dashboardId: string;\n  logEvent?: Function;\n  format: string;\n}) {\n  const anchor = useSelector(\n    (state: RootState) => last(state.dashboardState.activeTabs) || undefined,\n  );\n  const { addDangerToast, addSuccessToast, addInfoToast } = useToasts();\n\n  const onDownloadScreenshot = () => {\n    let retries = 0;\n\n    // this function checks if the image is ready\n    const checkImageReady = (imageUrl: string) =>\n      fetch(`${imageUrl}?download_format=${format}`)\n        .then(response => {\n          if (response.status === 404) {\n            throw new Error('Image not ready');\n          }\n          return response.blob();\n        })\n        .then(blob => {\n          const url = window.URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `screenshot.${format}`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          window.URL.revokeObjectURL(url);\n        });\n\n    // this is the functions that handles the retries\n    const fetchImageWithRetry = (imageUrl: string) => {\n      checkImageReady(imageUrl)\n        .then(() => {\n          addSuccessToast(t('The screenshot is now being downloaded.'));\n        })\n        .catch(error => {\n          // we check how many retries have been made\n          if (retries < MAX_RETRIES) {\n            retries += 1;\n            addInfoToast(\n              t(\n                'The screenshot is being generated. Please, do not leave the page.',\n              ),\n              {\n                noDuplicate: true,\n              },\n            );\n            setTimeout(() => fetchImageWithRetry(imageUrl), RETRY_INTERVAL);\n          } else {\n            addDangerToast(\n              t(\n                'The screenshot could not be downloaded. Please, try again later.',\n              ),\n            );\n            logging.error(error);\n          }\n        });\n    };\n\n    SupersetClient.post({\n      endpoint: `/api/v1/dashboard/${dashboardId}/cache_dashboard_screenshot`,\n      jsonPayload: {\n        anchor,\n      },\n    })\n      .then(({ json }) => {\n        const imageUrl = json?.image_url;\n        if (!imageUrl) {\n          throw new Error('No image URL in response');\n        }\n        addInfoToast(\n          t(\n            'The screenshot is being generated. Please, do not leave the page.',\n          ),\n        );\n        fetchImageWithRetry(imageUrl);\n      })\n      .catch(error => {\n        logging.error(error);\n        addDangerToast(\n          t('The screenshot could not be downloaded. Please, try again later.'),\n        );\n      })\n      .finally(() => {\n        logEvent?.(\n          format === DownloadScreenshotFormat.PNG\n            ? LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE\n            : LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF,\n        );\n      });\n  };\n\n  return (\n    <Menu.Item key={format} {...rest}>\n      <div onClick={onDownloadScreenshot} role=\"button\" tabIndex={0}>\n        {text}\n      </div>\n    </Menu.Item>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}