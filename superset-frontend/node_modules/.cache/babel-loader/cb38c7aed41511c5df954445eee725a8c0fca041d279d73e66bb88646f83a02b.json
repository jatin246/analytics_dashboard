{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport rison from 'rison';\nimport PropTypes from 'prop-types';\nimport { CompactPicker } from 'react-color';\nimport Button from 'src/components/Button';\nimport {\n  t,\n  SupersetClient,\n  getCategoricalSchemeRegistry,\n  getChartMetadataRegistry,\n  validateNonEmpty,\n  isValidExpression,\n  styled,\n  getColumnLabel,\n  withTheme } from\n'@superset-ui/core';\nimport SelectControl from 'src/explore/components/controls/SelectControl';\nimport { AsyncSelect } from 'src/components';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport PopoverSection from 'src/components/PopoverSection';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport {\n  ANNOTATION_SOURCE_TYPES,\n  ANNOTATION_TYPES,\n  ANNOTATION_TYPES_METADATA,\n  DEFAULT_ANNOTATION_TYPE,\n  requiresQuery,\n  ANNOTATION_SOURCE_TYPES_METADATA } from\n'./AnnotationTypes';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\n\nconst AUTOMATIC_COLOR = '';\n\nconst propTypes = {\n  name: PropTypes.string,\n  annotationType: PropTypes.string,\n  sourceType: PropTypes.string,\n  color: PropTypes.string,\n  opacity: PropTypes.string,\n  style: PropTypes.string,\n  width: PropTypes.number,\n  showMarkers: PropTypes.bool,\n  hideLine: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  overrides: PropTypes.object,\n  show: PropTypes.bool,\n  showLabel: PropTypes.bool,\n  titleColumn: PropTypes.string,\n  descriptionColumns: PropTypes.arrayOf(PropTypes.string),\n  timeColumn: PropTypes.string,\n  intervalEndColumn: PropTypes.string,\n  vizType: PropTypes.string,\n\n  error: PropTypes.string,\n  colorScheme: PropTypes.string,\n\n  addAnnotationLayer: PropTypes.func,\n  removeAnnotationLayer: PropTypes.func,\n  close: PropTypes.func\n};\n\nconst defaultProps = {\n  name: '',\n  annotationType: DEFAULT_ANNOTATION_TYPE,\n  sourceType: '',\n  color: AUTOMATIC_COLOR,\n  opacity: '',\n  style: 'solid',\n  width: 1,\n  showMarkers: false,\n  hideLine: false,\n  overrides: {},\n  colorScheme: 'd3Category10',\n  show: true,\n  showLabel: false,\n  titleColumn: '',\n  descriptionColumns: [],\n  timeColumn: '',\n  intervalEndColumn: '',\n\n  addAnnotationLayer: () => {},\n  removeAnnotationLayer: () => {},\n  close: () => {}\n};\n\nconst NotFoundContentWrapper = styled.div`\n  && > div:first-child {\n    padding-left: 0;\n    padding-right: 0;\n  }\n`;\n\nconst NotFoundContent = () =>\n_jsx(NotFoundContentWrapper, { children:\n  _jsx(EmptyStateSmall, {\n    title: t('No annotation layers'),\n    description:\n    _jsxs(\"span\", { children: [\n      t('Add an annotation layer'), ' ',\n      _jsx(\"a\", {\n        href: \"/annotationlayer/list\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\", children:\n\n        t('here') }\n      ), \".\"] }\n\n    ),\n\n    image: \"empty.svg\" }\n  ) }\n);\n\n\nclass AnnotationLayer extends PureComponent {\n  constructor(props) {\n    super(props);this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    fetchNativeAnnotations = async (search, page, pageSize) => {\n      const queryParams = rison.encode({\n        filters: [\n        {\n          col: 'name',\n          opr: 'ct',\n          value: search\n        }],\n\n        columns: ['id', 'name'],\n        page,\n        page_size: pageSize\n      });\n\n      const { json } = await SupersetClient.get({\n        endpoint: `/api/v1/annotation_layer/?q=${queryParams}`\n      });\n\n      const { result, count } = json;\n\n      const layersArray = result.map((layer) => ({\n        value: layer.id,\n        label: layer.name\n      }));\n\n      return {\n        data: layersArray,\n        totalCount: count\n      };\n    };this.\n\n    fetchCharts = async (search, page, pageSize) => {\n      const { annotationType } = this.state;\n\n      const queryParams = rison.encode({\n        filters: [\n        { col: 'slice_name', opr: 'chart_all_text', value: search },\n        {\n          col: 'id',\n          opr: 'chart_owned_created_favored_by_me',\n          value: true\n        }],\n\n        columns: ['id', 'slice_name', 'viz_type'],\n        order_column: 'slice_name',\n        order_direction: 'asc',\n        page,\n        page_size: pageSize\n      });\n      const { json } = await SupersetClient.get({\n        endpoint: `/api/v1/chart/?q=${queryParams}`\n      });\n\n      const { result, count } = json;\n      const registry = getChartMetadataRegistry();\n\n      const chartsArray = result.\n      filter((chart) => {\n        const metadata = registry.get(chart.viz_type);\n        return metadata && metadata.canBeAnnotationType(annotationType);\n      }).\n      map((chart) => ({\n        value: chart.id,\n        label: chart.slice_name,\n        viz_type: chart.viz_type\n      }));\n\n      return {\n        data: chartsArray,\n        totalCount: count\n      };\n    };this.\n\n    fetchOptions = (search, page, pageSize) => {\n      const { sourceType } = this.state;\n\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        return this.fetchNativeAnnotations(search, page, pageSize);\n      }\n      return this.fetchCharts(search, page, pageSize);\n    };this.\n\n    fetchSliceData = (id) => {\n      const queryParams = rison.encode({\n        columns: ['query_context']\n      });\n      SupersetClient.get({\n        endpoint: `/api/v1/chart/${id}?q=${queryParams}`\n      }).then(({ json }) => {var _formData$groupby;\n        const { result } = json;\n        const queryContext = result.query_context;\n        const formData = JSON.parse(queryContext).form_data;\n        const dataObject = {\n          data: {\n            ...formData,\n            groupby: (_formData$groupby = formData.groupby) == null ? void 0 : _formData$groupby.map((column) => getColumnLabel(column))\n          }\n        };\n        this.setState({\n          slice: dataObject\n        });\n      });\n    };const { name, annotationType: _annotationType, sourceType: _sourceType, color, opacity, style, width, showMarkers, hideLine, value, overrides, show, showLabel, titleColumn, descriptionColumns, timeColumn, intervalEndColumn, vizType } = props; // Only allow override whole time_range\n    if ('since' in overrides || 'until' in overrides) {overrides.time_range = null;delete overrides.since;delete overrides.until;} // Check if annotationType is supported by this chart\n    const _metadata = getChartMetadataRegistry().get(vizType);const supportedAnnotationTypes = (_metadata == null ? void 0 : _metadata.supportedAnnotationTypes) || [];const validAnnotationType = supportedAnnotationTypes.includes(_annotationType) ? _annotationType : supportedAnnotationTypes[0];this.state = { // base\n      name, annotationType: validAnnotationType, sourceType: _sourceType, value, overrides, show, showLabel, // slice\n      titleColumn, descriptionColumns, timeColumn, intervalEndColumn, // display\n      color: color || AUTOMATIC_COLOR, opacity, style, width, showMarkers, hideLine, // refData\n      isNew: !name, slice: null };this.submitAnnotation = this.submitAnnotation.bind(this);this.deleteAnnotation = this.deleteAnnotation.bind(this);this.applyAnnotation = this.applyAnnotation.bind(this);this.isValidForm = this.isValidForm.bind(this); // Handlers\n    this.handleAnnotationType = this.handleAnnotationType.bind(this);this.handleAnnotationSourceType = this.handleAnnotationSourceType.bind(this);this.handleSelectValue = this.handleSelectValue.bind(this);this.handleTextValue = this.handleTextValue.bind(this); // Fetch related functions\n    this.fetchOptions = this.fetchOptions.bind(this);this.fetchCharts = this.fetchCharts.bind(this);this.fetchNativeAnnotations = this.fetchNativeAnnotations.bind(this);this.fetchAppliedAnnotation = this.fetchAppliedAnnotation.bind(this);this.fetchSliceData = this.fetchSliceData.bind(this);this.shouldFetchSliceData = this.shouldFetchSliceData.bind(this);this.fetchAppliedChart = this.fetchAppliedChart.bind(this);this.fetchAppliedNativeAnnotation = this.fetchAppliedNativeAnnotation.bind(this);this.shouldFetchAppliedAnnotation = this.shouldFetchAppliedAnnotation.bind(this);}componentDidMount() {if (this.shouldFetchAppliedAnnotation()) {const { value } = this.state; /* The value prop is the id of the chart/native. This function will set\n      value in state to an object with the id as value.value to be used by\n      AsyncSelect */this.fetchAppliedAnnotation(value);}}componentDidUpdate(prevProps, prevState) {if (this.shouldFetchSliceData(prevState)) {const { value } = this.state;this.fetchSliceData(value.value);}}getSupportedSourceTypes(annotationType) {var _ANNOTATION_TYPES_MET; // Get vis types that can be source.\n    const sources = getChartMetadataRegistry().entries().filter(({ value: chartMetadata }) => chartMetadata.canBeAnnotationType(annotationType)).map(({ key, value: chartMetadata }) => ({ value: key, label: chartMetadata.name })); // Prepend native source if applicable\n    if ((_ANNOTATION_TYPES_MET = ANNOTATION_TYPES_METADATA[annotationType]) != null && _ANNOTATION_TYPES_MET.supportNativeSource) {sources.unshift(ANNOTATION_SOURCE_TYPES_METADATA.NATIVE);}return sources;}shouldFetchAppliedAnnotation() {const { value, sourceType } = this.state;return value && requiresQuery(sourceType);}shouldFetchSliceData(prevState) {const { value, sourceType } = this.state;const isChart = sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && requiresQuery(sourceType);const valueIsNew = value && prevState.value !== value;return valueIsNew && isChart;}isValidFormulaAnnotation(expression, annotationType) {if (annotationType === ANNOTATION_TYPES.FORMULA) {return isValidExpression(expression);}return true;}isValidForm() {const { name, annotationType, sourceType, value, timeColumn, intervalEndColumn } = this.state;const errors = [validateNonEmpty(name), validateNonEmpty(annotationType), validateNonEmpty(value)];if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE) {if (annotationType === ANNOTATION_TYPES.EVENT) {errors.push(validateNonEmpty(timeColumn));}if (annotationType === ANNOTATION_TYPES.INTERVAL) {errors.push(validateNonEmpty(timeColumn));errors.push(validateNonEmpty(intervalEndColumn));}}errors.push(!this.isValidFormulaAnnotation(value, annotationType));return !errors.filter((x) => x).length;}handleAnnotationType(annotationType) {this.setState({ annotationType, sourceType: null, value: null, slice: null });}handleAnnotationSourceType(sourceType) {const { sourceType: prevSourceType } = this.state;if (prevSourceType !== sourceType) {this.setState({ sourceType, value: null, slice: null });}}handleSelectValue(selectedValueObject) {this.setState({ value: selectedValueObject, descriptionColumns: [], intervalEndColumn: null, timeColumn: null, titleColumn: null, overrides: { time_range: null } });}handleTextValue(inputValue) {this.setState({ value: inputValue });}fetchAppliedChart(id) {const { annotationType } = this.state;const registry = getChartMetadataRegistry();const queryParams = rison.encode({ columns: ['slice_name', 'query_context', 'viz_type'] });SupersetClient.get({ endpoint: `/api/v1/chart/${id}?q=${queryParams}` }).then(({ json }) => {const { result } = json;const sliceName = result.slice_name;\n        const queryContext = result.query_context;\n        const vizType = result.viz_type;\n        const formData = JSON.parse(queryContext).form_data;\n        const metadata = registry.get(vizType);\n        const canBeAnnotationType =\n        metadata && metadata.canBeAnnotationType(annotationType);\n        if (canBeAnnotationType) {var _formData$groupby2;\n          this.setState({\n            value: {\n              value: id,\n              label: sliceName\n            },\n            slice: {\n              data: {\n                ...formData,\n                groupby: (_formData$groupby2 = formData.groupby) == null ? void 0 : _formData$groupby2.map((column) => getColumnLabel(column))\n              }\n            }\n          });\n        }\n      });\n  }\n\n  fetchAppliedNativeAnnotation(id) {\n    SupersetClient.get({\n      endpoint: `/api/v1/annotation_layer/${id}`\n    }).then(({ json }) => {\n      const { result } = json;\n      const layer = result;\n      this.setState({\n        value: {\n          value: layer.id,\n          label: layer.name\n        }\n      });\n    });\n  }\n\n  fetchAppliedAnnotation(id) {\n    const { sourceType } = this.state;\n\n    if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n      return this.fetchAppliedNativeAnnotation(id);\n    }\n    return this.fetchAppliedChart(id);\n  }\n\n  deleteAnnotation() {\n    this.props.removeAnnotationLayer();\n    this.props.close();\n  }\n\n  applyAnnotation() {\n    const { value, sourceType } = this.state;\n    if (this.isValidForm()) {\n      const annotationFields = [\n      'name',\n      'annotationType',\n      'sourceType',\n      'color',\n      'opacity',\n      'style',\n      'width',\n      'showMarkers',\n      'hideLine',\n      'overrides',\n      'show',\n      'showLabel',\n      'titleColumn',\n      'descriptionColumns',\n      'timeColumn',\n      'intervalEndColumn'];\n\n      const newAnnotation = {};\n      annotationFields.forEach((field) => {\n        if (this.state[field] !== null) {\n          newAnnotation[field] = this.state[field];\n        }\n      });\n\n      // Prepare newAnnotation.value for use in runAnnotationQuery()\n      const applicableValue = requiresQuery(sourceType) ? value.value : value;\n      newAnnotation.value = applicableValue;\n\n      if (newAnnotation.color === AUTOMATIC_COLOR) {\n        newAnnotation.color = null;\n      }\n\n      this.props.addAnnotationLayer(newAnnotation);\n      this.setState({ isNew: false });\n    }\n  }\n\n  submitAnnotation() {\n    this.applyAnnotation();\n    this.props.close();\n  }\n\n  renderChartHeader(label, description, value) {\n    return (\n      _jsx(ControlHeader, {\n        hovered: true,\n        label: label,\n        description: description,\n        validationErrors: !value ? ['Mandatory'] : [] }\n      ));\n\n  }\n\n  renderValueConfiguration() {\n    const { annotationType, sourceType, value } = this.state;\n    let label = '';\n    let description = '';\n    if (requiresQuery(sourceType)) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        label = t('Annotation layer');\n        description = t('Select the Annotation Layer you would like to use.');\n      } else {\n        label = t('Chart');\n        description = t(\n          `Use another existing chart as a source for annotations and overlays.\n          Your chart must be one of these visualization types: [%s]`,\n          this.getSupportedSourceTypes(annotationType).\n          map((x) => x.label).\n          join(', ')\n        );\n      }\n    } else if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      label = t('Formula');\n      description = t(`Expects a formula with depending time parameter 'x'\n        in milliseconds since epoch. mathjs is used to evaluate the formulas.\n        Example: '2x+5'`);\n    }\n    if (requiresQuery(sourceType)) {\n      return (\n        _jsx(AsyncSelect\n        /* key to force re-render on sourceType change */, {\n\n          ariaLabel: t('Annotation layer value'),\n          name: \"annotation-layer-value\",\n          header: this.renderChartHeader(label, description, value),\n          options: this.fetchOptions,\n          value: value || null,\n          onChange: this.handleSelectValue,\n          notFoundContent: _jsx(NotFoundContent, {}) }, sourceType\n        ));\n\n    }\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return (\n        _jsx(TextControl, {\n          name: \"annotation-layer-value\",\n          hovered: true,\n          showHeader: true,\n          description: description,\n          label: label,\n          placeholder: \"\",\n          value: value,\n          onChange: this.handleTextValue,\n          validationErrors:\n          !this.isValidFormulaAnnotation(value, annotationType) ?\n          [t('Bad formula.')] :\n          [] }\n\n        ));\n\n    }\n    return '';\n  }\n\n  renderSliceConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      slice,\n      overrides,\n      titleColumn,\n      timeColumn,\n      intervalEndColumn,\n      descriptionColumns\n    } = this.state;\n\n    if (!slice || !value) {\n      return '';\n    }\n\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && slice) {\n      const columns = (slice.data.groupby || []).\n      concat(slice.data.all_columns || []).\n      map((x) => ({ value: x, label: x }));\n      const timeColumnOptions = slice.data.include_time ?\n      [{ value: '__timestamp', label: '__timestamp' }].concat(columns) :\n      columns;\n      return (\n        _jsx(\"div\", { style: { marginRight: '2rem' }, children:\n          _jsxs(PopoverSection, {\n            isSelected: true,\n            title: t('Annotation Slice Configuration'),\n            info: t(`This section allows you to configure how to use the slice\n              to generate annotations.`), children: [\n\n            (annotationType === ANNOTATION_TYPES.EVENT ||\n            annotationType === ANNOTATION_TYPES.INTERVAL) &&\n            _jsx(SelectControl, {\n              ariaLabel: t('Annotation layer time column'),\n              hovered: true,\n              name: \"annotation-layer-time-column\",\n              label:\n              annotationType === ANNOTATION_TYPES.INTERVAL ?\n              t('Interval start column') :\n              t('Event time column'),\n\n              description: t(\n                'This column must contain date/time information.'\n              ),\n              validationErrors: !timeColumn ? ['Mandatory'] : [],\n              clearable: false,\n              options: timeColumnOptions,\n              value: timeColumn,\n              onChange: (v) => this.setState({ timeColumn: v }) }\n            ),\n\n            annotationType === ANNOTATION_TYPES.INTERVAL &&\n            _jsx(SelectControl, {\n              ariaLabel: t('Annotation layer interval end'),\n              hovered: true,\n              name: \"annotation-layer-intervalEnd\",\n              label: t('Interval End column'),\n              description: t(\n                'This column must contain date/time information.'\n              ),\n              validationErrors: !intervalEndColumn ? ['Mandatory'] : [],\n              options: columns,\n              value: intervalEndColumn,\n              onChange: (value) => this.setState({ intervalEndColumn: value }) }\n            ),\n\n            _jsx(SelectControl, {\n              ariaLabel: t('Annotation layer title column'),\n              hovered: true,\n              name: \"annotation-layer-title\",\n              label: t('Title Column'),\n              description: t('Pick a title for you annotation.'),\n              options: [{ value: '', label: t('None') }].concat(columns),\n              value: titleColumn,\n              onChange: (value) => this.setState({ titleColumn: value }) }\n            ),\n            annotationType !== ANNOTATION_TYPES.TIME_SERIES &&\n            _jsx(SelectControl, {\n              ariaLabel: t('Annotation layer description columns'),\n              hovered: true,\n              name: \"annotation-layer-title\",\n              label: t('Description Columns'),\n              description: t(\n                \"Pick one or more columns that should be shown in the annotation. If you don't select a column all of them will be shown.\"\n              ),\n              multi: true,\n              options: columns,\n              value: descriptionColumns,\n              onChange: (value) => this.setState({ descriptionColumns: value }) }\n            ),\n\n            _jsxs(\"div\", { style: { marginTop: '1rem' }, children: [\n              _jsx(CheckboxControl, {\n                hovered: true,\n                name: \"annotation-override-time_range\",\n                label: t('Override time range'),\n                description: t(`This controls whether the \"time_range\" field from the current\n                  view should be passed down to the chart containing the annotation data.`),\n                value: 'time_range' in overrides,\n                onChange: (v) => {\n                  delete overrides.time_range;\n                  if (v) {\n                    this.setState({\n                      overrides: { ...overrides, time_range: null }\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                } }\n              ),\n              _jsx(CheckboxControl, {\n                hovered: true,\n                name: \"annotation-override-timegrain\",\n                label: t('Override time grain'),\n                description: t(`This controls whether the time grain field from the current\n                  view should be passed down to the chart containing the annotation data.`),\n                value: 'time_grain_sqla' in overrides,\n                onChange: (v) => {\n                  delete overrides.time_grain_sqla;\n                  delete overrides.granularity;\n                  if (v) {\n                    this.setState({\n                      overrides: {\n                        ...overrides,\n                        time_grain_sqla: null,\n                        granularity: null\n                      }\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                } }\n              ),\n              _jsx(TextControl, {\n                hovered: true,\n                name: \"annotation-layer-timeshift\",\n                label: t('Time Shift'),\n                description: t(`Time delta in natural language\n                  (example:  24 hours, 7 days, 56 weeks, 365 days)`),\n                placeholder: \"\",\n                value: overrides.time_shift,\n                onChange: (v) =>\n                this.setState({ overrides: { ...overrides, time_shift: v } }) }\n\n              )] }\n            )] }\n          ) }\n        ));\n\n    }\n    return '';\n  }\n\n  renderDisplayConfiguration() {\n    const {\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      annotationType\n    } = this.state;\n    const colorScheme = getCategoricalSchemeRegistry().\n    get(this.props.colorScheme).\n    colors.concat();\n    if (\n    color &&\n    color !== AUTOMATIC_COLOR &&\n    !colorScheme.find((x) => x.toLowerCase() === color.toLowerCase()))\n    {\n      colorScheme.push(color);\n    }\n    return (\n      _jsxs(PopoverSection, {\n        isSelected: true,\n        title: t('Display configuration'),\n        info: t('Configure your how you overlay is displayed here.'), children: [\n\n        _jsx(SelectControl, {\n          ariaLabel: t('Annotation layer stroke'),\n          name: \"annotation-layer-stroke\",\n          label: t('Style')\n          // see '../../../visualizations/nvd3_vis.css'\n          , options: [\n          { value: 'solid', label: t('Solid') },\n          { value: 'dashed', label: t('Dashed') },\n          { value: 'longDashed', label: t('Long dashed') },\n          { value: 'dotted', label: t('Dotted') }],\n\n          value: style,\n          clearable: false,\n          onChange: (v) => this.setState({ style: v }) }\n        ),\n        _jsx(SelectControl, {\n          ariaLabel: t('Annotation layer opacity'),\n          name: \"annotation-layer-opacity\",\n          label: t('Opacity')\n          // see '../../../visualizations/nvd3_vis.css'\n          , options: [\n          { value: '', label: t('Solid') },\n          { value: 'opacityLow', label: '0.2' },\n          { value: 'opacityMedium', label: '0.5' },\n          { value: 'opacityHigh', label: '0.8' }],\n\n          value: opacity,\n          onChange: (value) => this.setState({ opacity: value }) }\n        ),\n        _jsxs(\"div\", { children: [\n          _jsx(ControlHeader, { label: t('Color') }),\n          _jsxs(\"div\", { style: { display: 'flex', flexDirection: 'column' }, children: [\n            _jsx(CompactPicker, {\n              color: color,\n              colors: colorScheme,\n              onChangeComplete: (v) => this.setState({ color: v.hex }) }\n            ),\n            _jsx(Button, {\n              style: { marginTop: '0.5rem', marginBottom: '0.5rem' },\n              buttonStyle: color === AUTOMATIC_COLOR ? 'success' : 'default',\n              buttonSize: \"xsmall\",\n              onClick: () => this.setState({ color: AUTOMATIC_COLOR }), children:\n\n              t('Automatic Color') }\n            )] }\n          )] }\n        ),\n        _jsx(TextControl, {\n          name: \"annotation-layer-stroke-width\",\n          label: t('Line width'),\n          isInt: true,\n          value: width,\n          onChange: (v) => this.setState({ width: v }) }\n        ),\n        annotationType === ANNOTATION_TYPES.TIME_SERIES &&\n        _jsx(CheckboxControl, {\n          hovered: true,\n          name: \"annotation-layer-show-markers\",\n          label: t('Show Markers'),\n          description: t('Shows or hides markers for the time series'),\n          value: showMarkers,\n          onChange: (v) => this.setState({ showMarkers: v }) }\n        ),\n\n        annotationType === ANNOTATION_TYPES.TIME_SERIES &&\n        _jsx(CheckboxControl, {\n          hovered: true,\n          name: \"annotation-layer-hide-line\",\n          label: t('Hide Line'),\n          description: t('Hides the Line for the time series'),\n          value: hideLine,\n          onChange: (v) => this.setState({ hideLine: v }) }\n        )] }\n\n      ));\n\n  }\n\n  render() {\n    const { isNew, name, annotationType, sourceType, show, showLabel } =\n    this.state;\n    const isValid = this.isValidForm();\n    const metadata = getChartMetadataRegistry().get(this.props.vizType);\n    const supportedAnnotationTypes = metadata ?\n    metadata.supportedAnnotationTypes.map(\n      (type) => ANNOTATION_TYPES_METADATA[type]\n    ) :\n    [];\n    const supportedSourceTypes = this.getSupportedSourceTypes(annotationType);\n\n    return (\n      _jsxs(_Fragment, { children: [\n        this.props.error &&\n        _jsxs(\"span\", { style: { color: this.props.theme.colors.error.base }, children: [\"ERROR: \",\n          this.props.error] }\n        ),\n\n        _jsxs(\"div\", { style: { display: 'flex', flexDirection: 'row' }, children: [\n          _jsx(\"div\", { style: { marginRight: '2rem' }, children:\n            _jsxs(PopoverSection, {\n              isSelected: true,\n              title: t('Layer configuration'),\n              info: t('Configure the basics of your Annotation Layer.'), children: [\n\n              _jsx(TextControl, {\n                name: \"annotation-layer-name\",\n                label: t('Name'),\n                placeholder: \"\",\n                value: name,\n                onChange: (v) => this.setState({ name: v }),\n                validationErrors: !name ? [t('Mandatory')] : [] }\n              ),\n              _jsx(CheckboxControl, {\n                name: \"annotation-layer-hide\",\n                label: t('Hide layer'),\n                value: !show,\n                onChange: (v) => this.setState({ show: !v }) }\n              ),\n              _jsx(CheckboxControl, {\n                name: \"annotation-label-show\",\n                label: t('Show label'),\n                value: showLabel,\n                hovered: true,\n                description: t('Whether to always show the annotation label'),\n                onChange: (v) => this.setState({ showLabel: v }) }\n              ),\n              _jsx(SelectControl, {\n                ariaLabel: t('Annotation layer type'),\n                hovered: true,\n                description: t('Choose the annotation layer type'),\n                label: t('Annotation layer type'),\n                name: \"annotation-layer-type\",\n                clearable: false,\n                options: supportedAnnotationTypes,\n                value: annotationType,\n                onChange: this.handleAnnotationType }\n              ),\n              supportedSourceTypes.length > 0 &&\n              _jsx(SelectControl, {\n                ariaLabel: t('Annotation source type'),\n                hovered: true,\n                description: t('Choose the source of your annotations'),\n                label: t('Annotation source'),\n                name: \"annotation-source-type\",\n                options: supportedSourceTypes,\n                notFoundContent: _jsx(NotFoundContent, {}),\n                value: sourceType,\n                onChange: this.handleAnnotationSourceType,\n                validationErrors: !sourceType ? [t('Mandatory')] : [] }\n              ),\n\n              this.renderValueConfiguration()] }\n            ) }\n          ),\n          this.renderSliceConfiguration(),\n          this.renderDisplayConfiguration()] }\n        ),\n        _jsxs(\"div\", { style: { display: 'flex', justifyContent: 'space-between' }, children: [\n          isNew ?\n          _jsx(Button, { buttonSize: \"small\", onClick: () => this.props.close(), children:\n            t('Cancel') }\n          ) :\n\n          _jsx(Button, { buttonSize: \"small\", onClick: this.deleteAnnotation, children:\n            t('Remove') }\n          ),\n\n          _jsxs(\"div\", { children: [\n            _jsx(Button, {\n              buttonSize: \"small\",\n              disabled: !isValid,\n              onClick: this.applyAnnotation, children:\n\n              t('Apply') }\n            ),\n\n            _jsx(Button, {\n              buttonSize: \"small\",\n              buttonStyle: \"primary\",\n              disabled: !isValid,\n              onClick: this.submitAnnotation, children:\n\n              t('OK') }\n            )] }\n          )] }\n        )] }\n      ));\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nAnnotationLayer.propTypes = propTypes;\nAnnotationLayer.defaultProps = defaultProps;const _default =\n\nwithTheme(AnnotationLayer);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(AUTOMATIC_COLOR, \"AUTOMATIC_COLOR\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx\");reactHotLoader.register(NotFoundContentWrapper, \"NotFoundContentWrapper\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx\");reactHotLoader.register(NotFoundContent, \"NotFoundContent\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx\");reactHotLoader.register(AnnotationLayer, \"AnnotationLayer\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["PureComponent","rison","PropTypes","CompactPicker","Button","t","SupersetClient","getCategoricalSchemeRegistry","getChartMetadataRegistry","validateNonEmpty","isValidExpression","styled","getColumnLabel","withTheme","SelectControl","AsyncSelect","TextControl","CheckboxControl","PopoverSection","ControlHeader","EmptyStateSmall","ANNOTATION_SOURCE_TYPES","ANNOTATION_TYPES","ANNOTATION_TYPES_METADATA","DEFAULT_ANNOTATION_TYPE","requiresQuery","ANNOTATION_SOURCE_TYPES_METADATA","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","AUTOMATIC_COLOR","propTypes","name","string","annotationType","sourceType","color","opacity","style","width","number","showMarkers","bool","hideLine","value","oneOfType","overrides","object","show","showLabel","titleColumn","descriptionColumns","arrayOf","timeColumn","intervalEndColumn","vizType","error","colorScheme","addAnnotationLayer","func","removeAnnotationLayer","close","defaultProps","NotFoundContentWrapper","div","NotFoundContent","children","title","description","href","target","rel","image","AnnotationLayer","constructor","props","fetchNativeAnnotations","search","page","pageSize","queryParams","encode","filters","col","opr","columns","page_size","json","get","endpoint","result","count","layersArray","map","layer","id","label","data","totalCount","fetchCharts","state","order_column","order_direction","registry","chartsArray","filter","chart","metadata","viz_type","canBeAnnotationType","slice_name","fetchOptions","NATIVE","fetchSliceData","then","_formData$groupby","queryContext","query_context","formData","JSON","parse","form_data","dataObject","groupby","column","setState","slice","time_range","since","until","supportedAnnotationTypes","validAnnotationType","includes","isNew","submitAnnotation","bind","deleteAnnotation","applyAnnotation","isValidForm","handleAnnotationType","handleAnnotationSourceType","handleSelectValue","handleTextValue","fetchAppliedAnnotation","shouldFetchSliceData","fetchAppliedChart","fetchAppliedNativeAnnotation","shouldFetchAppliedAnnotation","componentDidMount","componentDidUpdate","prevProps","prevState","getSupportedSourceTypes","_ANNOTATION_TYPES_MET","sources","entries","chartMetadata","key","supportNativeSource","unshift","isChart","valueIsNew","isValidFormulaAnnotation","expression","FORMULA","errors","EVENT","push","INTERVAL","x","length","prevSourceType","selectedValueObject","inputValue","sliceName","_formData$groupby2","annotationFields","newAnnotation","forEach","field","applicableValue","renderChartHeader","hovered","validationErrors","renderValueConfiguration","join","ariaLabel","header","options","onChange","notFoundContent","showHeader","placeholder","renderSliceConfiguration","concat","all_columns","timeColumnOptions","include_time","marginRight","isSelected","info","clearable","v","TIME_SERIES","multi","marginTop","time_grain_sqla","granularity","time_shift","renderDisplayConfiguration","colors","find","toLowerCase","display","flexDirection","onChangeComplete","hex","marginBottom","buttonStyle","buttonSize","onClick","isInt","render","isValid","type","supportedSourceTypes","theme","base","justifyContent","disabled","__reactstandin__regenerateByEval","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport rison from 'rison';\nimport PropTypes from 'prop-types';\nimport { CompactPicker } from 'react-color';\nimport Button from 'src/components/Button';\nimport {\n  t,\n  SupersetClient,\n  getCategoricalSchemeRegistry,\n  getChartMetadataRegistry,\n  validateNonEmpty,\n  isValidExpression,\n  styled,\n  getColumnLabel,\n  withTheme,\n} from '@superset-ui/core';\nimport SelectControl from 'src/explore/components/controls/SelectControl';\nimport { AsyncSelect } from 'src/components';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport PopoverSection from 'src/components/PopoverSection';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport {\n  ANNOTATION_SOURCE_TYPES,\n  ANNOTATION_TYPES,\n  ANNOTATION_TYPES_METADATA,\n  DEFAULT_ANNOTATION_TYPE,\n  requiresQuery,\n  ANNOTATION_SOURCE_TYPES_METADATA,\n} from './AnnotationTypes';\n\nconst AUTOMATIC_COLOR = '';\n\nconst propTypes = {\n  name: PropTypes.string,\n  annotationType: PropTypes.string,\n  sourceType: PropTypes.string,\n  color: PropTypes.string,\n  opacity: PropTypes.string,\n  style: PropTypes.string,\n  width: PropTypes.number,\n  showMarkers: PropTypes.bool,\n  hideLine: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  overrides: PropTypes.object,\n  show: PropTypes.bool,\n  showLabel: PropTypes.bool,\n  titleColumn: PropTypes.string,\n  descriptionColumns: PropTypes.arrayOf(PropTypes.string),\n  timeColumn: PropTypes.string,\n  intervalEndColumn: PropTypes.string,\n  vizType: PropTypes.string,\n\n  error: PropTypes.string,\n  colorScheme: PropTypes.string,\n\n  addAnnotationLayer: PropTypes.func,\n  removeAnnotationLayer: PropTypes.func,\n  close: PropTypes.func,\n};\n\nconst defaultProps = {\n  name: '',\n  annotationType: DEFAULT_ANNOTATION_TYPE,\n  sourceType: '',\n  color: AUTOMATIC_COLOR,\n  opacity: '',\n  style: 'solid',\n  width: 1,\n  showMarkers: false,\n  hideLine: false,\n  overrides: {},\n  colorScheme: 'd3Category10',\n  show: true,\n  showLabel: false,\n  titleColumn: '',\n  descriptionColumns: [],\n  timeColumn: '',\n  intervalEndColumn: '',\n\n  addAnnotationLayer: () => {},\n  removeAnnotationLayer: () => {},\n  close: () => {},\n};\n\nconst NotFoundContentWrapper = styled.div`\n  && > div:first-child {\n    padding-left: 0;\n    padding-right: 0;\n  }\n`;\n\nconst NotFoundContent = () => (\n  <NotFoundContentWrapper>\n    <EmptyStateSmall\n      title={t('No annotation layers')}\n      description={\n        <span>\n          {t('Add an annotation layer')}{' '}\n          <a\n            href=\"/annotationlayer/list\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {t('here')}\n          </a>\n          .\n        </span>\n      }\n      image=\"empty.svg\"\n    />\n  </NotFoundContentWrapper>\n);\n\nclass AnnotationLayer extends PureComponent {\n  constructor(props) {\n    super(props);\n    const {\n      name,\n      annotationType,\n      sourceType,\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      value,\n      overrides,\n      show,\n      showLabel,\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      vizType,\n    } = props;\n\n    // Only allow override whole time_range\n    if ('since' in overrides || 'until' in overrides) {\n      overrides.time_range = null;\n      delete overrides.since;\n      delete overrides.until;\n    }\n\n    // Check if annotationType is supported by this chart\n    const metadata = getChartMetadataRegistry().get(vizType);\n    const supportedAnnotationTypes = metadata?.supportedAnnotationTypes || [];\n    const validAnnotationType = supportedAnnotationTypes.includes(\n      annotationType,\n    )\n      ? annotationType\n      : supportedAnnotationTypes[0];\n\n    this.state = {\n      // base\n      name,\n      annotationType: validAnnotationType,\n      sourceType,\n      value,\n      overrides,\n      show,\n      showLabel,\n      // slice\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      // display\n      color: color || AUTOMATIC_COLOR,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      // refData\n      isNew: !name,\n      slice: null,\n    };\n    this.submitAnnotation = this.submitAnnotation.bind(this);\n    this.deleteAnnotation = this.deleteAnnotation.bind(this);\n    this.applyAnnotation = this.applyAnnotation.bind(this);\n    this.isValidForm = this.isValidForm.bind(this);\n    // Handlers\n    this.handleAnnotationType = this.handleAnnotationType.bind(this);\n    this.handleAnnotationSourceType =\n      this.handleAnnotationSourceType.bind(this);\n    this.handleSelectValue = this.handleSelectValue.bind(this);\n    this.handleTextValue = this.handleTextValue.bind(this);\n    // Fetch related functions\n    this.fetchOptions = this.fetchOptions.bind(this);\n    this.fetchCharts = this.fetchCharts.bind(this);\n    this.fetchNativeAnnotations = this.fetchNativeAnnotations.bind(this);\n    this.fetchAppliedAnnotation = this.fetchAppliedAnnotation.bind(this);\n    this.fetchSliceData = this.fetchSliceData.bind(this);\n    this.shouldFetchSliceData = this.shouldFetchSliceData.bind(this);\n    this.fetchAppliedChart = this.fetchAppliedChart.bind(this);\n    this.fetchAppliedNativeAnnotation =\n      this.fetchAppliedNativeAnnotation.bind(this);\n    this.shouldFetchAppliedAnnotation =\n      this.shouldFetchAppliedAnnotation.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.shouldFetchAppliedAnnotation()) {\n      const { value } = this.state;\n      /* The value prop is the id of the chart/native. This function will set\n      value in state to an object with the id as value.value to be used by\n      AsyncSelect */\n      this.fetchAppliedAnnotation(value);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.shouldFetchSliceData(prevState)) {\n      const { value } = this.state;\n      this.fetchSliceData(value.value);\n    }\n  }\n\n  getSupportedSourceTypes(annotationType) {\n    // Get vis types that can be source.\n    const sources = getChartMetadataRegistry()\n      .entries()\n      .filter(({ value: chartMetadata }) =>\n        chartMetadata.canBeAnnotationType(annotationType),\n      )\n      .map(({ key, value: chartMetadata }) => ({\n        value: key,\n        label: chartMetadata.name,\n      }));\n    // Prepend native source if applicable\n    if (ANNOTATION_TYPES_METADATA[annotationType]?.supportNativeSource) {\n      sources.unshift(ANNOTATION_SOURCE_TYPES_METADATA.NATIVE);\n    }\n    return sources;\n  }\n\n  shouldFetchAppliedAnnotation() {\n    const { value, sourceType } = this.state;\n    return value && requiresQuery(sourceType);\n  }\n\n  shouldFetchSliceData(prevState) {\n    const { value, sourceType } = this.state;\n    const isChart =\n      sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE &&\n      requiresQuery(sourceType);\n    const valueIsNew = value && prevState.value !== value;\n    return valueIsNew && isChart;\n  }\n\n  isValidFormulaAnnotation(expression, annotationType) {\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return isValidExpression(expression);\n    }\n    return true;\n  }\n\n  isValidForm() {\n    const {\n      name,\n      annotationType,\n      sourceType,\n      value,\n      timeColumn,\n      intervalEndColumn,\n    } = this.state;\n    const errors = [\n      validateNonEmpty(name),\n      validateNonEmpty(annotationType),\n      validateNonEmpty(value),\n    ];\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE) {\n      if (annotationType === ANNOTATION_TYPES.EVENT) {\n        errors.push(validateNonEmpty(timeColumn));\n      }\n      if (annotationType === ANNOTATION_TYPES.INTERVAL) {\n        errors.push(validateNonEmpty(timeColumn));\n        errors.push(validateNonEmpty(intervalEndColumn));\n      }\n    }\n    errors.push(!this.isValidFormulaAnnotation(value, annotationType));\n    return !errors.filter(x => x).length;\n  }\n\n  handleAnnotationType(annotationType) {\n    this.setState({\n      annotationType,\n      sourceType: null,\n      value: null,\n      slice: null,\n    });\n  }\n\n  handleAnnotationSourceType(sourceType) {\n    const { sourceType: prevSourceType } = this.state;\n\n    if (prevSourceType !== sourceType) {\n      this.setState({\n        sourceType,\n        value: null,\n        slice: null,\n      });\n    }\n  }\n\n  handleSelectValue(selectedValueObject) {\n    this.setState({\n      value: selectedValueObject,\n      descriptionColumns: [],\n      intervalEndColumn: null,\n      timeColumn: null,\n      titleColumn: null,\n      overrides: { time_range: null },\n    });\n  }\n\n  handleTextValue(inputValue) {\n    this.setState({\n      value: inputValue,\n    });\n  }\n\n  fetchNativeAnnotations = async (search, page, pageSize) => {\n    const queryParams = rison.encode({\n      filters: [\n        {\n          col: 'name',\n          opr: 'ct',\n          value: search,\n        },\n      ],\n      columns: ['id', 'name'],\n      page,\n      page_size: pageSize,\n    });\n\n    const { json } = await SupersetClient.get({\n      endpoint: `/api/v1/annotation_layer/?q=${queryParams}`,\n    });\n\n    const { result, count } = json;\n\n    const layersArray = result.map(layer => ({\n      value: layer.id,\n      label: layer.name,\n    }));\n\n    return {\n      data: layersArray,\n      totalCount: count,\n    };\n  };\n\n  fetchCharts = async (search, page, pageSize) => {\n    const { annotationType } = this.state;\n\n    const queryParams = rison.encode({\n      filters: [\n        { col: 'slice_name', opr: 'chart_all_text', value: search },\n        {\n          col: 'id',\n          opr: 'chart_owned_created_favored_by_me',\n          value: true,\n        },\n      ],\n      columns: ['id', 'slice_name', 'viz_type'],\n      order_column: 'slice_name',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n    });\n    const { json } = await SupersetClient.get({\n      endpoint: `/api/v1/chart/?q=${queryParams}`,\n    });\n\n    const { result, count } = json;\n    const registry = getChartMetadataRegistry();\n\n    const chartsArray = result\n      .filter(chart => {\n        const metadata = registry.get(chart.viz_type);\n        return metadata && metadata.canBeAnnotationType(annotationType);\n      })\n      .map(chart => ({\n        value: chart.id,\n        label: chart.slice_name,\n        viz_type: chart.viz_type,\n      }));\n\n    return {\n      data: chartsArray,\n      totalCount: count,\n    };\n  };\n\n  fetchOptions = (search, page, pageSize) => {\n    const { sourceType } = this.state;\n\n    if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n      return this.fetchNativeAnnotations(search, page, pageSize);\n    }\n    return this.fetchCharts(search, page, pageSize);\n  };\n\n  fetchSliceData = id => {\n    const queryParams = rison.encode({\n      columns: ['query_context'],\n    });\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${id}?q=${queryParams}`,\n    }).then(({ json }) => {\n      const { result } = json;\n      const queryContext = result.query_context;\n      const formData = JSON.parse(queryContext).form_data;\n      const dataObject = {\n        data: {\n          ...formData,\n          groupby: formData.groupby?.map(column => getColumnLabel(column)),\n        },\n      };\n      this.setState({\n        slice: dataObject,\n      });\n    });\n  };\n\n  fetchAppliedChart(id) {\n    const { annotationType } = this.state;\n    const registry = getChartMetadataRegistry();\n    const queryParams = rison.encode({\n      columns: ['slice_name', 'query_context', 'viz_type'],\n    });\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${id}?q=${queryParams}`,\n    }).then(({ json }) => {\n      const { result } = json;\n      const sliceName = result.slice_name;\n      const queryContext = result.query_context;\n      const vizType = result.viz_type;\n      const formData = JSON.parse(queryContext).form_data;\n      const metadata = registry.get(vizType);\n      const canBeAnnotationType =\n        metadata && metadata.canBeAnnotationType(annotationType);\n      if (canBeAnnotationType) {\n        this.setState({\n          value: {\n            value: id,\n            label: sliceName,\n          },\n          slice: {\n            data: {\n              ...formData,\n              groupby: formData.groupby?.map(column => getColumnLabel(column)),\n            },\n          },\n        });\n      }\n    });\n  }\n\n  fetchAppliedNativeAnnotation(id) {\n    SupersetClient.get({\n      endpoint: `/api/v1/annotation_layer/${id}`,\n    }).then(({ json }) => {\n      const { result } = json;\n      const layer = result;\n      this.setState({\n        value: {\n          value: layer.id,\n          label: layer.name,\n        },\n      });\n    });\n  }\n\n  fetchAppliedAnnotation(id) {\n    const { sourceType } = this.state;\n\n    if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n      return this.fetchAppliedNativeAnnotation(id);\n    }\n    return this.fetchAppliedChart(id);\n  }\n\n  deleteAnnotation() {\n    this.props.removeAnnotationLayer();\n    this.props.close();\n  }\n\n  applyAnnotation() {\n    const { value, sourceType } = this.state;\n    if (this.isValidForm()) {\n      const annotationFields = [\n        'name',\n        'annotationType',\n        'sourceType',\n        'color',\n        'opacity',\n        'style',\n        'width',\n        'showMarkers',\n        'hideLine',\n        'overrides',\n        'show',\n        'showLabel',\n        'titleColumn',\n        'descriptionColumns',\n        'timeColumn',\n        'intervalEndColumn',\n      ];\n      const newAnnotation = {};\n      annotationFields.forEach(field => {\n        if (this.state[field] !== null) {\n          newAnnotation[field] = this.state[field];\n        }\n      });\n\n      // Prepare newAnnotation.value for use in runAnnotationQuery()\n      const applicableValue = requiresQuery(sourceType) ? value.value : value;\n      newAnnotation.value = applicableValue;\n\n      if (newAnnotation.color === AUTOMATIC_COLOR) {\n        newAnnotation.color = null;\n      }\n\n      this.props.addAnnotationLayer(newAnnotation);\n      this.setState({ isNew: false });\n    }\n  }\n\n  submitAnnotation() {\n    this.applyAnnotation();\n    this.props.close();\n  }\n\n  renderChartHeader(label, description, value) {\n    return (\n      <ControlHeader\n        hovered\n        label={label}\n        description={description}\n        validationErrors={!value ? ['Mandatory'] : []}\n      />\n    );\n  }\n\n  renderValueConfiguration() {\n    const { annotationType, sourceType, value } = this.state;\n    let label = '';\n    let description = '';\n    if (requiresQuery(sourceType)) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        label = t('Annotation layer');\n        description = t('Select the Annotation Layer you would like to use.');\n      } else {\n        label = t('Chart');\n        description = t(\n          `Use another existing chart as a source for annotations and overlays.\n          Your chart must be one of these visualization types: [%s]`,\n          this.getSupportedSourceTypes(annotationType)\n            .map(x => x.label)\n            .join(', '),\n        );\n      }\n    } else if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      label = t('Formula');\n      description = t(`Expects a formula with depending time parameter 'x'\n        in milliseconds since epoch. mathjs is used to evaluate the formulas.\n        Example: '2x+5'`);\n    }\n    if (requiresQuery(sourceType)) {\n      return (\n        <AsyncSelect\n          /* key to force re-render on sourceType change */\n          key={sourceType}\n          ariaLabel={t('Annotation layer value')}\n          name=\"annotation-layer-value\"\n          header={this.renderChartHeader(label, description, value)}\n          options={this.fetchOptions}\n          value={value || null}\n          onChange={this.handleSelectValue}\n          notFoundContent={<NotFoundContent />}\n        />\n      );\n    }\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return (\n        <TextControl\n          name=\"annotation-layer-value\"\n          hovered\n          showHeader\n          description={description}\n          label={label}\n          placeholder=\"\"\n          value={value}\n          onChange={this.handleTextValue}\n          validationErrors={\n            !this.isValidFormulaAnnotation(value, annotationType)\n              ? [t('Bad formula.')]\n              : []\n          }\n        />\n      );\n    }\n    return '';\n  }\n\n  renderSliceConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      slice,\n      overrides,\n      titleColumn,\n      timeColumn,\n      intervalEndColumn,\n      descriptionColumns,\n    } = this.state;\n\n    if (!slice || !value) {\n      return '';\n    }\n\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && slice) {\n      const columns = (slice.data.groupby || [])\n        .concat(slice.data.all_columns || [])\n        .map(x => ({ value: x, label: x }));\n      const timeColumnOptions = slice.data.include_time\n        ? [{ value: '__timestamp', label: '__timestamp' }].concat(columns)\n        : columns;\n      return (\n        <div style={{ marginRight: '2rem' }}>\n          <PopoverSection\n            isSelected\n            title={t('Annotation Slice Configuration')}\n            info={t(`This section allows you to configure how to use the slice\n              to generate annotations.`)}\n          >\n            {(annotationType === ANNOTATION_TYPES.EVENT ||\n              annotationType === ANNOTATION_TYPES.INTERVAL) && (\n              <SelectControl\n                ariaLabel={t('Annotation layer time column')}\n                hovered\n                name=\"annotation-layer-time-column\"\n                label={\n                  annotationType === ANNOTATION_TYPES.INTERVAL\n                    ? t('Interval start column')\n                    : t('Event time column')\n                }\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!timeColumn ? ['Mandatory'] : []}\n                clearable={false}\n                options={timeColumnOptions}\n                value={timeColumn}\n                onChange={v => this.setState({ timeColumn: v })}\n              />\n            )}\n            {annotationType === ANNOTATION_TYPES.INTERVAL && (\n              <SelectControl\n                ariaLabel={t('Annotation layer interval end')}\n                hovered\n                name=\"annotation-layer-intervalEnd\"\n                label={t('Interval End column')}\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!intervalEndColumn ? ['Mandatory'] : []}\n                options={columns}\n                value={intervalEndColumn}\n                onChange={value => this.setState({ intervalEndColumn: value })}\n              />\n            )}\n            <SelectControl\n              ariaLabel={t('Annotation layer title column')}\n              hovered\n              name=\"annotation-layer-title\"\n              label={t('Title Column')}\n              description={t('Pick a title for you annotation.')}\n              options={[{ value: '', label: t('None') }].concat(columns)}\n              value={titleColumn}\n              onChange={value => this.setState({ titleColumn: value })}\n            />\n            {annotationType !== ANNOTATION_TYPES.TIME_SERIES && (\n              <SelectControl\n                ariaLabel={t('Annotation layer description columns')}\n                hovered\n                name=\"annotation-layer-title\"\n                label={t('Description Columns')}\n                description={t(\n                  \"Pick one or more columns that should be shown in the annotation. If you don't select a column all of them will be shown.\",\n                )}\n                multi\n                options={columns}\n                value={descriptionColumns}\n                onChange={value => this.setState({ descriptionColumns: value })}\n              />\n            )}\n            <div style={{ marginTop: '1rem' }}>\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-time_range\"\n                label={t('Override time range')}\n                description={t(`This controls whether the \"time_range\" field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_range' in overrides}\n                onChange={v => {\n                  delete overrides.time_range;\n                  if (v) {\n                    this.setState({\n                      overrides: { ...overrides, time_range: null },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-timegrain\"\n                label={t('Override time grain')}\n                description={t(`This controls whether the time grain field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_grain_sqla' in overrides}\n                onChange={v => {\n                  delete overrides.time_grain_sqla;\n                  delete overrides.granularity;\n                  if (v) {\n                    this.setState({\n                      overrides: {\n                        ...overrides,\n                        time_grain_sqla: null,\n                        granularity: null,\n                      },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <TextControl\n                hovered\n                name=\"annotation-layer-timeshift\"\n                label={t('Time Shift')}\n                description={t(`Time delta in natural language\n                  (example:  24 hours, 7 days, 56 weeks, 365 days)`)}\n                placeholder=\"\"\n                value={overrides.time_shift}\n                onChange={v =>\n                  this.setState({ overrides: { ...overrides, time_shift: v } })\n                }\n              />\n            </div>\n          </PopoverSection>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  renderDisplayConfiguration() {\n    const {\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      annotationType,\n    } = this.state;\n    const colorScheme = getCategoricalSchemeRegistry()\n      .get(this.props.colorScheme)\n      .colors.concat();\n    if (\n      color &&\n      color !== AUTOMATIC_COLOR &&\n      !colorScheme.find(x => x.toLowerCase() === color.toLowerCase())\n    ) {\n      colorScheme.push(color);\n    }\n    return (\n      <PopoverSection\n        isSelected\n        title={t('Display configuration')}\n        info={t('Configure your how you overlay is displayed here.')}\n      >\n        <SelectControl\n          ariaLabel={t('Annotation layer stroke')}\n          name=\"annotation-layer-stroke\"\n          label={t('Style')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: 'solid', label: t('Solid') },\n            { value: 'dashed', label: t('Dashed') },\n            { value: 'longDashed', label: t('Long dashed') },\n            { value: 'dotted', label: t('Dotted') },\n          ]}\n          value={style}\n          clearable={false}\n          onChange={v => this.setState({ style: v })}\n        />\n        <SelectControl\n          ariaLabel={t('Annotation layer opacity')}\n          name=\"annotation-layer-opacity\"\n          label={t('Opacity')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: '', label: t('Solid') },\n            { value: 'opacityLow', label: '0.2' },\n            { value: 'opacityMedium', label: '0.5' },\n            { value: 'opacityHigh', label: '0.8' },\n          ]}\n          value={opacity}\n          onChange={value => this.setState({ opacity: value })}\n        />\n        <div>\n          <ControlHeader label={t('Color')} />\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <CompactPicker\n              color={color}\n              colors={colorScheme}\n              onChangeComplete={v => this.setState({ color: v.hex })}\n            />\n            <Button\n              style={{ marginTop: '0.5rem', marginBottom: '0.5rem' }}\n              buttonStyle={color === AUTOMATIC_COLOR ? 'success' : 'default'}\n              buttonSize=\"xsmall\"\n              onClick={() => this.setState({ color: AUTOMATIC_COLOR })}\n            >\n              {t('Automatic Color')}\n            </Button>\n          </div>\n        </div>\n        <TextControl\n          name=\"annotation-layer-stroke-width\"\n          label={t('Line width')}\n          isInt\n          value={width}\n          onChange={v => this.setState({ width: v })}\n        />\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-show-markers\"\n            label={t('Show Markers')}\n            description={t('Shows or hides markers for the time series')}\n            value={showMarkers}\n            onChange={v => this.setState({ showMarkers: v })}\n          />\n        )}\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-hide-line\"\n            label={t('Hide Line')}\n            description={t('Hides the Line for the time series')}\n            value={hideLine}\n            onChange={v => this.setState({ hideLine: v })}\n          />\n        )}\n      </PopoverSection>\n    );\n  }\n\n  render() {\n    const { isNew, name, annotationType, sourceType, show, showLabel } =\n      this.state;\n    const isValid = this.isValidForm();\n    const metadata = getChartMetadataRegistry().get(this.props.vizType);\n    const supportedAnnotationTypes = metadata\n      ? metadata.supportedAnnotationTypes.map(\n          type => ANNOTATION_TYPES_METADATA[type],\n        )\n      : [];\n    const supportedSourceTypes = this.getSupportedSourceTypes(annotationType);\n\n    return (\n      <>\n        {this.props.error && (\n          <span style={{ color: this.props.theme.colors.error.base }}>\n            ERROR: {this.props.error}\n          </span>\n        )}\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ marginRight: '2rem' }}>\n            <PopoverSection\n              isSelected\n              title={t('Layer configuration')}\n              info={t('Configure the basics of your Annotation Layer.')}\n            >\n              <TextControl\n                name=\"annotation-layer-name\"\n                label={t('Name')}\n                placeholder=\"\"\n                value={name}\n                onChange={v => this.setState({ name: v })}\n                validationErrors={!name ? [t('Mandatory')] : []}\n              />\n              <CheckboxControl\n                name=\"annotation-layer-hide\"\n                label={t('Hide layer')}\n                value={!show}\n                onChange={v => this.setState({ show: !v })}\n              />\n              <CheckboxControl\n                name=\"annotation-label-show\"\n                label={t('Show label')}\n                value={showLabel}\n                hovered\n                description={t('Whether to always show the annotation label')}\n                onChange={v => this.setState({ showLabel: v })}\n              />\n              <SelectControl\n                ariaLabel={t('Annotation layer type')}\n                hovered\n                description={t('Choose the annotation layer type')}\n                label={t('Annotation layer type')}\n                name=\"annotation-layer-type\"\n                clearable={false}\n                options={supportedAnnotationTypes}\n                value={annotationType}\n                onChange={this.handleAnnotationType}\n              />\n              {supportedSourceTypes.length > 0 && (\n                <SelectControl\n                  ariaLabel={t('Annotation source type')}\n                  hovered\n                  description={t('Choose the source of your annotations')}\n                  label={t('Annotation source')}\n                  name=\"annotation-source-type\"\n                  options={supportedSourceTypes}\n                  notFoundContent={<NotFoundContent />}\n                  value={sourceType}\n                  onChange={this.handleAnnotationSourceType}\n                  validationErrors={!sourceType ? [t('Mandatory')] : []}\n                />\n              )}\n              {this.renderValueConfiguration()}\n            </PopoverSection>\n          </div>\n          {this.renderSliceConfiguration()}\n          {this.renderDisplayConfiguration()}\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          {isNew ? (\n            <Button buttonSize=\"small\" onClick={() => this.props.close()}>\n              {t('Cancel')}\n            </Button>\n          ) : (\n            <Button buttonSize=\"small\" onClick={this.deleteAnnotation}>\n              {t('Remove')}\n            </Button>\n          )}\n          <div>\n            <Button\n              buttonSize=\"small\"\n              disabled={!isValid}\n              onClick={this.applyAnnotation}\n            >\n              {t('Apply')}\n            </Button>\n\n            <Button\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              disabled={!isValid}\n              onClick={this.submitAnnotation}\n            >\n              {t('OK')}\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nAnnotationLayer.propTypes = propTypes;\nAnnotationLayer.defaultProps = defaultProps;\n\nexport default withTheme(AnnotationLayer);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}