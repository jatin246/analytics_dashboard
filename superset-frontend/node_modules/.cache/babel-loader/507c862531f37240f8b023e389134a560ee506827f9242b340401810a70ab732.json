{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { LatestQueryEditorVersion, QueryEditorVersion } from 'src/SqlLab/types';\nexport function dedupeTabHistory(tabHistory) {\n  return tabHistory.reduce((result, tabId) => result.slice(-1)[0] === tabId ? result : result.concat(tabId), []);\n}\nexport default function getInitialState({ common, active_tab: activeTab, tab_state_ids: tabStateIds = [], databases, queries: queries_, ...otherBootstrapData }) {\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  let queryEditors = {};\n  const defaultQueryEditor = {\n    version: LatestQueryEditorVersion,\n    loaded: true,\n    name: t('Untitled query'),\n    sql: '',\n    latestQueryId: null,\n    autorun: false,\n    dbId: common.conf.SQLLAB_DEFAULT_DBID,\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    hideLeftBar: false,\n    remoteId: null,\n    cursorPosition: { row: 0, column: 0 }\n  };\n  let unsavedQueryEditor = {};\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach(({ id, label }) => {\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {var _activeTab$extra_json, _activeTab$extra_json2, _activeTab$saved_quer, _activeTab$extra_json3;\n      queryEditor = {\n        version: (_activeTab$extra_json = (_activeTab$extra_json2 = activeTab.extra_json) == null ? void 0 : _activeTab$extra_json2.version) != null ? _activeTab$extra_json : QueryEditorVersion.V1,\n        id: id.toString(),\n        loaded: true,\n        name: activeTab.label,\n        sql: activeTab.sql || '',\n        selectedText: undefined,\n        latestQueryId: activeTab.latest_query ?\n        activeTab.latest_query.id :\n        null,\n        remoteId: ((_activeTab$saved_quer = activeTab.saved_query) == null ? void 0 : _activeTab$saved_quer.id) || null,\n        autorun: Boolean(activeTab.autorun),\n        templateParams: activeTab.template_params || undefined,\n        dbId: activeTab.database_id,\n        catalog: activeTab.catalog,\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        hideLeftBar: activeTab.hide_left_bar,\n        updatedAt: (_activeTab$extra_json3 = activeTab.extra_json) == null ? void 0 : _activeTab$extra_json3.updatedAt\n      };\n    } else\n    {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        name: label,\n        dbId: undefined\n      };\n    }\n    queryEditors = {\n      ...queryEditors,\n      [queryEditor.id]: queryEditor\n    };\n  });\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  let lastUpdatedActiveTab = activeTab ? activeTab.id.toString() : '';\n  let tables = {};\n  let editorTabLastUpdatedAt = Date.now();\n  if (activeTab) {var _activeTab$extra_json4;\n    editorTabLastUpdatedAt =\n    ((_activeTab$extra_json4 = activeTab.extra_json) == null ? void 0 : _activeTab$extra_json4.updatedAt) || editorTabLastUpdatedAt;\n    activeTab.table_schemas.\n    filter((tableSchema) => tableSchema.description !== null).\n    forEach((tableSchema) => {\n      const { dataPreviewQueryId, ...persistData } = tableSchema.description;\n      const table = {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        catalog: tableSchema.catalog,\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        dataPreviewQueryId,\n        persistData,\n        initialized: true\n      };\n      tables = {\n        ...tables,\n        [table.id]: table\n      };\n    });\n  }\n  const queries = {\n    ...queries_,\n    ...((activeTab == null ? void 0 : activeTab.latest_query) && {\n      [activeTab.latest_query.id]: activeTab.latest_query\n    })\n  };\n  const destroyedQueryEditors = {};\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  try {\n    const localStorageData = localStorage.getItem('redux');\n    const sqlLabCacheData = localStorageData ?\n    JSON.parse(localStorageData) :\n    undefined;\n    if (localStorageData && sqlLabCacheData != null && sqlLabCacheData.sqlLab) {\n      const { sqlLab } = sqlLabCacheData;\n      if (sqlLab.queryEditors.length === 0) {\n        // migration was successful\n        localStorage.removeItem('redux');\n      } else\n      {\n        unsavedQueryEditor = sqlLab.unsavedQueryEditor || unsavedQueryEditor;\n        // add query editors and tables to state with a special flag so they can\n        // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n        sqlLab.queryEditors.forEach((qe) => {var _queryEditors$qe$id, _queryEditors$qe$id2;\n          const hasConflictFromBackend = Boolean(queryEditors[qe.id]);\n          const unsavedUpdatedAt = (_queryEditors$qe$id = queryEditors[qe.id]) == null ? void 0 : _queryEditors$qe$id.updatedAt;\n          const hasUnsavedUpdateSinceLastSave = qe.updatedAt && (\n          !unsavedUpdatedAt || qe.updatedAt > unsavedUpdatedAt);\n          const cachedQueryEditor = !hasConflictFromBackend || hasUnsavedUpdateSinceLastSave ? qe : {};\n          queryEditors = {\n            ...queryEditors,\n            [qe.id]: {\n              ...queryEditors[qe.id],\n              ...cachedQueryEditor,\n              name: cachedQueryEditor.title ||\n              cachedQueryEditor.name || ((_queryEditors$qe$id2 =\n              queryEditors[qe.id]) == null ? void 0 : _queryEditors$qe$id2.name),\n              ...(cachedQueryEditor.id &&\n              unsavedQueryEditor.id === qe.id &&\n              unsavedQueryEditor),\n              inLocalStorage: !hasConflictFromBackend,\n              loaded: true\n            }\n          };\n        });\n        const expandedTables = new Set();\n        if (sqlLab.tables) {\n          tables = sqlLab.tables.reduce((merged, table) => {\n            const expanded = !expandedTables.has(table.queryEditorId);\n            if (expanded) {\n              expandedTables.add(table.queryEditorId);\n            }\n            return {\n              ...merged,\n              [table.id]: {\n                ...tables[table.id],\n                ...table,\n                expanded,\n                inLocalStorage: true\n              }\n            };\n          }, tables);\n        }\n        if (sqlLab.queries) {\n          Object.values(sqlLab.queries).forEach((query) => {\n            queries[query.id] = { ...query, inLocalStorage: true };\n          });\n        }\n        if (sqlLab.tabHistory) {\n          tabHistory.push(...sqlLab.tabHistory);\n        }\n        lastUpdatedActiveTab = tabHistory.slice(tabHistory.length - 1)[0] || '';\n        if (sqlLab.destroyedQueryEditors) {\n          Object.entries(sqlLab.destroyedQueryEditors).forEach(([id, ts]) => {\n            if (queryEditors[id]) {\n              destroyedQueryEditors[id] = ts;\n              delete queryEditors[id];\n            }\n          });\n        }\n      }\n    }\n  }\n  catch (error) {\n\n    // continue regardless of error\n  }return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries: Object.fromEntries(Object.entries(queries).map(([queryId, query]) => [\n      queryId,\n      {\n        ...query,\n        ...(query.startDttm && {\n          startDttm: Number(query.startDttm)\n        }),\n        ...(query.endDttm && {\n          endDttm: Number(query.endDttm)\n        })\n      }]\n      )),\n      queryEditors: Object.values(queryEditors),\n      tabHistory: dedupeTabHistory(tabHistory),\n      tables: Object.values(tables),\n      queriesLastUpdate: Date.now(),\n      editorTabLastUpdatedAt,\n      queryCostEstimates: {},\n      unsavedQueryEditor,\n      lastUpdatedActiveTab,\n      destroyedQueryEditors\n    },\n    localStorageUsageInKilobytes: 0,\n    common,\n    ...otherBootstrapData\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(dedupeTabHistory, \"dedupeTabHistory\", \"/app/superset-frontend/src/SqlLab/reducers/getInitialState.ts\");reactHotLoader.register(getInitialState, \"getInitialState\", \"/app/superset-frontend/src/SqlLab/reducers/getInitialState.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","LatestQueryEditorVersion","QueryEditorVersion","dedupeTabHistory","tabHistory","reduce","result","tabId","slice","concat","getInitialState","common","active_tab","activeTab","tab_state_ids","tabStateIds","databases","queries","queries_","otherBootstrapData","queryEditors","defaultQueryEditor","version","loaded","name","sql","latestQueryId","autorun","dbId","conf","SQLLAB_DEFAULT_DBID","queryLimit","DEFAULT_SQLLAB_LIMIT","hideLeftBar","remoteId","cursorPosition","row","column","unsavedQueryEditor","forEach","id","label","queryEditor","_activeTab$extra_json","_activeTab$extra_json2","_activeTab$saved_quer","_activeTab$extra_json3","extra_json","V1","toString","selectedText","undefined","latest_query","saved_query","Boolean","templateParams","template_params","database_id","catalog","schema","query_limit","hide_left_bar","updatedAt","lastUpdatedActiveTab","tables","editorTabLastUpdatedAt","Date","now","_activeTab$extra_json4","table_schemas","filter","tableSchema","description","dataPreviewQueryId","persistData","table","queryEditorId","tab_state_id","expanded","initialized","destroyedQueryEditors","localStorageData","localStorage","getItem","sqlLabCacheData","JSON","parse","sqlLab","length","removeItem","qe","_queryEditors$qe$id","_queryEditors$qe$id2","hasConflictFromBackend","unsavedUpdatedAt","hasUnsavedUpdateSinceLastSave","cachedQueryEditor","title","inLocalStorage","expandedTables","Set","merged","has","add","Object","values","query","push","entries","ts","error","activeSouthPaneTab","alerts","offline","fromEntries","map","queryId","startDttm","Number","endDttm","queriesLastUpdate","queryCostEstimates","localStorageUsageInKilobytes","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/SqlLab/reducers/getInitialState.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport type { BootstrapData } from 'src/types/bootstrapTypes';\nimport type { InitialState } from 'src/hooks/apiResources/sqlLab';\nimport {\n  QueryEditor,\n  UnsavedQueryEditor,\n  SqlLabRootState,\n  Table,\n  LatestQueryEditorVersion,\n  QueryEditorVersion,\n} from 'src/SqlLab/types';\n\nexport function dedupeTabHistory(tabHistory: string[]) {\n  return tabHistory.reduce<string[]>(\n    (result, tabId) =>\n      result.slice(-1)[0] === tabId ? result : result.concat(tabId),\n    [],\n  );\n}\n\nexport default function getInitialState({\n  common,\n  active_tab: activeTab,\n  tab_state_ids: tabStateIds = [],\n  databases,\n  queries: queries_,\n  ...otherBootstrapData\n}: BootstrapData & Partial<InitialState>) {\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  let queryEditors: Record<string, QueryEditor> = {};\n  const defaultQueryEditor = {\n    version: LatestQueryEditorVersion,\n    loaded: true,\n    name: t('Untitled query'),\n    sql: '',\n    latestQueryId: null,\n    autorun: false,\n    dbId: common.conf.SQLLAB_DEFAULT_DBID,\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    hideLeftBar: false,\n    remoteId: null,\n    cursorPosition: { row: 0, column: 0 },\n  };\n  let unsavedQueryEditor: UnsavedQueryEditor = {};\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach(({ id, label }) => {\n    let queryEditor: QueryEditor;\n    if (activeTab && activeTab.id === id) {\n      queryEditor = {\n        version: activeTab.extra_json?.version ?? QueryEditorVersion.V1,\n        id: id.toString(),\n        loaded: true,\n        name: activeTab.label,\n        sql: activeTab.sql || '',\n        selectedText: undefined,\n        latestQueryId: activeTab.latest_query\n          ? activeTab.latest_query.id\n          : null,\n        remoteId: activeTab.saved_query?.id || null,\n        autorun: Boolean(activeTab.autorun),\n        templateParams: activeTab.template_params || undefined,\n        dbId: activeTab.database_id,\n        catalog: activeTab.catalog,\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        hideLeftBar: activeTab.hide_left_bar,\n        updatedAt: activeTab.extra_json?.updatedAt,\n      };\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        name: label,\n        dbId: undefined,\n      };\n    }\n    queryEditors = {\n      ...queryEditors,\n      [queryEditor.id]: queryEditor,\n    };\n  });\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  let lastUpdatedActiveTab = activeTab ? activeTab.id.toString() : '';\n  let tables = {} as Record<string, Table>;\n  let editorTabLastUpdatedAt = Date.now();\n  if (activeTab) {\n    editorTabLastUpdatedAt =\n      activeTab.extra_json?.updatedAt || editorTabLastUpdatedAt;\n    activeTab.table_schemas\n      .filter(tableSchema => tableSchema.description !== null)\n      .forEach(tableSchema => {\n        const { dataPreviewQueryId, ...persistData } = tableSchema.description;\n        const table = {\n          dbId: tableSchema.database_id,\n          queryEditorId: tableSchema.tab_state_id.toString(),\n          catalog: tableSchema.catalog,\n          schema: tableSchema.schema,\n          name: tableSchema.table,\n          expanded: tableSchema.expanded,\n          id: tableSchema.id,\n          dataPreviewQueryId,\n          persistData,\n          initialized: true,\n        };\n        tables = {\n          ...tables,\n          [table.id]: table,\n        };\n      });\n  }\n\n  const queries = {\n    ...queries_,\n    ...(activeTab?.latest_query && {\n      [activeTab.latest_query.id]: activeTab.latest_query,\n    }),\n  };\n\n  const destroyedQueryEditors = {};\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  try {\n    const localStorageData = localStorage.getItem('redux');\n    const sqlLabCacheData = localStorageData\n      ? (JSON.parse(localStorageData) as Pick<SqlLabRootState, 'sqlLab'>)\n      : undefined;\n    if (localStorageData && sqlLabCacheData?.sqlLab) {\n      const { sqlLab } = sqlLabCacheData;\n\n      if (sqlLab.queryEditors.length === 0) {\n        // migration was successful\n        localStorage.removeItem('redux');\n      } else {\n        unsavedQueryEditor = sqlLab.unsavedQueryEditor || unsavedQueryEditor;\n        // add query editors and tables to state with a special flag so they can\n        // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n        sqlLab.queryEditors.forEach(qe => {\n          const hasConflictFromBackend = Boolean(queryEditors[qe.id]);\n          const unsavedUpdatedAt = queryEditors[qe.id]?.updatedAt;\n          const hasUnsavedUpdateSinceLastSave =\n            qe.updatedAt &&\n            (!unsavedUpdatedAt || qe.updatedAt > unsavedUpdatedAt);\n          const cachedQueryEditor: UnsavedQueryEditor =\n            !hasConflictFromBackend || hasUnsavedUpdateSinceLastSave ? qe : {};\n          queryEditors = {\n            ...queryEditors,\n            [qe.id]: {\n              ...queryEditors[qe.id],\n              ...cachedQueryEditor,\n              name:\n                cachedQueryEditor.title ||\n                cachedQueryEditor.name ||\n                queryEditors[qe.id]?.name,\n              ...(cachedQueryEditor.id &&\n                unsavedQueryEditor.id === qe.id &&\n                unsavedQueryEditor),\n              inLocalStorage: !hasConflictFromBackend,\n              loaded: true,\n            },\n          };\n        });\n        const expandedTables = new Set();\n\n        if (sqlLab.tables) {\n          tables = sqlLab.tables.reduce((merged, table) => {\n            const expanded = !expandedTables.has(table.queryEditorId);\n            if (expanded) {\n              expandedTables.add(table.queryEditorId);\n            }\n            return {\n              ...merged,\n              [table.id]: {\n                ...tables[table.id],\n                ...table,\n                expanded,\n                inLocalStorage: true,\n              },\n            };\n          }, tables);\n        }\n        if (sqlLab.queries) {\n          Object.values(sqlLab.queries).forEach(query => {\n            queries[query.id] = { ...query, inLocalStorage: true };\n          });\n        }\n        if (sqlLab.tabHistory) {\n          tabHistory.push(...sqlLab.tabHistory);\n        }\n        lastUpdatedActiveTab = tabHistory.slice(tabHistory.length - 1)[0] || '';\n\n        if (sqlLab.destroyedQueryEditors) {\n          Object.entries(sqlLab.destroyedQueryEditors).forEach(([id, ts]) => {\n            if (queryEditors[id]) {\n              destroyedQueryEditors[id] = ts;\n              delete queryEditors[id];\n            }\n          });\n        }\n      }\n    }\n  } catch (error) {\n    // continue regardless of error\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries: Object.fromEntries(\n        Object.entries(queries).map(([queryId, query]) => [\n          queryId,\n          {\n            ...query,\n            ...(query.startDttm && {\n              startDttm: Number(query.startDttm),\n            }),\n            ...(query.endDttm && {\n              endDttm: Number(query.endDttm),\n            }),\n          },\n        ]),\n      ),\n      queryEditors: Object.values(queryEditors),\n      tabHistory: dedupeTabHistory(tabHistory),\n      tables: Object.values(tables),\n      queriesLastUpdate: Date.now(),\n      editorTabLastUpdatedAt,\n      queryCostEstimates: {},\n      unsavedQueryEditor,\n      lastUpdatedActiveTab,\n      destroyedQueryEditors,\n    },\n    localStorageUsageInKilobytes: 0,\n    common,\n    ...otherBootstrapData,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}