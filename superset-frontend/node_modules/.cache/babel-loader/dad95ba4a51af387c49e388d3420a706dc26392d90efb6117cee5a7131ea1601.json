{"ast":null,"code":"import _omitBy from \"lodash/omitBy\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useContext, useEffect, useReducer, createContext } from 'react';\nimport { defineSharedModules, isFeatureEnabled, FeatureFlag, getChartMetadataRegistry, logging, makeApi } from '@superset-ui/core';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nconst metadataRegistry = getChartMetadataRegistry();\nconst dummyPluginContext = {\n  loading: true,\n  dynamicPlugins: {},\n  keys: [],\n  mountedPluginMetadata: {},\n  fetchAll: () => {}\n};\n/**\n * It is highly recommended to use the usePluginContext hook instead.\n * @see usePluginContext\n */\nexport const PluginContext = /*#__PURE__*/createContext(dummyPluginContext);\n/**\n * The plugin context provides info about what dynamic plugins are available.\n * It also provides loading info for the plugins' javascript bundles.\n *\n * Note: This does not include any information about static plugins.\n * Those are compiled into the Superset bundle at build time.\n * Dynamic plugins are added by the end user and can be any webhosted javascript.\n */\nexport const usePluginContext = () => useContext(PluginContext);__signature__(usePluginContext, \"useContext{}\");\nfunction getRegistryData() {\n  return {\n    keys: metadataRegistry.keys(),\n    mountedPluginMetadata: _omitBy(metadataRegistry.getMap(), (value) => value === undefined) // cast required to get rid of undefined values\n  };\n}\nfunction pluginContextReducer(state, action) {\n  switch (action.type) {\n    case 'begin':{\n        const plugins = { ...state.dynamicPlugins };\n        action.keys.forEach((key) => {\n          plugins[key] = { key, error: null, mounting: true };\n        });\n        return {\n          ...state,\n          loading: action.keys.length > 0,\n          dynamicPlugins: plugins\n        };\n      }\n    case 'complete':{\n        return {\n          ...state,\n          loading: Object.values(state.dynamicPlugins).some((plugin) => plugin.mounting && plugin.key !== action.key),\n          dynamicPlugins: {\n            ...state.dynamicPlugins,\n            [action.key]: {\n              key: action.key,\n              mounting: false,\n              error: action.error\n            }\n          }\n        };\n      }\n    case 'changed keys':{\n        return {\n          ...state,\n          ...getRegistryData()\n        };\n      }\n    default:\n      return state;\n  }\n}\nconst pluginApi = makeApi({\n  method: 'GET',\n  endpoint: '/dynamic-plugins/api/read'\n});\nconst sharedModules = {\n  react: () => import('react'),\n  lodash: () => import('lodash'),\n  'react-dom': () => import('react-dom'),\n  '@superset-ui/chart-controls': () => import('@superset-ui/chart-controls'),\n  '@superset-ui/core': () => import('@superset-ui/core')\n};\nexport const DynamicPluginProvider = ({ children }) => {\n  const [pluginState, dispatch] = useReducer(pluginContextReducer, dummyPluginContext, (state) => ({\n    ...state,\n    ...getRegistryData(),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    fetchAll,\n    loading: isFeatureEnabled(FeatureFlag.DynamicPlugins)\n    // TODO: Write fetchByKeys\n  }));\n  // For now, we fetch all the plugins at the same time.\n  // In the future it would be nice to fetch on an as-needed basis.\n  // That will most likely depend on having a json manifest for each plugin.\n  async function fetchAll() {\n    try {\n      await defineSharedModules(sharedModules);\n      const { result: plugins } = await pluginApi({});\n      dispatch({ type: 'begin', keys: plugins.map((plugin) => plugin.key) });\n      await Promise.all(plugins.map(async (plugin) => {\n        let error = null;\n        try {\n          await import( /* webpackIgnore: true */plugin.bundle_url);\n        }\n        catch (err) {\n          logging.error(`Failed to load plugin ${plugin.key} with the following error:`, err.stack);\n          error = err;\n        }\n        dispatch({\n          type: 'complete',\n          key: plugin.key,\n          error\n        });\n      }));\n    }\n    catch (error) {\n      logging.error('Failed to load dynamic plugins', error.stack || error);\n    }\n  }\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.DynamicPlugins)) {\n      fetchAll();\n    }\n    const registryListener = () => {\n      dispatch({ type: 'changed keys' });\n    };\n    metadataRegistry.addListener(registryListener);\n    return () => {\n      metadataRegistry.removeListener(registryListener);\n    };\n  }, []);\n  return _jsx(PluginContext.Provider, { value: pluginState, children:\n    children }\n  );\n};__signature__(DynamicPluginProvider, \"useReducer{[pluginState, dispatch](dummyPluginContext)}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(metadataRegistry, \"metadataRegistry\", \"/app/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(dummyPluginContext, \"dummyPluginContext\", \"/app/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(PluginContext, \"PluginContext\", \"/app/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(usePluginContext, \"usePluginContext\", \"/app/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(getRegistryData, \"getRegistryData\", \"/app/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(pluginContextReducer, \"pluginContextReducer\", \"/app/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(pluginApi, \"pluginApi\", \"/app/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(sharedModules, \"sharedModules\", \"/app/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(DynamicPluginProvider, \"DynamicPluginProvider\", \"/app/superset-frontend/src/components/DynamicPlugins/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useContext","useEffect","useReducer","createContext","defineSharedModules","isFeatureEnabled","FeatureFlag","getChartMetadataRegistry","logging","makeApi","jsx","_jsx","metadataRegistry","dummyPluginContext","loading","dynamicPlugins","keys","mountedPluginMetadata","fetchAll","PluginContext","usePluginContext","__signature__","getRegistryData","_omitBy","getMap","value","undefined","pluginContextReducer","state","action","type","plugins","forEach","key","error","mounting","length","Object","values","some","plugin","pluginApi","method","endpoint","sharedModules","react","lodash","react-dom","@superset-ui/chart-controls","@superset-ui/core","DynamicPluginProvider","children","pluginState","dispatch","DynamicPlugins","result","map","Promise","all","bundle_url","err","stack","registryListener","addListener","removeListener","Provider","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/components/DynamicPlugins/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useContext, useEffect, useReducer, createContext, FC } from 'react';\n\nimport {\n  ChartMetadata,\n  defineSharedModules,\n  isFeatureEnabled,\n  FeatureFlag,\n  getChartMetadataRegistry,\n  logging,\n  makeApi,\n} from '@superset-ui/core';\nimport { omitBy } from 'lodash';\n\nconst metadataRegistry = getChartMetadataRegistry();\n\nexport type PluginContextType = {\n  loading: boolean;\n  /** These are actually only the dynamic plugins */\n  dynamicPlugins: {\n    [key: string]: {\n      key: string;\n      mounting: boolean;\n      error: null | Error;\n    };\n  };\n  keys: string[];\n  /** Mounted means the plugin's js bundle has been imported */\n  mountedPluginMetadata: Record<string, ChartMetadata>;\n  fetchAll: () => void;\n};\n\nconst dummyPluginContext: PluginContextType = {\n  loading: true,\n  dynamicPlugins: {},\n  keys: [],\n  mountedPluginMetadata: {},\n  fetchAll: () => {},\n};\n\n/**\n * It is highly recommended to use the usePluginContext hook instead.\n * @see usePluginContext\n */\nexport const PluginContext = createContext(dummyPluginContext);\n\n/**\n * The plugin context provides info about what dynamic plugins are available.\n * It also provides loading info for the plugins' javascript bundles.\n *\n * Note: This does not include any information about static plugins.\n * Those are compiled into the Superset bundle at build time.\n * Dynamic plugins are added by the end user and can be any webhosted javascript.\n */\nexport const usePluginContext = () => useContext(PluginContext);\n\n// the plugin returned from the API\ntype Plugin = {\n  name: string;\n  key: string;\n  bundle_url: string;\n  id: number;\n};\n\n// when a plugin completes loading\ntype CompleteAction = {\n  type: 'complete';\n  key: string;\n  error: null | Error;\n};\n\n// when plugins start loading\ntype BeginAction = {\n  type: 'begin';\n  keys: string[];\n};\n\ntype ChangedKeysAction = {\n  type: 'changed keys';\n};\n\ntype PluginAction = BeginAction | CompleteAction | ChangedKeysAction;\n\nfunction getRegistryData() {\n  return {\n    keys: metadataRegistry.keys(),\n    mountedPluginMetadata: omitBy(\n      metadataRegistry.getMap(),\n      value => value === undefined,\n    ) as Record<string, ChartMetadata>, // cast required to get rid of undefined values\n  };\n}\n\nfunction pluginContextReducer(\n  state: PluginContextType,\n  action: PluginAction,\n): PluginContextType {\n  switch (action.type) {\n    case 'begin': {\n      const plugins = { ...state.dynamicPlugins };\n      action.keys.forEach(key => {\n        plugins[key] = { key, error: null, mounting: true };\n      });\n      return {\n        ...state,\n        loading: action.keys.length > 0,\n        dynamicPlugins: plugins,\n      };\n    }\n    case 'complete': {\n      return {\n        ...state,\n        loading: Object.values(state.dynamicPlugins).some(\n          plugin => plugin.mounting && plugin.key !== action.key,\n        ),\n        dynamicPlugins: {\n          ...state.dynamicPlugins,\n          [action.key]: {\n            key: action.key,\n            mounting: false,\n            error: action.error,\n          },\n        },\n      };\n    }\n    case 'changed keys': {\n      return {\n        ...state,\n        ...getRegistryData(),\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst pluginApi = makeApi<{}, { result: Plugin[] }>({\n  method: 'GET',\n  endpoint: '/dynamic-plugins/api/read',\n});\n\nconst sharedModules = {\n  react: () => import('react'),\n  lodash: () => import('lodash'),\n  'react-dom': () => import('react-dom'),\n  '@superset-ui/chart-controls': () => import('@superset-ui/chart-controls'),\n  '@superset-ui/core': () => import('@superset-ui/core'),\n};\n\nexport const DynamicPluginProvider: FC = ({ children }) => {\n  const [pluginState, dispatch] = useReducer(\n    pluginContextReducer,\n    dummyPluginContext,\n    state => ({\n      ...state,\n      ...getRegistryData(),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      fetchAll,\n      loading: isFeatureEnabled(FeatureFlag.DynamicPlugins),\n      // TODO: Write fetchByKeys\n    }),\n  );\n\n  // For now, we fetch all the plugins at the same time.\n  // In the future it would be nice to fetch on an as-needed basis.\n  // That will most likely depend on having a json manifest for each plugin.\n  async function fetchAll() {\n    try {\n      await defineSharedModules(sharedModules);\n      const { result: plugins } = await pluginApi({});\n      dispatch({ type: 'begin', keys: plugins.map(plugin => plugin.key) });\n      await Promise.all(\n        plugins.map(async plugin => {\n          let error: Error | null = null;\n          try {\n            await import(/* webpackIgnore: true */ plugin.bundle_url);\n          } catch (err) {\n            logging.error(\n              `Failed to load plugin ${plugin.key} with the following error:`,\n              err.stack,\n            );\n            error = err;\n          }\n          dispatch({\n            type: 'complete',\n            key: plugin.key,\n            error,\n          });\n        }),\n      );\n    } catch (error) {\n      logging.error('Failed to load dynamic plugins', error.stack || error);\n    }\n  }\n\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.DynamicPlugins)) {\n      fetchAll();\n    }\n    const registryListener = () => {\n      dispatch({ type: 'changed keys' });\n    };\n    metadataRegistry.addListener(registryListener);\n    return () => {\n      metadataRegistry.removeListener(registryListener);\n    };\n  }, []);\n\n  return (\n    <PluginContext.Provider value={pluginState}>\n      {children}\n    </PluginContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}