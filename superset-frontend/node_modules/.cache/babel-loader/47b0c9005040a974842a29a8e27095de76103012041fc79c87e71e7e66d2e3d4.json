{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport ErrorAlert from './ErrorAlert';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\nconst ImportModelsModal = ({ resourceName, resourceLabel, passwordsNeededMessage, confirmOverwriteMessage, onModelImport, show, onHide, passwordFields = [], setPasswordFields = () => {}, sshTunnelPasswordFields = [], setSSHTunnelPasswordFields = () => {}, sshTunnelPrivateKeyFields = [], setSSHTunnelPrivateKeyFields = () => {}, sshTunnelPrivateKeyPasswordFields = [], setSSHTunnelPrivateKeyPasswordFields = () => {} }) => {\n  const [isHidden, setIsHidden] = useState(true);\n  const [passwords, setPasswords] = useState({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] = useState(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState(false);\n  const [fileList, setFileList] = useState([]);\n  const [importingModel, setImportingModel] = useState(false);\n  const [errorMessage, setErrorMessage] = useState();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] = useState({});\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n  const handleErrorMsg = (msg) => {\n    setErrorMessage(msg);\n  };\n  const { state: { alreadyExists, passwordsNeeded, sshPasswordNeeded, sshPrivateKeyNeeded, sshPrivateKeyPasswordNeeded }, importResource } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n  const onUpload = () => {var _fileList$;\n    if (!(((_fileList$ = fileList[0]) == null ? void 0 : _fileList$.originFileObj) instanceof File)) {\n      return;\n    }\n    setImportingModel(true);\n    importResource(fileList[0].originFileObj, passwords, sshTunnelPasswords, sshTunnelPrivateKeys, sshTunnelPrivateKeyPasswords, confirmedOverwrite).then((result) => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n  const changeFile = (info) => {\n    setFileList([\n    {\n      ...info.file,\n      status: 'done'\n    }]\n    );\n  };\n  const removeFile = (removedFile) => {\n    setFileList(fileList.filter((file) => file.uid !== removedFile.uid));\n    return false;\n  };\n  const confirmOverwrite = (event) => {var _event$currentTarget$, _event$currentTarget;\n    const targetValue = (_event$currentTarget$ = (_event$currentTarget = event.currentTarget) == null ? void 0 : _event$currentTarget.value) != null ? _event$currentTarget$ : '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0 &&\n    sshTunnelPasswordFields.length === 0 &&\n    sshTunnelPrivateKeyFields.length === 0 &&\n    sshTunnelPrivateKeyPasswordFields.length === 0) {\n      return null;\n    }\n    const files = [\n    ...new Set([\n    ...passwordFields,\n    ...sshTunnelPasswordFields,\n    ...sshTunnelPrivateKeyFields,\n    ...sshTunnelPrivateKeyPasswordFields]\n    )];\n\n    return _jsxs(_Fragment, { children: [\n      _jsx(\"h5\", { children: t('Database passwords') }),\n      _jsx(HelperMessage, { children: passwordsNeededMessage }),\n      files.map((fileName) => _jsxs(_Fragment, { children: [\n        (passwordFields == null ? void 0 : passwordFields.indexOf(fileName)) >= 0 && _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s PASSWORD', fileName.slice(10)),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"input\", { name: `password-${fileName}`, autoComplete: `password-${fileName}`, type: \"password\", value: passwords[fileName], onChange: (event) => setPasswords({\n              ...passwords,\n              [fileName]: event.target.value\n            }) })] }, `password-for-${fileName}`\n        ),\n        (sshTunnelPasswordFields == null ? void 0 : sshTunnelPasswordFields.indexOf(fileName)) >= 0 && _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s SSH TUNNEL PASSWORD', fileName.slice(10)),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"input\", { name: `ssh_tunnel_password-${fileName}`, autoComplete: `ssh_tunnel_password-${fileName}`, type: \"password\", value: sshTunnelPasswords[fileName], onChange: (event) => setSSHTunnelPasswords({\n              ...sshTunnelPasswords,\n              [fileName]: event.target.value\n            }), \"data-test\": \"ssh_tunnel_password\" })] }, `ssh_tunnel_password-for-${fileName}`\n        ),\n        (sshTunnelPrivateKeyFields == null ? void 0 : sshTunnelPrivateKeyFields.indexOf(fileName)) >= 0 && _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10)),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"textarea\", { name: `ssh_tunnel_private_key-${fileName}`, autoComplete: `ssh_tunnel_private_key-${fileName}`, value: sshTunnelPrivateKeys[fileName], onChange: (event) => setSSHTunnelPrivateKeys({\n              ...sshTunnelPrivateKeys,\n              [fileName]: event.target.value\n            }), \"data-test\": \"ssh_tunnel_private_key\" })] }, `ssh_tunnel_private_key-for-${fileName}`\n        ),\n        (sshTunnelPrivateKeyPasswordFields == null ? void 0 : sshTunnelPrivateKeyPasswordFields.indexOf(fileName)) >= 0 && _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10)),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"input\", { name: `ssh_tunnel_private_key_password-${fileName}`, autoComplete: `ssh_tunnel_private_key_password-${fileName}`, type: \"password\", value: sshTunnelPrivateKeyPasswords[fileName], onChange: (event) => setSSHTunnelPrivateKeyPasswords({\n              ...sshTunnelPrivateKeyPasswords,\n              [fileName]: event.target.value\n            }), \"data-test\": \"ssh_tunnel_private_key_password\" })] }, `ssh_tunnel_private_key_password-for-${fileName}`\n        )] }\n      ))] }\n    );\n  };\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n    return _jsx(_Fragment, { children:\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"confirm-overwrite\", children: confirmOverwriteMessage }),\n        _jsx(\"div\", { className: \"control-label\", children:\n          t('Type \"%s\" to confirm', t('OVERWRITE')) }\n        ),\n        _jsx(\"input\", { \"data-test\": \"overwrite-modal-input\", id: \"overwrite\", type: \"text\", onChange: confirmOverwrite })] }\n      ) }\n    );\n  };\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  return _jsxs(Modal, { name: \"model\", className: \"import-model-modal\", disablePrimaryButton: fileList.length === 0 ||\n    needsOverwriteConfirm && !confirmedOverwrite ||\n    importingModel, onHandledPrimaryAction: onUpload, onHide: hide, primaryButtonName: needsOverwriteConfirm ? t('Overwrite') : t('Import'), primaryButtonType: needsOverwriteConfirm ? 'danger' : 'primary', width: \"750px\", show: show, title: _jsx(\"h4\", { children: t('Import %s', resourceLabel) }), children: [\n    _jsx(StyledInputContainer, { children:\n      _jsx(Upload, { name: \"modelFile\", id: \"modelFile\", \"data-test\": \"model-file-input\", accept: \".yaml,.json,.yml,.zip\", fileList: fileList, onChange: changeFile, onRemove: removeFile\n        // upload is handled by hook\n        , customRequest: () => {}, disabled: importingModel, children:\n        _jsx(Button, { loading: importingModel, children: t('Select file') }) }\n      ) }\n    ),\n    errorMessage && _jsx(ErrorAlert, { errorMessage: errorMessage, showDbInstallInstructions: passwordFields.length > 0 ||\n      sshTunnelPasswordFields.length > 0 ||\n      sshTunnelPrivateKeyFields.length > 0 ||\n      sshTunnelPrivateKeyPasswordFields.length > 0 }),\n    renderPasswordFields(),\n    renderOverwriteConfirmation()] }\n  );\n};__signature__(ImportModelsModal, \"useState{[isHidden, setIsHidden](true)}\\nuseState{[passwords, setPasswords]({})}\\nuseState{[needsOverwriteConfirm, setNeedsOverwriteConfirm](false)}\\nuseState{[confirmedOverwrite, setConfirmedOverwrite](false)}\\nuseState{[fileList, setFileList]([])}\\nuseState{[importingModel, setImportingModel](false)}\\nuseState{[errorMessage, setErrorMessage]}\\nuseState{[sshTunnelPasswords, setSSHTunnelPasswords]({})}\\nuseState{[sshTunnelPrivateKeys, setSSHTunnelPrivateKeys]({})}\\nuseState{[sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords]({})}\\nuseImportResource{{ state: { alreadyExists, passwordsNeeded, sshPasswordNeeded, sshPrivateKeyNeeded, sshPrivateKeyPasswordNeeded, }, importResource, }}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\", () => [useImportResource]);const _default =\nImportModelsModal;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(HelperMessage, \"HelperMessage\", \"/app/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(StyledInputContainer, \"StyledInputContainer\", \"/app/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(ImportModelsModal, \"ImportModelsModal\", \"/app/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/ImportModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","useState","styled","t","Button","Modal","Upload","useImportResource","ErrorAlert","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","HelperMessage","div","theme","colors","grayscale","base","typography","sizes","s","StyledInputContainer","gridUnit","light1","light2","ImportModelsModal","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","isHidden","setIsHidden","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","sshTunnelPasswords","setSSHTunnelPasswords","sshTunnelPrivateKeys","setSSHTunnelPrivateKeys","sshTunnelPrivateKeyPasswords","setSSHTunnelPrivateKeyPasswords","clearModal","handleErrorMsg","msg","state","alreadyExists","passwordsNeeded","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","importResource","length","hide","onUpload","_fileList$","originFileObj","File","then","result","changeFile","info","file","status","removeFile","removedFile","filter","uid","confirmOverwrite","event","_event$currentTarget$","_event$currentTarget","targetValue","currentTarget","value","toUpperCase","renderPasswordFields","files","Set","children","map","fileName","indexOf","className","slice","name","autoComplete","type","onChange","target","renderOverwriteConfirmation","id","disablePrimaryButton","onHandledPrimaryAction","primaryButtonName","primaryButtonType","width","title","accept","onRemove","customRequest","disabled","loading","showDbInstallInstructions","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/app/superset-frontend/src/components/ImportModal/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FunctionComponent, useEffect, useState, ChangeEvent } from 'react';\n\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n  sshTunnelPasswordFields?: string[];\n  setSSHTunnelPasswordFields?: (sshTunnelPasswordFields: string[]) => void;\n  sshTunnelPrivateKeyFields?: string[];\n  setSSHTunnelPrivateKeyFields?: (sshTunnelPrivateKeyFields: string[]) => void;\n  sshTunnelPrivateKeyPasswordFields?: string[];\n  setSSHTunnelPrivateKeyPasswordFields?: (\n    sshTunnelPrivateKeyPasswordFields: string[],\n  ) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n  sshTunnelPasswordFields = [],\n  setSSHTunnelPasswordFields = () => {},\n  sshTunnelPrivateKeyFields = [],\n  setSSHTunnelPrivateKeyFields = () => {},\n  sshTunnelPrivateKeyPasswordFields = [],\n  setSSHTunnelPrivateKeyPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] =\n    useState<Record<string, string>>({});\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: {\n      alreadyExists,\n      passwordsNeeded,\n      sshPasswordNeeded,\n      sshPrivateKeyNeeded,\n      sshPrivateKeyPasswordNeeded,\n    },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      sshTunnelPasswords,\n      sshTunnelPrivateKeys,\n      sshTunnelPrivateKeyPasswords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (\n      passwordFields.length === 0 &&\n      sshTunnelPasswordFields.length === 0 &&\n      sshTunnelPrivateKeyFields.length === 0 &&\n      sshTunnelPrivateKeyPasswordFields.length === 0\n    ) {\n      return null;\n    }\n\n    const files = [\n      ...new Set([\n        ...passwordFields,\n        ...sshTunnelPasswordFields,\n        ...sshTunnelPrivateKeyFields,\n        ...sshTunnelPrivateKeyPasswordFields,\n      ]),\n    ];\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {files.map(fileName => (\n          <>\n            {passwordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`password-${fileName}`}\n                  autoComplete={`password-${fileName}`}\n                  type=\"password\"\n                  value={passwords[fileName]}\n                  onChange={event =>\n                    setPasswords({\n                      ...passwords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`ssh_tunnel_password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPasswords({\n                      ...sshTunnelPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_password\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <textarea\n                  name={`ssh_tunnel_private_key-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key-${fileName}`}\n                  value={sshTunnelPrivateKeys[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeys({\n                      ...sshTunnelPrivateKeys,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key_password-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_private_key_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPrivateKeyPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeyPasswords({\n                      ...sshTunnelPrivateKeyPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key_password\"\n                />\n              </StyledInputContainer>\n            )}\n          </>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={\n            passwordFields.length > 0 ||\n            sshTunnelPasswordFields.length > 0 ||\n            sshTunnelPrivateKeyFields.length > 0 ||\n            sshTunnelPrivateKeyPasswordFields.length > 0\n          }\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}