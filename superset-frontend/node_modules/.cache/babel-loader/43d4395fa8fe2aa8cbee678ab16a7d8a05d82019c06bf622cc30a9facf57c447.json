{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useMemo, useEffect } from 'react';\nimport { styled, t, getClientErrorMessage, getClientErrorObject } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useTables } from 'src/hooks/apiResources';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst REFRESH_WIDTH = 30;\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `}\n`;\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nexport const TableOption = ({ table }) => {\n  const { value, type, extra } = table;\n  return _jsxs(TableLabel, { title: value, children: [\n    type === 'view' ? _jsx(Icons.Eye, { iconSize: \"m\" }) : _jsx(Icons.Table, { iconSize: \"m\" }),\n    (extra == null ? void 0 : extra.certification) && _jsx(CertifiedBadge, { certifiedBy: extra.certification.certified_by, details: extra.certification.details, size: \"l\" }),\n    (extra == null ? void 0 : extra.warning_markdown) && _jsx(WarningIconWithTooltip, { warningMarkdown: extra.warning_markdown, size: \"l\", marginRight: 4 }),\n    value] }\n  );\n};\nfunction renderSelectRow(select, refreshBtn) {\n  return _jsxs(\"div\", { className: \"section\", children: [\n    _jsx(\"span\", { className: \"select\", children: select }),\n    _jsx(\"span\", { className: \"refresh\", children: refreshBtn })] }\n  );\n}\nconst TableSelector = ({ database, emptyState, formMode = false, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onCatalogChange, onSchemaChange, readOnly = false, onEmptyResults, catalog, schema, sqlLabMode = true, tableSelectMode = 'single', tableValue = undefined, onTableSelectChange, customTableOptionLabelRenderer }) => {\n  const { addSuccessToast } = useToasts();\n  const [currentCatalog, setCurrentCatalog] = useState(catalog);\n  const [currentSchema, setCurrentSchema] = useState(schema);\n  const [tableSelectValue, setTableSelectValue] = useState(undefined);\n  const { currentData: data, isFetching: loadingTables, refetch } = useTables({\n    dbId: database == null ? void 0 : database.id,\n    catalog: currentCatalog,\n    schema: currentSchema,\n    onSuccess: (data, isFetched) => {\n      if (isFetched) {\n        addSuccessToast(t('List updated'));\n      }\n    },\n    onError: (err) => {\n      getClientErrorObject(err).then((clientError) => {\n        handleError(getClientErrorMessage(t('There was an error loading the tables'), clientError));\n      });\n    }\n  });\n  const tableOptions = useMemo(() => data ?\n  data.options.map((table) => ({\n    value: table.value,\n    label: _jsx(TableOption, { table: table }),\n    text: table.value,\n    ...(customTableOptionLabelRenderer && {\n      customLabel: customTableOptionLabelRenderer(table)\n    })\n  })) :\n  [], [data, customTableOptionLabelRenderer]);\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentCatalog(undefined);\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(tableOptions.find((option) => option.value === tableValue));\n    } else\n    {\n      setTableSelectValue((tableOptions == null ? void 0 : tableOptions.filter((option) => option && (tableValue == null ? void 0 : tableValue.includes(option.value)))) || []);\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n  const internalTableChange = (selectedOptions) => {\n    if (currentSchema) {\n      onTableSelectChange == null ? void 0 : onTableSelectChange(Array.isArray(selectedOptions) ?\n      selectedOptions.map((option) => option == null ? void 0 : option.value) :\n      selectedOptions == null ? void 0 : selectedOptions.value, currentCatalog, currentSchema);\n    } else\n    {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n  const internalDbChange = (db) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n    setCurrentCatalog(undefined);\n    setCurrentSchema(undefined);\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n  const internalCatalogChange = (catalog) => {\n    setCurrentCatalog(catalog);\n    if (onCatalogChange) {\n      onCatalogChange(catalog);\n    }\n    setCurrentSchema(undefined);\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n  const internalSchemaChange = (schema) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n  const handleFilterOption = useMemo(() => (search, option) => {\n    const searchValue = search.trim().toLowerCase();\n    const { value } = option;\n    return value.toLowerCase().includes(searchValue);\n  }, []);\n  function renderTableSelect() {\n    const disabled = currentSchema && !formMode && readOnly || !currentSchema;\n    const header = sqlLabMode ? _jsx(FormLabel, { children: t('See table schema') }) : _jsx(FormLabel, { children: t('Table') });\n    const select = _jsx(Select, { ariaLabel: t('Select table or type to search tables'), disabled: disabled, filterOption: handleFilterOption, header: header, labelInValue: true, loading: loadingTables, name: \"select-table\", onChange: (options) => internalTableChange(options), options: tableOptions, placeholder: t('Select table or type to search tables'), showSearch: true, mode: tableSelectMode, value: tableSelectValue, allowClear: tableSelectMode === 'multiple', allowSelectAll: false });\n    const refreshLabel = !readOnly && _jsx(RefreshLabel, { onClick: () => refetch(), tooltipContent: t('Force refresh table list') });\n    return renderSelectRow(select, refreshLabel);\n  }\n  return _jsxs(TableSelectorWrapper, { children: [\n    _jsx(DatabaseSelector, { db: database, emptyState: emptyState, formMode: formMode, getDbList: getDbList, handleError: handleError, onDbChange: readOnly ? undefined : internalDbChange, onEmptyResults: onEmptyResults, onCatalogChange: readOnly ? undefined : internalCatalogChange, catalog: currentCatalog, onSchemaChange: readOnly ? undefined : internalSchemaChange, schema: currentSchema, sqlLabMode: sqlLabMode, isDatabaseSelectEnabled: isDatabaseSelectEnabled && !readOnly, readOnly: readOnly }),\n    sqlLabMode && !formMode && _jsx(\"div\", { className: \"divider\" }),\n    renderTableSelect()] }\n  );\n};__signature__(TableSelector, \"useToasts{{ addSuccessToast }}\\nuseState{[currentCatalog, setCurrentCatalog](catalog)}\\nuseState{[currentSchema, setCurrentSchema](schema)}\\nuseState{[tableSelectValue, setTableSelectValue](undefined)}\\nuseTables{{ currentData: data, isFetching: loadingTables, refetch, }}\\nuseMemo{tableOptions}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{handleFilterOption}\", () => [useToasts, useTables]);\nexport const TableSelectorMultiple = (props) => _jsx(TableSelector, { tableSelectMode: \"multiple\", ...props });const _default =\nTableSelector;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(REFRESH_WIDTH, \"REFRESH_WIDTH\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableSelectorWrapper, \"TableSelectorWrapper\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableLabel, \"TableLabel\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableOption, \"TableOption\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(renderSelectRow, \"renderSelectRow\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableSelector, \"TableSelector\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableSelectorMultiple, \"TableSelectorMultiple\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useMemo","useEffect","styled","t","getClientErrorMessage","getClientErrorObject","Select","FormLabel","Icons","DatabaseSelector","RefreshLabel","CertifiedBadge","WarningIconWithTooltip","useToasts","useTables","jsx","_jsx","jsxs","_jsxs","REFRESH_WIDTH","TableSelectorWrapper","div","theme","gridUnit","colors","secondary","light5","grayscale","light1","TableLabel","span","TableOption","table","value","type","extra","title","children","Eye","iconSize","Table","certification","certifiedBy","certified_by","details","size","warning_markdown","warningMarkdown","marginRight","renderSelectRow","select","refreshBtn","className","TableSelector","database","emptyState","formMode","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onCatalogChange","onSchemaChange","readOnly","onEmptyResults","catalog","schema","sqlLabMode","tableSelectMode","tableValue","undefined","onTableSelectChange","customTableOptionLabelRenderer","addSuccessToast","currentCatalog","setCurrentCatalog","currentSchema","setCurrentSchema","tableSelectValue","setTableSelectValue","currentData","data","isFetching","loadingTables","refetch","dbId","id","onSuccess","isFetched","onError","err","then","clientError","tableOptions","options","map","label","text","customLabel","find","option","filter","includes","internalTableChange","selectedOptions","Array","isArray","internalDbChange","db","internalCatalogChange","internalSchemaChange","handleFilterOption","search","searchValue","trim","toLowerCase","renderTableSelect","disabled","header","ariaLabel","filterOption","labelInValue","loading","name","onChange","placeholder","showSearch","mode","allowClear","allowSelectAll","refreshLabel","onClick","tooltipContent","__signature__","TableSelectorMultiple","props","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/app/superset-frontend/src/components/TableSelector/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { SelectValue } from 'antd/lib/select';\n\nimport {\n  styled,\n  t,\n  getClientErrorMessage,\n  getClientErrorObject,\n} from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useTables, Table } from 'src/hooks/apiResources';\n\nconst REFRESH_WIDTH = 30;\n\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `}\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onCatalogChange?: (catalog?: string | null) => void;\n  onSchemaChange?: (schema?: string) => void;\n  readOnly?: boolean;\n  catalog?: string | null;\n  schema?: string;\n  onEmptyResults?: (searchText?: string) => void;\n  sqlLabMode?: boolean;\n  tableValue?: string | string[];\n  onTableSelectChange?: (\n    value?: string | string[],\n    catalog?: string | null,\n    schema?: string,\n  ) => void;\n  tableSelectMode?: 'single' | 'multiple';\n  customTableOptionLabelRenderer?: (table: Table) => JSX.Element;\n}\n\nexport interface TableOption {\n  label: JSX.Element;\n  text: string;\n  value: string;\n}\n\nexport const TableOption = ({ table }: { table: Table }) => {\n  const { value, type, extra } = table;\n  return (\n    <TableLabel title={value}>\n      {type === 'view' ? (\n        <Icons.Eye iconSize=\"m\" />\n      ) : (\n        <Icons.Table iconSize=\"m\" />\n      )}\n      {extra?.certification && (\n        <CertifiedBadge\n          certifiedBy={extra.certification.certified_by}\n          details={extra.certification.details}\n          size=\"l\"\n        />\n      )}\n      {extra?.warning_markdown && (\n        <WarningIconWithTooltip\n          warningMarkdown={extra.warning_markdown}\n          size=\"l\"\n          marginRight={4}\n        />\n      )}\n      {value}\n    </TableLabel>\n  );\n};\n\nfunction renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n  return (\n    <div className=\"section\">\n      <span className=\"select\">{select}</span>\n      <span className=\"refresh\">{refreshBtn}</span>\n    </div>\n  );\n}\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  emptyState,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onCatalogChange,\n  onSchemaChange,\n  readOnly = false,\n  onEmptyResults,\n  catalog,\n  schema,\n  sqlLabMode = true,\n  tableSelectMode = 'single',\n  tableValue = undefined,\n  onTableSelectChange,\n  customTableOptionLabelRenderer,\n}) => {\n  const { addSuccessToast } = useToasts();\n  const [currentCatalog, setCurrentCatalog] = useState<\n    string | null | undefined\n  >(catalog);\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [tableSelectValue, setTableSelectValue] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const {\n    currentData: data,\n    isFetching: loadingTables,\n    refetch,\n  } = useTables({\n    dbId: database?.id,\n    catalog: currentCatalog,\n    schema: currentSchema,\n    onSuccess: (data, isFetched) => {\n      if (isFetched) {\n        addSuccessToast(t('List updated'));\n      }\n    },\n    onError: err => {\n      getClientErrorObject(err).then(clientError => {\n        handleError(\n          getClientErrorMessage(\n            t('There was an error loading the tables'),\n            clientError,\n          ),\n        );\n      });\n    },\n  });\n\n  const tableOptions = useMemo<TableOption[]>(\n    () =>\n      data\n        ? data.options.map(table => ({\n            value: table.value,\n            label: <TableOption table={table} />,\n            text: table.value,\n            ...(customTableOptionLabelRenderer && {\n              customLabel: customTableOptionLabelRenderer(table),\n            }),\n          }))\n        : [],\n    [data, customTableOptionLabelRenderer],\n  );\n\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentCatalog(undefined);\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(\n        tableOptions.find(option => option.value === tableValue),\n      );\n    } else {\n      setTableSelectValue(\n        tableOptions?.filter(\n          option => option && tableValue?.includes(option.value),\n        ) || [],\n      );\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n\n  const internalTableChange = (\n    selectedOptions: TableOption | TableOption[] | undefined,\n  ) => {\n    if (currentSchema) {\n      onTableSelectChange?.(\n        Array.isArray(selectedOptions)\n          ? selectedOptions.map(option => option?.value)\n          : selectedOptions?.value,\n        currentCatalog,\n        currentSchema,\n      );\n    } else {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n\n  const internalDbChange = (db: DatabaseObject) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n\n    setCurrentCatalog(undefined);\n    setCurrentSchema(undefined);\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n\n  const internalCatalogChange = (catalog?: string | null) => {\n    setCurrentCatalog(catalog);\n    if (onCatalogChange) {\n      onCatalogChange(catalog);\n    }\n\n    setCurrentSchema(undefined);\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n\n  const internalSchemaChange = (schema?: string) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n\n  const handleFilterOption = useMemo(\n    () => (search: string, option: TableOption) => {\n      const searchValue = search.trim().toLowerCase();\n      const { value } = option;\n      return value.toLowerCase().includes(searchValue);\n    },\n    [],\n  );\n\n  function renderTableSelect() {\n    const disabled = (currentSchema && !formMode && readOnly) || !currentSchema;\n\n    const header = sqlLabMode ? (\n      <FormLabel>{t('See table schema')}</FormLabel>\n    ) : (\n      <FormLabel>{t('Table')}</FormLabel>\n    );\n\n    const select = (\n      <Select\n        ariaLabel={t('Select table or type to search tables')}\n        disabled={disabled}\n        filterOption={handleFilterOption}\n        header={header}\n        labelInValue\n        loading={loadingTables}\n        name=\"select-table\"\n        onChange={(options: TableOption | TableOption[]) =>\n          internalTableChange(options)\n        }\n        options={tableOptions}\n        placeholder={t('Select table or type to search tables')}\n        showSearch\n        mode={tableSelectMode}\n        value={tableSelectValue}\n        allowClear={tableSelectMode === 'multiple'}\n        allowSelectAll={false}\n      />\n    );\n\n    const refreshLabel = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n\n    return renderSelectRow(select, refreshLabel);\n  }\n\n  return (\n    <TableSelectorWrapper>\n      <DatabaseSelector\n        db={database}\n        emptyState={emptyState}\n        formMode={formMode}\n        getDbList={getDbList}\n        handleError={handleError}\n        onDbChange={readOnly ? undefined : internalDbChange}\n        onEmptyResults={onEmptyResults}\n        onCatalogChange={readOnly ? undefined : internalCatalogChange}\n        catalog={currentCatalog}\n        onSchemaChange={readOnly ? undefined : internalSchemaChange}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n      {sqlLabMode && !formMode && <div className=\"divider\" />}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport const TableSelectorMultiple: FunctionComponent<\n  TableSelectorProps\n> = props => <TableSelector tableSelectMode=\"multiple\" {...props} />;\n\nexport default TableSelector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}