{"ast":null,"code":"var _extensionsRegistry$g;(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { getExtensionsRegistry } from '@superset-ui/core';\nimport { Form } from 'src/components/Form';\nimport { accessTokenField, databaseField, defaultCatalogField, defaultSchemaField, displayField, forceSSLField, hostField, httpPath, httpPathField, passwordField, portField, queryField, usernameField } from './CommonParameters';\nimport { validatedInputField } from './ValidatedInputField';\nimport { EncryptedField } from './EncryptedField';\nimport { TableCatalog } from './TableCatalog';\nimport { formScrollableStyles, validatedFormStyles } from '../styles';\nimport SSHTunnelSwitch from '../SSHTunnelSwitch';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const FormFieldOrder = [\n'host',\n'port',\n'database',\n'default_catalog',\n'default_schema',\n'username',\n'password',\n'access_token',\n'http_path',\n'http_path_field',\n'database_name',\n'credentials_info',\n'service_account_info',\n'catalog',\n'query',\n'encryption',\n'account',\n'warehouse',\n'role',\n'ssh'];\n\nconst extensionsRegistry = getExtensionsRegistry();\nconst SSHTunnelSwitchComponent = (_extensionsRegistry$g = extensionsRegistry.get('ssh_tunnel.form.switch')) != null ? _extensionsRegistry$g : SSHTunnelSwitch;\nconst FORM_FIELD_MAP = {\n  host: hostField,\n  http_path: httpPath,\n  http_path_field: httpPathField,\n  port: portField,\n  database: databaseField,\n  default_catalog: defaultCatalogField,\n  default_schema: defaultSchemaField,\n  username: usernameField,\n  password: passwordField,\n  access_token: accessTokenField,\n  database_name: displayField,\n  query: queryField,\n  encryption: forceSSLField,\n  credentials_info: EncryptedField,\n  service_account_info: EncryptedField,\n  catalog: TableCatalog,\n  warehouse: validatedInputField,\n  role: validatedInputField,\n  account: validatedInputField,\n  ssh: SSHTunnelSwitchComponent\n};\nconst DatabaseConnectionForm = ({ dbModel, db, editNewDb, getPlaceholder, getValidation, isEditMode = false, onAddTableCatalog, onChange, onExtraInputChange, onParametersChange, onParametersUploadFileChange, onQueryChange, onRemoveTableCatalog, sslForced, validationErrors, clearValidationErrors }) => {\n  const parameters = dbModel == null ? void 0 : dbModel.parameters;\n  return _jsx(Form, { children:\n    _jsx(\"div\", {\n      // @ts-ignore\n      css: (theme) => [\n      formScrollableStyles,\n      validatedFormStyles(theme)], children:\n\n      parameters &&\n      FormFieldOrder.filter((key) => Object.keys(parameters.properties).includes(key) ||\n      key === 'database_name').map((field) => {var _parameters$required, _parameters$propertie, _parameters$propertie2;return FORM_FIELD_MAP[field]({\n          required: (_parameters$required = parameters.required) == null ? void 0 : _parameters$required.includes(field),\n          changeMethods: {\n            onParametersChange,\n            onChange,\n            onQueryChange,\n            onParametersUploadFileChange,\n            onAddTableCatalog,\n            onRemoveTableCatalog,\n            onExtraInputChange\n          },\n          validationErrors,\n          getValidation,\n          clearValidationErrors,\n          db,\n          key: field,\n          field,\n          default_value: (_parameters$propertie = parameters.properties[field]) == null ? void 0 : _parameters$propertie.default,\n          description: (_parameters$propertie2 = parameters.properties[field]) == null ? void 0 : _parameters$propertie2.description,\n          isEditMode,\n          sslForced,\n          editNewDb,\n          placeholder: getPlaceholder ? getPlaceholder(field) : undefined\n        });}) }\n    ) }\n  );\n};\nexport const FormFieldMap = FORM_FIELD_MAP;const _default =\nDatabaseConnectionForm;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FormFieldOrder, \"FormFieldOrder\", \"/app/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(extensionsRegistry, \"extensionsRegistry\", \"/app/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(SSHTunnelSwitchComponent, \"SSHTunnelSwitchComponent\", \"/app/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(FORM_FIELD_MAP, \"FORM_FIELD_MAP\", \"/app/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(DatabaseConnectionForm, \"DatabaseConnectionForm\", \"/app/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(FormFieldMap, \"FormFieldMap\", \"/app/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getExtensionsRegistry","Form","accessTokenField","databaseField","defaultCatalogField","defaultSchemaField","displayField","forceSSLField","hostField","httpPath","httpPathField","passwordField","portField","queryField","usernameField","validatedInputField","EncryptedField","TableCatalog","formScrollableStyles","validatedFormStyles","SSHTunnelSwitch","jsx","_jsx","FormFieldOrder","extensionsRegistry","SSHTunnelSwitchComponent","_extensionsRegistry$g","get","FORM_FIELD_MAP","host","http_path","http_path_field","port","database","default_catalog","default_schema","username","password","access_token","database_name","query","encryption","credentials_info","service_account_info","catalog","warehouse","role","account","ssh","DatabaseConnectionForm","dbModel","db","editNewDb","getPlaceholder","getValidation","isEditMode","onAddTableCatalog","onChange","onExtraInputChange","onParametersChange","onParametersUploadFileChange","onQueryChange","onRemoveTableCatalog","sslForced","validationErrors","clearValidationErrors","parameters","children","css","theme","filter","key","Object","keys","properties","includes","map","field","_parameters$required","_parameters$propertie","_parameters$propertie2","required","changeMethods","default_value","default","description","placeholder","undefined","FormFieldMap","_default","reactHotLoader","reactHotLoaderGlobal","register","leaveModule","module"],"sources":["/app/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FormEvent } from 'react';\nimport {\n  SupersetTheme,\n  JsonObject,\n  getExtensionsRegistry,\n} from '@superset-ui/core';\nimport { InputProps } from 'antd/lib/input';\nimport { Form } from 'src/components/Form';\nimport {\n  accessTokenField,\n  databaseField,\n  defaultCatalogField,\n  defaultSchemaField,\n  displayField,\n  forceSSLField,\n  hostField,\n  httpPath,\n  httpPathField,\n  passwordField,\n  portField,\n  queryField,\n  usernameField,\n} from './CommonParameters';\nimport { validatedInputField } from './ValidatedInputField';\nimport { EncryptedField } from './EncryptedField';\nimport { TableCatalog } from './TableCatalog';\nimport { formScrollableStyles, validatedFormStyles } from '../styles';\nimport { DatabaseForm, DatabaseObject } from '../../types';\nimport SSHTunnelSwitch from '../SSHTunnelSwitch';\n\nexport const FormFieldOrder = [\n  'host',\n  'port',\n  'database',\n  'default_catalog',\n  'default_schema',\n  'username',\n  'password',\n  'access_token',\n  'http_path',\n  'http_path_field',\n  'database_name',\n  'credentials_info',\n  'service_account_info',\n  'catalog',\n  'query',\n  'encryption',\n  'account',\n  'warehouse',\n  'role',\n  'ssh',\n];\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nconst SSHTunnelSwitchComponent =\n  extensionsRegistry.get('ssh_tunnel.form.switch') ?? SSHTunnelSwitch;\n\nconst FORM_FIELD_MAP = {\n  host: hostField,\n  http_path: httpPath,\n  http_path_field: httpPathField,\n  port: portField,\n  database: databaseField,\n  default_catalog: defaultCatalogField,\n  default_schema: defaultSchemaField,\n  username: usernameField,\n  password: passwordField,\n  access_token: accessTokenField,\n  database_name: displayField,\n  query: queryField,\n  encryption: forceSSLField,\n  credentials_info: EncryptedField,\n  service_account_info: EncryptedField,\n  catalog: TableCatalog,\n  warehouse: validatedInputField,\n  role: validatedInputField,\n  account: validatedInputField,\n  ssh: SSHTunnelSwitchComponent,\n};\n\ninterface DatabaseConnectionFormProps {\n  isEditMode?: boolean;\n  sslForced: boolean;\n  editNewDb?: boolean;\n  dbModel: DatabaseForm;\n  db: Partial<DatabaseObject> | null;\n  onParametersChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onQueryChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onParametersUploadFileChange?: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onExtraInputChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onAddTableCatalog: () => void;\n  onRemoveTableCatalog: (idx: number) => void;\n  validationErrors: JsonObject | null;\n  getValidation: () => void;\n  clearValidationErrors: () => void;\n  getPlaceholder?: (field: string) => string | undefined;\n}\n\nconst DatabaseConnectionForm = ({\n  dbModel,\n  db,\n  editNewDb,\n  getPlaceholder,\n  getValidation,\n  isEditMode = false,\n  onAddTableCatalog,\n  onChange,\n  onExtraInputChange,\n  onParametersChange,\n  onParametersUploadFileChange,\n  onQueryChange,\n  onRemoveTableCatalog,\n  sslForced,\n  validationErrors,\n  clearValidationErrors,\n}: DatabaseConnectionFormProps) => {\n  const parameters = dbModel?.parameters;\n\n  return (\n    <Form>\n      <div\n        // @ts-ignore\n        css={(theme: SupersetTheme) => [\n          formScrollableStyles,\n          validatedFormStyles(theme),\n        ]}\n      >\n        {parameters &&\n          FormFieldOrder.filter(\n            (key: string) =>\n              Object.keys(parameters.properties).includes(key) ||\n              key === 'database_name',\n          ).map(field =>\n            FORM_FIELD_MAP[field]({\n              required: parameters.required?.includes(field),\n              changeMethods: {\n                onParametersChange,\n                onChange,\n                onQueryChange,\n                onParametersUploadFileChange,\n                onAddTableCatalog,\n                onRemoveTableCatalog,\n                onExtraInputChange,\n              },\n              validationErrors,\n              getValidation,\n              clearValidationErrors,\n              db,\n              key: field,\n              field,\n              default_value: parameters.properties[field]?.default,\n              description: parameters.properties[field]?.description,\n              isEditMode,\n              sslForced,\n              editNewDb,\n              placeholder: getPlaceholder ? getPlaceholder(field) : undefined,\n            }),\n          )}\n      </div>\n    </Form>\n  );\n};\nexport const FormFieldMap = FORM_FIELD_MAP;\n\nexport default DatabaseConnectionForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}